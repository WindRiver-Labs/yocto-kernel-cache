From 728fcba18bc6795f99f2cca1e21da0cc918a5e0f Mon Sep 17 00:00:00 2001
From: Jakub Palider <jpalider@marvell.com>
Date: Thu, 25 Mar 2021 20:40:33 +0530
Subject: [PATCH 13/13] misc: bphy: Ensure proper cleanup sequence

commit 283152abc8648035d7315cbcdcfc45a01a6f1d89 from
git@git.assembla.com:cavium/WindRiver.linux.git

There appears to be a race condition between irq cleanup
handlers and release procedure.
Freeing resourcs at release() is still too early since
cleanup functions may take place until driver exit(). This
is also a place where resource freeing now takes place. In
order to keep allocation/deallocation symmetry related
resources from now are acquired in init().

Change-Id: Ib5e99d8ba4e0c935db398f82461d5220c659c76d
Signed-off-by: Jakub Palider <jpalider@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/48652
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/misc/otx_bphy_ctr.c | 40 ++++++++++++++++++++++---------------
 1 file changed, 24 insertions(+), 16 deletions(-)

diff --git a/drivers/misc/otx_bphy_ctr.c b/drivers/misc/otx_bphy_ctr.c
index 59d6a482e5b7..c489bcc010c5 100644
--- a/drivers/misc/otx_bphy_ctr.c
+++ b/drivers/misc/otx_bphy_ctr.c
@@ -195,18 +195,6 @@ static void cleanup_el3_irqs(struct task_struct *task)
 
 static int otx_dev_open(struct inode *inode, struct file *fp)
 {
-	struct arm_smccc_res res;
-
-	arm_smccc_smc(OCTEONTX_GET_BPHY_PSM_MAX_IRQ, 0,
-		      0, 0, 0, 0, 0, 0, &res);
-	bphy_max_irq = res.a0;
-
-	irq_installed = kcalloc(bphy_max_irq, sizeof(int), GFP_KERNEL);
-	irq_installed_threads = (struct thread_info **)
-		kcalloc(bphy_max_irq, sizeof(struct thread_info *), GFP_KERNEL);
-	irq_installed_tasks = (struct task_struct **)
-		kcalloc(bphy_max_irq, sizeof(struct task_struct *), GFP_KERNEL);
-
 	in_use = 1;
 	return 0;
 }
@@ -216,10 +204,6 @@ static int otx_dev_release(struct inode *inode, struct file *fp)
 	if (in_use == 0)
 		return -EINVAL;
 
-	kfree(irq_installed);
-	kfree(irq_installed_threads);
-	kfree(irq_installed_tasks);
-
 	in_use = 0;
 	return 0;
 }
@@ -233,6 +217,7 @@ static const struct file_operations fops = {
 
 static int __init otx_ctr_dev_init(void)
 {
+	struct arm_smccc_res res;
 	int err = 0;
 
 	/* create a character device */
@@ -276,8 +261,27 @@ static int __init otx_ctr_dev_init(void)
 		goto cleanup_handler_err;
 	}
 
+	arm_smccc_smc(OCTEONTX_GET_BPHY_PSM_MAX_IRQ, 0,
+		      0, 0, 0, 0, 0, 0, &res);
+	bphy_max_irq = res.a0;
+
+	irq_installed = kcalloc(bphy_max_irq, sizeof(int), GFP_KERNEL);
+	irq_installed_threads = (struct thread_info **)
+		kcalloc(bphy_max_irq, sizeof(struct thread_info *), GFP_KERNEL);
+	irq_installed_tasks = (struct task_struct **)
+		kcalloc(bphy_max_irq, sizeof(struct task_struct *), GFP_KERNEL);
+	if (!irq_installed || !irq_installed_threads || !irq_installed_tasks) {
+		err = -ENOMEM;
+		goto alloc_err;
+	}
+
 	return err;
 
+alloc_err:
+	kfree(irq_installed);
+	kfree(irq_installed_threads);
+	kfree(irq_installed_tasks);
+
 device_create_err:
 	class_destroy(otx_class);
 
@@ -300,6 +304,10 @@ static void __exit otx_ctr_dev_exit(void)
 	unregister_chrdev_region(otx_dev, 1);
 
 	task_cleanup_handler_remove(cleanup_el3_irqs);
+
+	kfree(irq_installed);
+	kfree(irq_installed_threads);
+	kfree(irq_installed_tasks);
 }
 
 module_init(otx_ctr_dev_init);
-- 
2.17.0

