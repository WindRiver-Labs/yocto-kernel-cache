From 9dd2b2e3892a18180aad063ed55f1a696ab8d20f Mon Sep 17 00:00:00 2001
From: Kris Chaplin <kris.chaplin@linux.intel.com>
Date: Wed, 21 Jul 2021 15:22:17 +0100
Subject: [PATCH 8/9] HSD #16014059592: fcs: Add SMC support for ROM Patch
 SHA384 mailbox

commit bfb649fc1ed72b0a0daf1683e98d8fb4e1e11c1f from
https://github.com/altera-opensource/linux-socfpga/commits/socfpga-5.4.124-lts

Adds FCS support for ROM Patch SHA384 mailbox for n5x

Signed-off-by: Kris Chaplin <kris.chaplin@linux.intel.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/crypto/intel_fcs.c           | 58 ++++++++++++++++++++++++++++
 include/uapi/linux/intel_fcs-ioctl.h | 16 ++++++++
 2 files changed, 74 insertions(+)

diff --git a/drivers/crypto/intel_fcs.c b/drivers/crypto/intel_fcs.c
index 3eb073140a42..0e38bed29733 100644
--- a/drivers/crypto/intel_fcs.c
+++ b/drivers/crypto/intel_fcs.c
@@ -26,6 +26,7 @@
 #define RANDOM_NUMBER_SIZE	32
 #define FILE_NAME_SIZE		32
 #define PS_BUF_SIZE		64
+#define SHA384_SIZE		48
 #define INVALID_STATUS		0xffffffff
 #define INVALID_CID		0xffffffff
 
@@ -997,6 +998,63 @@ static long fcs_ioctl(struct file *file, unsigned int cmd,
 
 		break;
 
+	case INTEL_FCS_DEV_GET_ROM_PATCH_SHA384:
+		if (copy_from_user(data, (void __user *)arg, sizeof(*data))) {
+			dev_err(dev, "failure on copy_from_user\n");
+			return -EFAULT;
+		}
+
+		s_buf = stratix10_svc_allocate_memory(priv->chan,
+						      SHA384_SIZE);
+		if (!s_buf) {
+			dev_err(dev, "failed to allocate RNG buffer\n");
+			return -ENOMEM;
+		}
+
+		msg->command = COMMAND_FCS_GET_ROM_PATCH_SHA384;
+		msg->payload = s_buf;
+		msg->payload_length = SHA384_SIZE;
+		priv->client.receive_cb = fcs_data_callback;
+
+		ret = fcs_request_service(priv, (void *)msg,
+					  FCS_REQUEST_TIMEOUT);
+
+		if (!ret && !priv->status) {
+			if (!priv->kbuf) {
+				dev_err(dev, "failure on kbuf\n");
+				fcs_close_services(priv, s_buf, NULL);
+				return -EFAULT;
+			}
+
+			if (priv->size > SHA384_SIZE) {
+				dev_err(dev, "returned size is incorrect\n");
+				fcs_close_services(priv, s_buf, NULL);
+				ret = -EFAULT;
+			}
+
+			for (i = 0; i < 12; i++)
+				dev_dbg(dev, "output_data[%d]=%d\n", i,
+					 *((int *)priv->kbuf + i));
+			for (i = 0; i < 12; i++)
+				data->com_paras.sha384.checksum[i] =
+					*((int *)priv->kbuf + i);
+			data->status = priv->status;
+
+		} else {
+			/* failed to get SHA */
+			data->status = priv->status;
+		}
+
+
+		if (copy_to_user((void __user *)arg, data, sizeof(*data))) {
+			dev_err(dev, "failure on copy_to_user\n");
+			fcs_close_services(priv, s_buf, NULL);
+			ret = -EFAULT;
+		}
+
+		fcs_close_services(priv, s_buf, NULL);
+		break;
+
 	default:
 		dev_warn(dev, "shouldn't be here [0x%x]\n", cmd);
 		break;
diff --git a/include/uapi/linux/intel_fcs-ioctl.h b/include/uapi/linux/intel_fcs-ioctl.h
index 7fa2503f4ecb..1f1aa5f0814c 100644
--- a/include/uapi/linux/intel_fcs-ioctl.h
+++ b/include/uapi/linux/intel_fcs-ioctl.h
@@ -206,6 +206,14 @@ struct fcs_attestation_certificate_reload {
 	int c_request;
 };
 
+/**
+ * struct fcs_rom_patch_sha384
+ * @checksum: 12 words of checksum calculated from rom patch area
+ */
+struct fcs_rom_patch_sha384 {
+	uint32_t checksum[12];
+};
+
 /**
  * struct intel_fcs_dev_ioct: common structure passed to Linux
  *	kernel driver for all commands.
@@ -241,6 +249,7 @@ struct intel_fcs_dev_ioctl {
 		struct fcs_attestation_measuerments	measurement;
 		struct fcs_attestation_certificate	certificate;
 		struct fcs_attestation_certificate_reload	c_reload;
+		struct fcs_rom_patch_sha384 sha384;
 	} com_paras;
 };
 
@@ -266,6 +275,8 @@ struct intel_fcs_dev_ioctl {
  * @INTEL_FCS_DEV_DATA_DECRYPTION_CMD:
  *
  * @INTEL_FCS_DEV_RANDOM_NUMBER_GEN_CMD:
+ *
+ * @INTEL_FCS_DEV_GET_ROM_PATCH_SHA384_CMD:
  */
 enum intel_fcs_command_code {
 	INTEL_FCS_DEV_COMMAND_NONE = 0,
@@ -284,6 +295,7 @@ enum intel_fcs_command_code {
 	INTEL_FCS_DEV_ATTESTATION_MEASUREMENT_CMD,
 	INTEL_FCS_DEV_ATTESTATION_GET_CERTIFICATE_CMD,
 	INTEL_FCS_DEV_ATTESTATION_CERTIFICATE_RELOAD_CMD,
+	INTEL_FCS_DEV_GET_ROM_PATCH_SHA384_CMD
 };
 
 #define INTEL_FCS_DEV_VERSION_REQUEST \
@@ -341,5 +353,9 @@ enum intel_fcs_command_code {
 #define INTEL_FCS_DEV_ATTESTATION_CERTIFICATE_RELOAD \
 	_IOWR(INTEL_FCS_IOCTL, \
 	      INTEL_FCS_DEV_ATTESTATION_CERTIFICATE_RELOAD_CMD, struct intel_fcs_dev_ioctl)
+
+#define INTEL_FCS_DEV_GET_ROM_PATCH_SHA384 \
+	_IOWR(INTEL_FCS_IOCTL, \
+	      INTEL_FCS_DEV_GET_ROM_PATCH_SHA384_CMD, struct intel_fcs_dev_ioctl)
 #endif
 
-- 
2.31.1

