From b360f843e828c067262b2b9fc592090b2fda3b98 Mon Sep 17 00:00:00 2001
From: Dinh Nguyen <dinh.nguyen@intel.com>
Date: Wed, 2 Jun 2021 13:50:19 -0500
Subject: [PATCH 15/16] clk: agilex/stratix10: add support for the 2nd bypass

commit 25096d3026a10cc91924fb7ec9579f4109532d4c from
https://github.com/altera-opensource/linux-socfpga.git
branch is socfpga-5.4.114-lts

The EMAC clocks on Stratix10/Agilex/N5X have an additional bypass that
was not being accounted for. The bypass selects between
emaca_clk/emacb_clk and boot_clk.

Because the bypass register offset is different between Stratix10 and
Agilex/N5X, it's best to create a new function to calculate the bypass.

Fixes: 80c6b7a0894f ("clk: socfpga: agilex: add clock driver for the Agilex platform")

Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/clk/socfpga/clk-agilex.c    |  45 ++---------
 drivers/clk/socfpga/clk-gate-s10.c  | 120 +++++++++++++++++++++++++++-
 drivers/clk/socfpga/clk-s10.c       |  39 ++-------
 drivers/clk/socfpga/stratix10-clk.h |   6 ++
 4 files changed, 138 insertions(+), 72 deletions(-)

diff --git a/drivers/clk/socfpga/clk-agilex.c b/drivers/clk/socfpga/clk-agilex.c
index e52f7da64686..07ccb569d7c0 100644
--- a/drivers/clk/socfpga/clk-agilex.c
+++ b/drivers/clk/socfpga/clk-agilex.c
@@ -54,43 +54,14 @@ static const char * const s2f_usr1_free_mux[] = {"main_pll_c2", "peri_pll_c2",
 static const char * const mpu_mux[] = { "mpu_free_clk", "boot_clk",};
 
 static const char * const s2f_usr0_mux[] = {"f2s-free-clk", "boot_clk"};
-static const char * const emac_mux[] = {"emaca_free_clk", "emacb_free_clk"};
+static const char * const emac_mux[] = {"emaca_free_clk", "emacb_free_clk",
+					"boot_clk"};
 static const char * const noc_mux[] = {"noc_free_clk", "boot_clk"};
-
-static const struct clk_parent_data sdmmc_mux[] = {
-	{ .fw_name = "sdmmc_free_clk",
-	  .name = "sdmmc_free_clk", },
-	{ .fw_name = "boot_clk",
-	  .name = "boot_clk", },
-};
-
-static const struct clk_parent_data s2f_user1_mux[] = {
-	{ .fw_name = "s2f_user1_free_clk",
-	  .name = "s2f_user1_free_clk", },
-	{ .fw_name = "boot_clk",
-	  .name = "boot_clk", },
-};
-
-static const struct clk_parent_data psi_mux[] = {
-	{ .fw_name = "psi_ref_free_clk",
-	  .name = "psi_ref_free_clk", },
-	{ .fw_name = "boot_clk",
-	  .name = "boot_clk", },
-};
-
-static const struct clk_parent_data gpio_db_mux[] = {
-	{ .fw_name = "gpio_db_free_clk",
-	  .name = "gpio_db_free_clk", },
-	{ .fw_name = "boot_clk",
-	  .name = "boot_clk", },
-};
-
-static const struct clk_parent_data emac_ptp_mux[] = {
-	{ .fw_name = "emac_ptp_free_clk",
-	  .name = "emac_ptp_free_clk", },
-	{ .fw_name = "boot_clk",
-	  .name = "boot_clk", },
-};
+static const char * const sdmmc_mux[] = {"sdmmc_free_clk", "boot_clk"};
+static const char * const s2f_user1_mux[] = {"s2f_user1_free_clk", "boot_clk"};
+static const char * const psi_mux[] = {"psi_ref_free_clk", "boot_clk"};
+static const char * const gpio_db_mux[] = {"gpio_db_free_clk", "boot_clk"};
+static const char * const emac_ptp_mux[] = {"emac_ptp_free_clk", "boot_clk"};
 
 /* clocks in AO (always on) controller */
 static const struct stratix10_pll_clock agilex_pll_clks[] = {
@@ -281,7 +252,7 @@ static int agilex_clk_register_gate(const struct stratix10_gate_clock *clks,
 	int i;
 
 	for (i = 0; i < nums; i++) {
-		clk = s10_register_gate(clks[i].name, clks[i].parent_name,
+		clk = agilex_register_gate(clks[i].name, clks[i].parent_name,
 					clks[i].parent_names,
 					clks[i].num_parents,
 					clks[i].flags, base,
diff --git a/drivers/clk/socfpga/clk-gate-s10.c b/drivers/clk/socfpga/clk-gate-s10.c
index 54a464fa63e0..03f62cbf95bc 100644
--- a/drivers/clk/socfpga/clk-gate-s10.c
+++ b/drivers/clk/socfpga/clk-gate-s10.c
@@ -11,6 +11,13 @@
 #define SOCFPGA_CS_PDBG_CLK	"cs_pdbg_clk"
 #define to_socfpga_gate_clk(p) container_of(p, struct socfpga_gate_clk, hw.hw)
 
+#define SOCFPGA_EMAC0_CLK		"emac0_clk"
+#define SOCFPGA_EMAC1_CLK		"emac1_clk"
+#define SOCFPGA_EMAC2_CLK		"emac1_clk"
+#define AGILEX_BYPASS_OFFSET		0xC
+#define STRATIX10_BYPASS_OFFSET		0x2C
+#define BOOTCLK_BYPASS			2
+
 static unsigned long socfpga_gate_clk_recalc_rate(struct clk_hw *hwclk,
 						  unsigned long parent_rate)
 {
@@ -44,22 +51,73 @@ static unsigned long socfpga_dbg_clk_recalc_rate(struct clk_hw *hwclk,
 static u8 socfpga_gate_get_parent(struct clk_hw *hwclk)
 {
 	struct socfpga_gate_clk *socfpgaclk = to_socfpga_gate_clk(hwclk);
-	u32 mask;
+	u32 mask, second_bypass;
 	u8 parent = 0;
+	const char *name = clk_hw_get_name(hwclk);
 
 	if (socfpgaclk->bypass_reg) {
 		mask = (0x1 << socfpgaclk->bypass_shift);
 		parent = ((readl(socfpgaclk->bypass_reg) & mask) >>
 			  socfpgaclk->bypass_shift);
 	}
+
+	if (streq(name, SOCFPGA_EMAC0_CLK) ||
+	    streq(name, SOCFPGA_EMAC1_CLK) ||
+	    streq(name, SOCFPGA_EMAC2_CLK) ) {
+		    second_bypass = readl(socfpgaclk->bypass_reg -
+				          STRATIX10_BYPASS_OFFSET);
+		/* EMACA bypass to bootclk @0xB0 offset */
+		if (second_bypass & 0x1)
+			if (parent == 0) /* only applicable if parent is maca */
+				parent = BOOTCLK_BYPASS;
+
+		if (second_bypass & 0x2)
+			if (parent == 1) /* only applicable if parent is macb */
+				parent = BOOTCLK_BYPASS;
+	}
 	return parent;
 }
 
+static u8 socfpga_agilex_gate_get_parent(struct clk_hw *hwclk)
+{
+	struct socfpga_gate_clk *socfpgaclk = to_socfpga_gate_clk(hwclk);
+	u32 mask, second_bypass;
+	u8 parent = 0;
+	const char *name = clk_hw_get_name(hwclk);
+
+	if (socfpgaclk->bypass_reg) {
+		mask = (0x1 << socfpgaclk->bypass_shift);
+		parent = ((readl(socfpgaclk->bypass_reg) & mask) >>
+			  socfpgaclk->bypass_shift);
+	}
+
+	if (streq(name, SOCFPGA_EMAC0_CLK) ||
+	    streq(name, SOCFPGA_EMAC1_CLK) ||
+	    streq(name, SOCFPGA_EMAC2_CLK) ) {
+		    second_bypass = readl(socfpgaclk->bypass_reg -
+				          AGILEX_BYPASS_OFFSET);
+		/* EMACA bypass to bootclk @0x88 offset */
+		if (second_bypass & 0x1)
+			if (parent == 0) /* only applicable if parent is maca */
+				parent = BOOTCLK_BYPASS;
+
+		if (second_bypass & 0x2)
+			if (parent == 1) /* only applicable if parent is macb */
+				parent = BOOTCLK_BYPASS;
+	}
+
+	return parent;
+}
 static struct clk_ops gateclk_ops = {
 	.recalc_rate = socfpga_gate_clk_recalc_rate,
 	.get_parent = socfpga_gate_get_parent,
 };
 
+static struct clk_ops agilex_gateclk_ops = {
+	.recalc_rate = socfpga_gate_clk_recalc_rate,
+	.get_parent = socfpga_agilex_gate_get_parent,
+};
+
 static const struct clk_ops dbgclk_ops = {
 	.recalc_rate = socfpga_dbg_clk_recalc_rate,
 	.get_parent = socfpga_gate_get_parent,
@@ -124,3 +182,63 @@ struct clk *s10_register_gate(const char *name, const char *parent_name,
 
 	return clk;
 }
+
+struct clk *agilex_register_gate(const char *name, const char *parent_name,
+			      const char * const *parent_names,
+			      u8 num_parents, unsigned long flags,
+			      void __iomem *regbase, unsigned long gate_reg,
+			      unsigned long gate_idx, unsigned long div_reg,
+			      unsigned long div_offset, u8 div_width,
+			      unsigned long bypass_reg, u8 bypass_shift,
+			      u8 fixed_div)
+{
+	struct clk *clk;
+	struct socfpga_gate_clk *socfpga_clk;
+	struct clk_init_data init;
+
+	socfpga_clk = kzalloc(sizeof(*socfpga_clk), GFP_KERNEL);
+	if (!socfpga_clk)
+		return NULL;
+
+	socfpga_clk->hw.reg = regbase + gate_reg;
+	socfpga_clk->hw.bit_idx = gate_idx;
+
+	gateclk_ops.enable = clk_gate_ops.enable;
+	gateclk_ops.disable = clk_gate_ops.disable;
+
+	socfpga_clk->fixed_div = fixed_div;
+
+	if (div_reg)
+		socfpga_clk->div_reg = regbase + div_reg;
+	else
+		socfpga_clk->div_reg = NULL;
+
+	socfpga_clk->width = div_width;
+	socfpga_clk->shift = div_offset;
+
+	if (bypass_reg)
+		socfpga_clk->bypass_reg = regbase + bypass_reg;
+	else
+		socfpga_clk->bypass_reg = NULL;
+	socfpga_clk->bypass_shift = bypass_shift;
+
+	if (streq(name, "cs_pdbg_clk"))
+		init.ops = &dbgclk_ops;
+	else
+		init.ops = &agilex_gateclk_ops;
+
+	init.name = name;
+	init.flags = flags;
+
+	init.num_parents = num_parents;
+	init.parent_names = parent_names ? parent_names : &parent_name;
+	socfpga_clk->hw.hw.init = &init;
+
+	clk = clk_register(NULL, &socfpga_clk->hw.hw);
+	if (WARN_ON(IS_ERR(clk))) {
+		kfree(socfpga_clk);
+		return NULL;
+	}
+
+	return clk;
+}
diff --git a/drivers/clk/socfpga/clk-s10.c b/drivers/clk/socfpga/clk-s10.c
index 8faca5ebf668..d19a37db1900 100644
--- a/drivers/clk/socfpga/clk-s10.c
+++ b/drivers/clk/socfpga/clk-s10.c
@@ -42,40 +42,11 @@ static const char * const mpu_free_mux[] = {"main_mpu_base_clk",
 					    "osc1", "cb-intosc-hs-div2-clk",
 					    "f2s-free-clk"};
 
-static const struct clk_parent_data sdmmc_mux[] = {
-	{ .fw_name = "sdmmc_free_clk",
-	  .name = "sdmmc_free_clk", },
-	{ .fw_name = "boot_clk",
-	  .name = "boot_clk", },
-};
-
-static const struct clk_parent_data s2f_user1_mux[] = {
-	{ .fw_name = "s2f_user1_free_clk",
-	  .name = "s2f_user1_free_clk", },
-	{ .fw_name = "boot_clk",
-	  .name = "boot_clk", },
-};
-
-static const struct clk_parent_data psi_mux[] = {
-	{ .fw_name = "psi_ref_free_clk",
-	  .name = "psi_ref_free_clk", },
-	{ .fw_name = "boot_clk",
-	  .name = "boot_clk", },
-};
-
-static const struct clk_parent_data gpio_db_mux[] = {
-	{ .fw_name = "gpio_db_free_clk",
-	  .name = "gpio_db_free_clk", },
-	{ .fw_name = "boot_clk",
-	  .name = "boot_clk", },
-};
-
-static const struct clk_parent_data emac_ptp_mux[] = {
-	{ .fw_name = "emac_ptp_free_clk",
-	  .name = "emac_ptp_free_clk", },
-	{ .fw_name = "boot_clk",
-	  .name = "boot_clk", },
-};
+static const char * const sdmmc_mux[] = {"sdmmc_free_clk", "boot_clk"};
+static const char * const s2f_user1_mux[] = {"s2f_user1_free_clk", "boot_clk"};
+static const char * const psi_mux[] = {"psi_ref_free_clk", "boot_clk"};
+static const char * const gpio_db_mux[] = {"gpio_db_free_clk", "boot_clk"};
+static const char * const emac_ptp_mux[] = {"emac_ptp_free_clk", "boot_clk"};
 
 /* clocks in AO (always on) controller */
 static const struct stratix10_pll_clock s10_pll_clks[] = {
diff --git a/drivers/clk/socfpga/stratix10-clk.h b/drivers/clk/socfpga/stratix10-clk.h
index bcba8735d257..63bd14728fd6 100644
--- a/drivers/clk/socfpga/stratix10-clk.h
+++ b/drivers/clk/socfpga/stratix10-clk.h
@@ -97,4 +97,10 @@ struct clk *s10_register_gate(const char *, const char *,
 			      unsigned long, unsigned long,
 			      unsigned long, unsigned long, u8,
 			      unsigned long, u8, u8);
+struct clk *agilex_register_gate(const char *, const char *,
+			      const char * const *, u8,
+			      unsigned long, void __iomem *,
+			      unsigned long, unsigned long,
+			      unsigned long, unsigned long, u8,
+			      unsigned long, u8, u8);
 #endif	/* __STRATIX10_CLK_H */
-- 
2.31.1

