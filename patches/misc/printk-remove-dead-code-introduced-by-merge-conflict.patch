From 655243aeafce70c4318d16e8b2d8f9fd61080273 Mon Sep 17 00:00:00 2001
From: Ovidiu Panait <ovidiu.panait@windriver.com>
Date: Wed, 10 Feb 2021 07:53:09 +0000
Subject: [PATCH 01/28] printk: remove dead code introduced by merge conflict

This is a WR-specific commit that removes code that was introduced by merge
commit [1]. This is needed to align the context to 5.9-rt, so that we can
backport the printk ringbuffer changes more easily ([2]).

[1] 3a7eee8e8791 ("Merge branch 'v5.2/standard/base' into v5.2/standard/preempt-rt/base")
    https://git.yoctoproject.org/cgit/cgit.cgi/linux-yocto/commit/?h=v5.2/standard/base&id=3a7eee8e8791
[2] https://git.kernel.org/pub/scm/linux/kernel/git/rt/linux-rt-devel.git/commit/?id=3edc0c85d1546672a47d1014e7f6e784f1167cff

Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
---
 kernel/printk/printk.c | 31 -------------------------------
 1 file changed, 31 deletions(-)

diff --git a/kernel/printk/printk.c b/kernel/printk/printk.c
index e22a0b0191f1..2b4616fd4fd4 100644
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -382,20 +382,6 @@ static u64 clear_seq;
 #define LOG_LEVEL(v)		((v) & 0x07)
 #define LOG_FACILITY(v)		((v) >> 3 & 0xff)
 
-#if 0
-/*
- * We cannot access per-CPU data (e.g. per-CPU flush irq_work) before
- * per_cpu_areas are initialised. This variable is set to true when
- * it's safe to access per-CPU data.
- */
-static bool __printk_percpu_data_ready __read_mostly;
-
-bool printk_percpu_data_ready(void)
-{
-	return __printk_percpu_data_ready;
-}
-#endif
-
 /* Return log buffer address */
 char *log_buf_addr_get(void)
 {
@@ -1015,15 +1001,6 @@ static inline void log_buf_add_cpu(void) {}
 #endif /* CONFIG_SMP */
 #endif /* 0 */
 
-#if 0
-static void __init set_percpu_data_ready(void)
-{
-	/* Make sure we set this flag only after printk_safe() init is done */
-	barrier();
-	__printk_percpu_data_ready = true;
-}
-#endif
-
 void __init setup_log_buf(int early)
 {
 /* FIXME: no support for buffer resizing */
@@ -1032,14 +1009,6 @@ void __init setup_log_buf(int early)
 	char *new_log_buf;
 	unsigned int free;
 
-	/*
-	 * Some archs call setup_log_buf() multiple times - first is very
-	 * early, e.g. from setup_arch(), and second - when percpu_areas
-	 * are initialised.
-	 */
-	if (!early)
-		set_percpu_data_ready();
-
 	if (log_buf != __log_buf)
 		return;
 
-- 
2.31.1

