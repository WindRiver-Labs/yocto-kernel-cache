From d11a13b9eb6a6ec04c635eeb361e98115030a21b Mon Sep 17 00:00:00 2001
From: Baha Mesleh <baha.mesleh@nokia.com>
Date: Thu, 30 Sep 2021 16:41:48 +0530
Subject: [PATCH 10/11] octeontx2-bphy-netdev: fix link carrier state update

commit d24ff2a1caa61c5752922c99f657430ad2a710c7 from
git@git.assembla.com:cavium/WindRiver.linux.git

This patch corrects the issue with changing the link carrier state
in device open and close handlers and some code cleanup was done.

description of issue:
If the state update is made while the interface admin state is down,
then the state is lost when the interface admin state is changed to
up afterwards. Expectation is that the link state set via the
OTX2_RFOE_IOCTL_LINK_EVENT/OTX2_CPRI_IOCTL_LINK_EVENT ioctl commands
is maintained regardless of the interface admin state.

Change-Id: I3184c63e4c3d51593d099971fb0b352e0d406b2e
Signed-off-by: Baha Mesleh <baha.mesleh@nokia.com>
Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/64365
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 .../marvell/octeontx2/bphy/otx2_bphy_main.c   | 40 +----------------
 .../marvell/octeontx2/bphy/otx2_cpri.c        | 41 +++++++++++++++---
 .../marvell/octeontx2/bphy/otx2_cpri.h        |  3 ++
 .../marvell/octeontx2/bphy/otx2_rfoe.c        | 43 ++++++++++++++++---
 .../marvell/octeontx2/bphy/otx2_rfoe.h        |  3 ++
 5 files changed, 80 insertions(+), 50 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_bphy_main.c b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_bphy_main.c
index a0b8eb86da1f..20f8a32596a8 100644
--- a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_bphy_main.c
+++ b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_bphy_main.c
@@ -370,7 +370,6 @@ static long otx2_bphy_cdev_ioctl(struct file *filp, unsigned int cmd,
 	case OTX2_RFOE_IOCTL_LINK_EVENT:
 	{
 		struct otx2_rfoe_drv_ctx *drv_ctx = NULL;
-		struct otx2_rfoe_ndev_priv *priv;
 		struct otx2_rfoe_link_event cfg;
 		struct net_device *netdev;
 		int idx;
@@ -399,31 +398,13 @@ static long otx2_bphy_cdev_ioctl(struct file *filp, unsigned int cmd,
 			goto out;
 		}
 		netdev = drv_ctx->netdev;
-		priv = netdev_priv(netdev);
-		if (priv->link_state != cfg.link_state) {
-			if (cfg.link_state == LINK_STATE_DOWN) {
-				netdev_info(netdev, "Link DOWN\n");
-				priv->link_state = 0;
-				if (netif_running(netdev)) {
-					netif_carrier_off(netdev);
-					netif_stop_queue(netdev);
-				}
-			} else {
-				netdev_info(netdev, "Link UP\n");
-				priv->link_state = 1;
-				if (netif_running(netdev)) {
-					netif_carrier_on(netdev);
-					netif_start_queue(netdev);
-				}
-			}
-		}
+		otx2_rfoe_set_link_state(netdev, cfg.link_state);
 		ret = 0;
 		goto out;
 	}
 	case OTX2_CPRI_IOCTL_LINK_EVENT:
 	{
 		struct otx2_cpri_drv_ctx *drv_ctx = NULL;
-		struct otx2_cpri_ndev_priv *priv;
 		struct otx2_cpri_link_event cfg;
 		struct net_device *netdev;
 		int idx;
@@ -452,24 +433,7 @@ static long otx2_bphy_cdev_ioctl(struct file *filp, unsigned int cmd,
 			goto out;
 		}
 		netdev = drv_ctx->netdev;
-		priv = netdev_priv(netdev);
-		if (priv->link_state != cfg.link_state) {
-			if (cfg.link_state == LINK_STATE_DOWN) {
-				netdev_info(netdev, "Link DOWN\n");
-				priv->link_state = 0;
-				if (netif_running(netdev)) {
-					netif_carrier_off(netdev);
-					netif_stop_queue(netdev);
-				}
-			} else {
-				netdev_info(netdev, "Link UP\n");
-				priv->link_state = 1;
-				if (netif_running(netdev)) {
-					netif_carrier_on(netdev);
-					netif_start_queue(netdev);
-				}
-			}
-		}
+		otx2_cpri_set_link_state(netdev, cfg.link_state);
 		ret = 0;
 		goto out;
 	}
diff --git a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_cpri.c b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_cpri.c
index 0e575034b25b..a9b819bac99c 100644
--- a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_cpri.c
+++ b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_cpri.c
@@ -444,11 +444,13 @@ static int otx2_cpri_eth_open(struct net_device *netdev)
 
 	napi_enable(&priv->napi);
 
-	netif_carrier_on(netdev);
-	netif_start_queue(netdev);
-
+	spin_lock(&priv->lock);
 	clear_bit(CPRI_INTF_DOWN, &priv->state);
-	priv->link_state = 1;
+	if (priv->link_state == LINK_STATE_UP) {
+		netif_carrier_on(netdev);
+		netif_start_queue(netdev);
+	}
+	spin_unlock(&priv->lock);
 
 	return 0;
 }
@@ -458,11 +460,12 @@ static int otx2_cpri_eth_stop(struct net_device *netdev)
 {
 	struct otx2_cpri_ndev_priv *priv = netdev_priv(netdev);
 
+	spin_lock(&priv->lock);
 	set_bit(CPRI_INTF_DOWN, &priv->state);
 
 	netif_stop_queue(netdev);
 	netif_carrier_off(netdev);
-	priv->link_state = 0;
+	spin_unlock(&priv->lock);
 
 	napi_disable(&priv->napi);
 
@@ -619,7 +622,7 @@ int otx2_cpri_parse_and_init_intf(struct otx2_bphy_cdev_priv *cdev,
 			netif_carrier_off(netdev);
 			netif_stop_queue(netdev);
 			set_bit(CPRI_INTF_DOWN, &priv->state);
-			priv->link_state = 0;
+			priv->link_state = LINK_STATE_UP;
 
 			/* initialize global ctx */
 			drv_ctx = &cpri_drv_ctx[intf_idx];
@@ -727,3 +730,29 @@ static void otx2_cpri_debugfs_remove(struct otx2_cpri_drv_ctx *ctx)
 	if (ctx->debugfs)
 		otx2_bphy_debugfs_remove_file(ctx->debugfs);
 }
+
+void otx2_cpri_set_link_state(struct net_device *netdev, u8 state)
+{
+	struct otx2_cpri_ndev_priv *priv;
+
+	priv = netdev_priv(netdev);
+
+	spin_lock(&priv->lock);
+	if (priv->link_state != state) {
+		priv->link_state = state;
+		if (state == LINK_STATE_DOWN) {
+			netdev_info(netdev, "Link DOWN\n");
+			if (netif_running(netdev)) {
+				netif_carrier_off(netdev);
+				netif_stop_queue(netdev);
+			}
+		} else {
+			netdev_info(netdev, "Link UP\n");
+			if (netif_running(netdev)) {
+				netif_carrier_on(netdev);
+				netif_start_queue(netdev);
+			}
+		}
+	}
+	spin_unlock(&priv->lock);
+}
diff --git a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_cpri.h b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_cpri.h
index 5a011f7bc9ee..e8b88384cd3d 100644
--- a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_cpri.h
+++ b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_cpri.h
@@ -144,4 +144,7 @@ void otx2_cpri_enable_intf(int cpri_num);
 /* ethtool */
 void otx2_cpri_set_ethtool_ops(struct net_device *netdev);
 
+/* update carrier state */
+void otx2_cpri_set_link_state(struct net_device *netdev, u8 state);
+
 #endif
diff --git a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
index 86405a278eae..8a021d302108 100644
--- a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
+++ b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
@@ -1093,11 +1093,14 @@ static int otx2_rfoe_eth_open(struct net_device *netdev)
 
 	priv->ptp_tx_skb = NULL;
 
-	netif_carrier_on(netdev);
-	netif_start_queue(netdev);
-
+	spin_lock(&priv->lock);
 	clear_bit(RFOE_INTF_DOWN, &priv->state);
-	priv->link_state = 1;
+
+	if (priv->link_state == LINK_STATE_UP) {
+		netif_carrier_on(netdev);
+		netif_start_queue(netdev);
+	}
+	spin_unlock(&priv->lock);
 
 	return 0;
 }
@@ -1109,11 +1112,13 @@ static int otx2_rfoe_eth_stop(struct net_device *netdev)
 	struct ptp_tstamp_skb *ts_skb, *ts_skb2;
 	int idx;
 
+	spin_lock(&priv->lock);
 	set_bit(RFOE_INTF_DOWN, &priv->state);
 
 	netif_stop_queue(netdev);
 	netif_carrier_off(netdev);
-	priv->link_state = 0;
+
+	spin_unlock(&priv->lock);
 
 	for (idx = 0; idx < PACKET_TYPE_MAX; idx++) {
 		if (!(priv->pkt_type_mask & (1U << idx)))
@@ -1486,7 +1491,7 @@ int otx2_rfoe_parse_and_init_intf(struct otx2_bphy_cdev_priv *cdev,
 			netif_carrier_off(netdev);
 			netif_stop_queue(netdev);
 			set_bit(RFOE_INTF_DOWN, &priv->state);
-			priv->link_state = 0;
+			priv->link_state = LINK_STATE_UP;
 
 			/* initialize global ctx */
 			drv_ctx = &rfoe_drv_ctx[intf_idx];
@@ -1646,3 +1651,29 @@ static void otx2_rfoe_debugfs_remove(struct otx2_rfoe_drv_ctx *ctx)
 	if (ctx->debugfs)
 		otx2_bphy_debugfs_remove_file(ctx->debugfs);
 }
+
+void otx2_rfoe_set_link_state(struct net_device *netdev, u8 state)
+{
+	struct otx2_rfoe_ndev_priv *priv;
+
+	priv = netdev_priv(netdev);
+
+	spin_lock(&priv->lock);
+	if (priv->link_state != state) {
+		priv->link_state = state;
+		if (state == LINK_STATE_DOWN) {
+			netdev_info(netdev, "Link DOWN\n");
+			if (netif_running(netdev)) {
+				netif_carrier_off(netdev);
+				netif_stop_queue(netdev);
+			}
+		} else {
+			netdev_info(netdev, "Link UP\n");
+			if (netif_running(netdev)) {
+				netif_carrier_on(netdev);
+				netif_start_queue(netdev);
+			}
+		}
+	}
+	spin_unlock(&priv->lock);
+}
diff --git a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.h b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.h
index f321b25ecfdb..4e5df6584cfd 100644
--- a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.h
+++ b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.h
@@ -325,4 +325,7 @@ void otx2_rfoe_calc_ptp_ts(struct otx2_rfoe_ndev_priv *priv, u64 *ts);
 int otx2_rfoe_ptp_init(struct otx2_rfoe_ndev_priv *priv);
 void otx2_rfoe_ptp_destroy(struct otx2_rfoe_ndev_priv *priv);
 
+/* update carrier state */
+void otx2_rfoe_set_link_state(struct net_device *netdev, u8 state);
+
 #endif
-- 
2.31.1

