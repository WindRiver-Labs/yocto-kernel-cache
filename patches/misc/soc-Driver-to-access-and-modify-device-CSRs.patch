From c1ea034e7af3605810512ab99af0b940333e8daa Mon Sep 17 00:00:00 2001
From: Rakesh Babu <rsaladi2@marvell.com>
Date: Mon, 1 Mar 2021 12:51:47 +0530
Subject: [PATCH 01/13] soc: Driver to access and modify device CSRs.

commit f62d36e0dc6337e9bd378ba31e2f31f28cc27d5d from
git@git.assembla.com:cavium/WindRiver.linux.git

A character driver which implements read and write ioctls so
that a user space utitlity can either read from or write a new
value to OcteonTx2 or OcteonTx3 HW device config registers.

Change-Id: Ie59e855e4ae473a69f893fcfeef975da4becefdd
Signed-off-by: Rakesh Babu <rsaladi2@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/47364
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/soc/marvell/Kconfig                   |   6 +
 drivers/soc/marvell/Makefile                  |   1 +
 drivers/soc/marvell/csr-access/Makefile       |   9 +
 .../soc/marvell/csr-access/hw_csr_access.c    | 184 ++++++++++++++++++
 4 files changed, 200 insertions(+)
 create mode 100644 drivers/soc/marvell/csr-access/Makefile
 create mode 100644 drivers/soc/marvell/csr-access/hw_csr_access.c

diff --git a/drivers/soc/marvell/Kconfig b/drivers/soc/marvell/Kconfig
index 44fb6278355a..96d11b778738 100644
--- a/drivers/soc/marvell/Kconfig
+++ b/drivers/soc/marvell/Kconfig
@@ -136,4 +136,10 @@ config OCTEONTX_SERDES
 	  Provides debugfs commands which allows to collect serdes information,
 	  capture eye or use PRBS.
 
+config HW_CSR_ACCESS
+       tristate "Access HW Device Config Space Registers"
+        default m
+	help
+	  provides an interface which enables user space utility to read from or to write
+	  to HW Device Config Space Registers.
 endmenu
diff --git a/drivers/soc/marvell/Makefile b/drivers/soc/marvell/Makefile
index f951e003b28b..cabc7ff8cd8c 100644
--- a/drivers/soc/marvell/Makefile
+++ b/drivers/soc/marvell/Makefile
@@ -2,5 +2,6 @@
 obj-y		+= octeontx2-rm/
 obj-y		+= octeontx2-dpi/
 obj-$(CONFIG_OCTEONTX_SERDES) += octeontx2-serdes/
+obj-y 		+= csr-access/
 obj-$(CONFIG_MDIO_DEBUGFS) += mdio_debugfs.o
 obj-y		+= octeontx2-ghes/
diff --git a/drivers/soc/marvell/csr-access/Makefile b/drivers/soc/marvell/csr-access/Makefile
new file mode 100644
index 000000000000..adb108f96f8c
--- /dev/null
+++ b/drivers/soc/marvell/csr-access/Makefile
@@ -0,0 +1,9 @@
+# SPDX-License-Identifier: GPL-2.0
+#
+## Makefile for Hardware device CSR Access driver
+#
+
+ccflags-y += -I$(src)
+obj-$(CONFIG_HW_CSR_ACCESS) := csr_access.o
+
+csr_access-y := hw_csr_access.o
diff --git a/drivers/soc/marvell/csr-access/hw_csr_access.c b/drivers/soc/marvell/csr-access/hw_csr_access.c
new file mode 100644
index 000000000000..a24a2361a114
--- /dev/null
+++ b/drivers/soc/marvell/csr-access/hw_csr_access.c
@@ -0,0 +1,184 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Hardware device CSR Access driver
+ * Copyright (C) 2021 Marvell International Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/* This driver supports Read/Write of only OcteonTx2/OcteonTx3 HW device
+ * config registers. Read/Write of System Registers are not supported.
+ */
+
+#include <linux/device.h>
+#include <linux/fs.h>
+#include <linux/io.h>
+#include <linux/module.h>
+#include <linux/uaccess.h>
+
+#define DEVICE_NAME			"csr_access"
+#define CLASS_NAME			"csr_access_class"
+/* Smallest start physical address of all HW devices */
+#define REG_PHYS_BASEADDR		0x802000000000
+/* Last physical address - First phsycial address + 1 will be the
+ * length of IO remapped block
+ * 0x87E0E24FFFFF - 0x802000000000 + 1 = 0x7C0E2500000
+ * Last phsyical address is the highest end physical address of all HW devices.
+ * First physical address is the smallest start physical address of all HW
+ * devices.
+ */
+#define REG_SPACE_MAPSIZE		0x7C0E2500000
+#define CSR_READ_IOCTL			0
+#define CSR_WRITE_IOCTL			1
+
+struct hw_reg_cfg {
+	u64	regaddr; /* Register physical address within a hw device */
+	u64	regval; /* Register value to be read or to write */
+};
+
+static struct class *hw_reg_class;
+static int majorNumber;
+
+static int csr_access_open(struct inode *inode, struct file *filp)
+{
+	void __iomem *reg_base = NULL;
+	int err;
+
+	reg_base = ioremap(REG_PHYS_BASEADDR, REG_SPACE_MAPSIZE);
+	if (!reg_base) {
+		pr_err("Unable to map Physical Base Address\n");
+		err = -ENOMEM;
+		return err;
+	}
+
+	filp->private_data = reg_base;
+
+	return 0;
+}
+
+static long csr_access_ioctl(struct file *filp, unsigned int cmd,
+			   unsigned long arg)
+{
+	void __iomem *regbase = filp->private_data;
+	struct hw_reg_cfg reg_cfg;
+	u64 regoff;
+
+	switch (cmd) {
+	case CSR_READ_IOCTL:
+		if (copy_from_user(&reg_cfg, (void __user *)arg,
+				   sizeof(struct hw_reg_cfg))) {
+			pr_err("Read Fault copy from user\n");
+
+			return -EFAULT;
+		}
+
+		if (reg_cfg.regaddr < REG_PHYS_BASEADDR ||
+		    reg_cfg.regaddr >= REG_PHYS_BASEADDR + REG_SPACE_MAPSIZE) {
+			pr_err("Address [0x%llx] out of range "
+			       "[0x%lx - 0x%lx]\n", reg_cfg.regaddr,
+			       REG_PHYS_BASEADDR,
+			       REG_PHYS_BASEADDR + REG_SPACE_MAPSIZE);
+
+			return -EFAULT;
+		}
+
+		/* Only 64 bit reads/writes are allowed */
+		reg_cfg.regaddr &= ~0x07ULL;
+		regoff = reg_cfg.regaddr - REG_PHYS_BASEADDR;
+		reg_cfg.regval = readq(regbase + regoff);
+
+		if (copy_to_user((void __user *)(unsigned long)arg,
+				 &reg_cfg,
+				 sizeof(struct hw_reg_cfg))) {
+			pr_err("Fault in copy to user\n");
+
+			return -EFAULT;
+		}
+
+		return 0;
+	case CSR_WRITE_IOCTL:
+		if (copy_from_user(&reg_cfg, (void __user *)arg,
+				   sizeof(struct hw_reg_cfg))) {
+			pr_err("Write Fault in copy from user\n");
+
+			return -EFAULT;
+		}
+
+		if (reg_cfg.regaddr < REG_PHYS_BASEADDR ||
+		    reg_cfg.regaddr >= REG_PHYS_BASEADDR + REG_SPACE_MAPSIZE) {
+			pr_err("Address [0x%llx] out of range "
+			       "[0x%lx - 0x%lx]\n", reg_cfg.regaddr,
+			       REG_PHYS_BASEADDR,
+			       REG_PHYS_BASEADDR + REG_SPACE_MAPSIZE);
+
+			return -EFAULT;
+		}
+
+		/* Only 64 bit reads/writes are allowed */
+		reg_cfg.regaddr &= ~0x07ULL;
+		regoff = reg_cfg.regaddr - REG_PHYS_BASEADDR;
+		writeq(reg_cfg.regval, regbase + regoff);
+
+		return 0;
+	default:
+		pr_info("Invalid IOCTL: %d\n", cmd);
+
+		return -EINVAL;
+	}
+}
+
+static int csr_access_release(struct inode *inode, struct file *filp)
+{
+	iounmap(filp->private_data);
+	filp->private_data = NULL;
+
+	return 0;
+}
+
+static const struct file_operations mmap_fops = {
+	.open = csr_access_open,
+	.unlocked_ioctl = csr_access_ioctl,
+	.release = csr_access_release,
+};
+
+static int __init csr_access_module_init(void)
+{
+	static struct device *hw_reg_device;
+
+	majorNumber = register_chrdev(0, DEVICE_NAME, &mmap_fops);
+	if (majorNumber < 0) {
+		pr_err("failed to register a major number for %s\n",
+		       DEVICE_NAME);
+		return majorNumber;
+	}
+
+	hw_reg_class = class_create(THIS_MODULE, CLASS_NAME);
+	if (IS_ERR(hw_reg_class)) {
+		unregister_chrdev(majorNumber, DEVICE_NAME);
+		return PTR_ERR(hw_reg_class);
+	}
+
+	hw_reg_device = device_create(hw_reg_class, NULL,
+				      MKDEV(majorNumber, 0), NULL,
+				      DEVICE_NAME);
+	if (IS_ERR(hw_reg_device)) {
+		class_destroy(hw_reg_class);
+		unregister_chrdev(majorNumber, DEVICE_NAME);
+		return PTR_ERR(hw_reg_device);
+	}
+
+	return 0;
+}
+
+static void __exit csr_access_module_exit(void)
+{
+	device_destroy(hw_reg_class, MKDEV(majorNumber, 0));
+	class_destroy(hw_reg_class);
+	unregister_chrdev(majorNumber, DEVICE_NAME);
+}
+
+module_init(csr_access_module_init);
+module_exit(csr_access_module_exit);
+MODULE_AUTHOR("Marvell International Ltd.");
+MODULE_LICENSE("GPL v2");
-- 
2.17.0

