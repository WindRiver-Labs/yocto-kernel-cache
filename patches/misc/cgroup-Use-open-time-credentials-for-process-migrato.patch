From c07673a04307f9b2fac67edba62ab4a2d5dceca9 Mon Sep 17 00:00:00 2001
From: Tejun Heo <tj@kernel.org>
Date: Thu, 14 Apr 2022 12:24:19 +0300
Subject: [PATCH] cgroup: Use open-time credentials for process migraton perm
 checks
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

commit 1756d7994ad85c2479af6ae5a9750b92324685af upstream.

cgroup process migration permission checks are performed at write time as
whether a given operation is allowed or not is dependent on the content of
the write - the PID. This currently uses current's credentials which is a
potential security weakness as it may allow scenarios where a less
privileged process tricks a more privileged one into writing into a fd that
it created.

This patch makes both cgroup2 and cgroup1 process migration interfaces to
use the credentials saved at the time of open (file->f_cred) instead of
current's.

Reported-by: "Eric W. Biederman" <ebiederm@xmission.com>
Suggested-by: Linus Torvalds <torvalds@linuxfoundation.org>
Fixes: 187fe84067bd ("cgroup: require write perm on common ancestor when moving processes on the default hierarchy")
Reviewed-by: Michal Koutn√Ω <mkoutny@suse.com>
Signed-off-by: Tejun Heo <tj@kernel.org>
[OP: backport to v4.14: apply original __cgroup_procs_write() changes to
cgroup_threads_write() and cgroup_procs_write()]
Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
[OP: - backport of a70bcf9ed08f from 4.14.y branch of linux-stable
     - tweak patch to apply to 4.12: add override_creds()/revert_creds() pair
       only in __cgroup_procs_write(), apply "cred = of->file->f_cred" change in
       cgroup_procs_write_permission()(multiple refactoring commits are
       missing in 4.12)]
Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
---
 kernel/cgroup/cgroup.c | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/kernel/cgroup/cgroup.c b/kernel/cgroup/cgroup.c
index 8270964bce7a..430847f20631 100644
--- a/kernel/cgroup/cgroup.c
+++ b/kernel/cgroup/cgroup.c
@@ -2388,7 +2388,7 @@ static int cgroup_procs_write_permission(struct task_struct *task,
 			iput(inode);
 		}
 	} else {
-		const struct cred *cred = current_cred();
+		const struct cred *cred = of->file->f_cred;
 		const struct cred *tcred = get_task_cred(task);
 
 		/*
@@ -2416,6 +2416,7 @@ ssize_t __cgroup_procs_write(struct kernfs_open_file *of, char *buf,
 	struct task_struct *tsk;
 	struct cgroup_subsys *ss;
 	struct cgroup *cgrp;
+	const struct cred *saved_cred;
 	pid_t pid;
 	int ssid, ret;
 
@@ -2455,7 +2456,9 @@ ssize_t __cgroup_procs_write(struct kernfs_open_file *of, char *buf,
 	get_task_struct(tsk);
 	rcu_read_unlock();
 
+	saved_cred = override_creds(of->file->f_cred);
 	ret = cgroup_procs_write_permission(tsk, cgrp, of);
+	revert_creds(saved_cred);
 	if (!ret)
 		ret = cgroup_attach_task(cgrp, tsk, threadgroup);
 
-- 
2.34.1

