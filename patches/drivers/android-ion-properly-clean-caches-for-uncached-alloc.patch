From 7c03b3db050a59f0aafe6339c191249dc339fd44 Mon Sep 17 00:00:00 2001
From: Nava kishore Manne <nava.manne@xilinx.com>
Date: Thu, 30 Jul 2020 07:00:37 +0530
Subject: [PATCH 1479/1852] android: ion: properly clean caches for uncached
 allocations

commit 917cce9fb1902726fdc0625e2baf8da33c4c659a from
https://github.com/Xilinx/linux-xlnx.git

The user allocates un-cached memory from ION, and then
subsequently writes to that buffer using The un-cached
mapping provided by ION. then the data written in the
un-cached buffer could be corrupted/not placed into the
actual memory if a dirty line is evicted from the cache.
This patch fixes this issue for the cma heap.

Signed-off-by: Nava kishore Manne <nava.manne@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/staging/android/ion/ion_cma_heap.c | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)

diff --git a/drivers/staging/android/ion/ion_cma_heap.c b/drivers/staging/android/ion/ion_cma_heap.c
index bf65e67ef9d8..fffb103d60c1 100644
--- a/drivers/staging/android/ion/ion_cma_heap.c
+++ b/drivers/staging/android/ion/ion_cma_heap.c
@@ -6,6 +6,7 @@
  * Author: <benjamin.gaignard@linaro.org> for ST-Ericsson.
  */
 
+#include <linux/dma-mapping.h>
 #include <linux/device.h>
 #include <linux/slab.h>
 #include <linux/errno.h>
@@ -23,6 +24,22 @@ struct ion_cma_heap {
 
 #define to_cma_heap(x) container_of(x, struct ion_cma_heap, heap)
 
+static void ion_pages_sync_for_device(struct page *page, size_t size,
+				      enum dma_data_direction dir)
+{
+	struct scatterlist sg;
+	struct device dev = {0};
+
+	/* Use dummy device */
+	arch_setup_dma_ops(&dev, 0, 0, NULL, false);
+
+	sg_init_table(&sg, 1);
+	sg_set_page(&sg, page, size, 0);
+	/* Use phys address for dma address */
+	sg_dma_address(&sg) = page_to_phys(page);
+	dma_sync_sg_for_device(&dev, &sg, 1, dir);
+}
+
 /* ION CMA heap operations functions */
 static int ion_cma_allocate(struct ion_heap *heap, struct ion_buffer *buffer,
 			    unsigned long len,
@@ -59,6 +76,9 @@ static int ion_cma_allocate(struct ion_heap *heap, struct ion_buffer *buffer,
 		memset(page_address(pages), 0, size);
 	}
 
+	if (!(buffer->flags & ION_FLAG_CACHED))
+		ion_pages_sync_for_device(pages, size, DMA_BIDIRECTIONAL);
+
 	table = kmalloc(sizeof(*table), GFP_KERNEL);
 	if (!table)
 		goto err;
-- 
2.31.1

