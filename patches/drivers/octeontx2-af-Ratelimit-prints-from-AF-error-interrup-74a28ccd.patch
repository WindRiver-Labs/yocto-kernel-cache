From 3a2baa40d8f50125a922e94359d90085b818209d Mon Sep 17 00:00:00 2001
From: Naveen Mamindlapalli <naveenm@marvell.com>
Date: Mon, 17 Aug 2020 17:44:06 +0530
Subject: [PATCH 0692/1921] octeontx2-af: Ratelimit prints from AF error
 interrupt handlers

Ratelimit prints from AF error interrupt handlers such as NIX AF
error interrupt, NIX AF RVU error interrupt and NPA AF RVU error
interrupt handler. This prevents unnecessary flooding of error
messages on the console when any AF error interrupt condition
triggers continuously.

Change-Id: I216ef5c95ba7f320f9e7ed0800adc78044551a8e
Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/34165
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../ethernet/marvell/octeontx2/af/rvu_nix.c   | 30 ++++++++++++-------
 .../ethernet/marvell/octeontx2/af/rvu_npa.c   |  2 +-
 2 files changed, 20 insertions(+), 12 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
index aef8acbceaed..cc0a2b19f898 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
@@ -4172,7 +4172,7 @@ static irqreturn_t rvu_nix_af_rvu_intr_handler(int irq, void *rvu_irq)
 	intr = rvu_read64(rvu, blkaddr, NIX_AF_RVU_INT);
 
 	if (intr & BIT_ULL(0))
-		dev_err(rvu->dev, "NIX: Unmapped slot error\n");
+		dev_err_ratelimited(rvu->dev, "NIX: Unmapped slot error\n");
 
 	/* Clear interrupts */
 	rvu_write64(rvu, blkaddr, NIX_AF_RVU_INT, intr);
@@ -4189,34 +4189,42 @@ static irqreturn_t rvu_nix_af_err_intr_handler(int irq, void *rvu_irq)
 	intr = rvu_read64(rvu, blkaddr, NIX_AF_ERR_INT);
 
 	if (intr & BIT_ULL(14))
-		dev_err(rvu->dev, "NIX: Memory fault on NIX_AQ_INST_S read\n");
+		dev_err_ratelimited(rvu->dev,
+				    "NIX: Memory fault on NIX_AQ_INST_S read\n");
 
 	if (intr & BIT_ULL(13))
-		dev_err(rvu->dev, "NIX: Memory fault on NIX_AQ_RES_S write\n");
+		dev_err_ratelimited(rvu->dev,
+				    "NIX: Memory fault on NIX_AQ_RES_S write\n");
 
 	if (intr & BIT_ULL(12))
-		dev_err(rvu->dev, "NIX: AQ doorbell error\n");
+		dev_err_ratelimited(rvu->dev, "NIX: AQ doorbell error\n");
 
 	if (intr & BIT_ULL(6))
-		dev_err(rvu->dev, "NIX: Rx on unmapped PF_FUNC\n");
+		dev_err_ratelimited(rvu->dev, "NIX: Rx on unmapped PF_FUNC\n");
 
 	if (intr & BIT_ULL(5))
-		dev_err(rvu->dev, "NIX: Rx multicast replication error\n");
+		dev_err_ratelimited(rvu->dev,
+				    "NIX: Rx multicast replication error\n");
 
 	if (intr & BIT_ULL(4))
-		dev_err(rvu->dev, "NIX: Memory fault on NIX_RX_MCE_S read\n");
+		dev_err_ratelimited(rvu->dev,
+				    "NIX: Memory fault on NIX_RX_MCE_S read\n");
 
 	if (intr & BIT_ULL(3))
-		dev_err(rvu->dev, "NIX: Memory fault on multicast WQE read\n");
+		dev_err_ratelimited(rvu->dev,
+				    "NIX: Memory fault on multicast WQE read\n");
 
 	if (intr & BIT_ULL(2))
-		dev_err(rvu->dev, "NIX: Memory fault on mirror WQE read\n");
+		dev_err_ratelimited(rvu->dev,
+				    "NIX: Memory fault on mirror WQE read\n");
 
 	if (intr & BIT_ULL(1))
-		dev_err(rvu->dev, "NIX: Memory fault on mirror pkt write\n");
+		dev_err_ratelimited(rvu->dev,
+				    "NIX: Memory fault on mirror pkt write\n");
 
 	if (intr & BIT_ULL(0))
-		dev_err(rvu->dev, "NIX: Memory fault on multicast pkt write\n");
+		dev_err_ratelimited(rvu->dev,
+				    "NIX: Memory fault on multicast pkt write\n");
 
 	/* Clear interrupts */
 	rvu_write64(rvu, blkaddr, NIX_AF_ERR_INT, intr);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c
index 2476d20280cb..0080ad0504b1 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c
@@ -557,7 +557,7 @@ static irqreturn_t rvu_npa_af_rvu_intr_handler(int irq, void *rvu_irq)
 	intr = rvu_read64(rvu, blkaddr, NPA_AF_RVU_INT);
 
 	if (intr & BIT_ULL(0))
-		dev_err(rvu->dev, "NPA: Unmapped slot error\n");
+		dev_err_ratelimited(rvu->dev, "NPA: Unmapped slot error\n");
 
 	/* Clear interrupts */
 	rvu_write64(rvu, blkaddr, NPA_AF_RVU_INT, intr);
-- 
2.31.1

