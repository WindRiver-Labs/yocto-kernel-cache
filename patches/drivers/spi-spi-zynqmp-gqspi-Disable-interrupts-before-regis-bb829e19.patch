From d7a134b8bb1085246ab7ce3cd2cc975a22ed5a8b Mon Sep 17 00:00:00 2001
From: Amit Kumar Mahapatra <amit.kumar-mahapatra@xilinx.com>
Date: Thu, 16 Jul 2020 02:31:26 +0530
Subject: [PATCH 1439/1851] spi: spi-zynqmp-gqspi: Disable interrupts before
 registering interrupt handler

commit ea2f20ce896e869c851fbb56247b521afeae6a8b from
https://github.com/Xilinx/linux-xlnx.git

Prior to registering the interrupt handler neither the interrupts are
disabled nor the hardware is initialized. So as soon as the handler is
registered, due to a pending request, the isr gets triggered. This
results in kernel crash in the qspi boot mode.

This bug was introduced in
'commit 449b21e084ef ("spi: spi-zynqmp-gqspi: Do hardware initialization
later in probe")'

Fixed by disabling the interrupts and initializing the hardware before
registering interrupt handler.

The hardware initialization API requires prior knowledge of the operating
frequency for setting the appropriate tap delay. Updated the code to get
the operating frequency before calling hardware initialization API.

Signed-off-by: Amit Kumar Mahapatra <amit.kumar-mahapatra@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/spi/spi-zynqmp-gqspi.c | 11 ++++++-----
 1 file changed, 6 insertions(+), 5 deletions(-)

diff --git a/drivers/spi/spi-zynqmp-gqspi.c b/drivers/spi/spi-zynqmp-gqspi.c
index 77dfa5f43611..5eec2abd70d9 100644
--- a/drivers/spi/spi-zynqmp-gqspi.c
+++ b/drivers/spi/spi-zynqmp-gqspi.c
@@ -1295,6 +1295,12 @@ static int zynqmp_qspi_probe(struct platform_device *pdev)
 		goto clk_dis_pclk;
 	}
 
+	master->max_speed_hz = clk_get_rate(xqspi->refclk) / 2;
+	xqspi->speed_hz = master->max_speed_hz;
+
+	/* QSPI controller initializations */
+	zynqmp_qspi_init_hw(xqspi);
+
 	pm_runtime_use_autosuspend(&pdev->dev);
 	pm_runtime_set_autosuspend_delay(&pdev->dev, SPI_AUTOSUSPEND_TIMEOUT);
 	pm_runtime_set_active(&pdev->dev);
@@ -1356,19 +1362,14 @@ static int zynqmp_qspi_probe(struct platform_device *pdev)
 	master->prepare_transfer_hardware = zynqmp_prepare_transfer_hardware;
 	master->unprepare_transfer_hardware =
 					zynqmp_unprepare_transfer_hardware;
-	master->max_speed_hz = clk_get_rate(xqspi->refclk) / 2;
 	master->bits_per_word_mask = SPI_BPW_MASK(8);
 	master->mode_bits = SPI_CPOL | SPI_CPHA | SPI_RX_DUAL | SPI_RX_QUAD |
 			    SPI_TX_DUAL | SPI_TX_QUAD;
-	xqspi->speed_hz = master->max_speed_hz;
 	master->auto_runtime_pm = true;
 
 	if (master->dev.parent == NULL)
 		master->dev.parent = &master->dev;
 
-	/* QSPI controller initializations */
-	zynqmp_qspi_init_hw(xqspi);
-
 	ret = spi_register_master(master);
 	if (ret)
 		goto clk_dis_all;
-- 
2.31.1

