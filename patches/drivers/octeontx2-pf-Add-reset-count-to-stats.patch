From 94b43df0b424e541dcb5bbdc51a9c265b5e5d1e6 Mon Sep 17 00:00:00 2001
From: Aleksey Makarov <amakarov@marvell.com>
Date: Fri, 12 Oct 2018 08:00:59 +0300
Subject: [PATCH 117/767] octeontx2-pf: Add reset count to stats

commit 00d355be1d10d8f83b29e5ca7380f6bdc319222f from
git@git.assembla.com:cavium/WindRiver.linux.git

Add a new stat "reset_count" which is incremented each time
the device was reset, for example from watchdog or
from QINT handler.

Change-Id: I7a605bc31781643b25c35549046029ff7bb8a319
Signed-off-by: Aleksey Makarov <amakarov@marvell.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h  | 1 +
 drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c | 5 ++++-
 drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c      | 1 +
 3 files changed, 6 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index b7836697f308..abb84ff034d2 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -157,6 +157,7 @@ struct otx2_nic {
 	u8			cq_time_wait;
 	u32			cq_ecount_wait;
 	struct work_struct	reset_task;
+	u64			reset_count;
 	u16			rxvlan_entry;
 	bool			rxvlan_alloc;
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
index 44759e15b1a6..11ed45187ffa 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
@@ -110,6 +110,8 @@ static void otx2_get_strings(struct net_device *netdev, u32 sset, u8 *data)
 		sprintf(data, "cgx_txstat%d: ", stats);
 		data += ETH_GSTRING_LEN;
 	}
+
+	strcpy(data, "reset_count");
 }
 
 static void otx2_get_qset_stats(struct otx2_nic *pfvf,
@@ -159,6 +161,7 @@ static void otx2_get_ethtool_stats(struct net_device *netdev,
 		*(data++) = pfvf->hw.cgx_rx_stats[stat];
 	for (stat = 0; stat < CGX_TX_STATS_COUNT; stat++)
 		*(data++) = pfvf->hw.cgx_tx_stats[stat];
+	*(data++) = pfvf->reset_count;
 }
 
 static int otx2_get_sset_count(struct net_device *netdev, int sset)
@@ -172,7 +175,7 @@ static int otx2_get_sset_count(struct net_device *netdev, int sset)
 	qstats_count = otx2_n_queue_stats *
 		       (pfvf->hw.rx_queues + pfvf->hw.tx_queues);
 	return otx2_n_dev_stats + qstats_count +
-		CGX_RX_STATS_COUNT + CGX_TX_STATS_COUNT;
+		CGX_RX_STATS_COUNT + CGX_TX_STATS_COUNT + 1;
 }
 
 /* Get no of queues device supports and current queue count */
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index 0315e9bd944c..a80cfb92dd32 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -1054,6 +1054,7 @@ static void otx2_reset_task(struct work_struct *work)
 		return;
 
 	otx2_stop(pf->netdev);
+	pf->reset_count++;
 	otx2_open(pf->netdev);
 	netif_trans_update(pf->netdev);
 }
-- 
2.31.1

