From 4114b2a2713e5aeabafaebfc1a88b0009e029df3 Mon Sep 17 00:00:00 2001
From: Tomasz Duszynski <tduszynski@marvell.com>
Date: Tue, 9 Apr 2019 10:41:46 +0200
Subject: [PATCH 0145/1921] octeontx2-pf: Add basic SR-IOV support

Add basic SR-IOV support prior to adding VF driver itself.

Change-Id: I940bafce8da531ef307d6329c0210d58167e8c44
Signed-off-by: Tomasz Duszynski <tduszynski@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.h       |  1 +
 .../ethernet/marvell/octeontx2/nic/otx2_pf.c  | 37 +++++++++++++++++++
 2 files changed, 38 insertions(+)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index 63547b96cdae..7d25f9b4d2d0 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -162,6 +162,7 @@ struct otx2_nic {
 	u32			cq_ecount_wait;
 	struct work_struct	reset_task;
 	u64			reset_count;
+	u8			total_vfs;
 	struct cgx_link_user_info linfo;
 	u16			rxvlan_entry;
 	bool			rxvlan_alloc;
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index b06a34358e94..428e50f0f827 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -1349,6 +1349,7 @@ static int otx2_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	pf->netdev = netdev;
 	pf->pdev = pdev;
 	pf->dev = dev;
+	pf->total_vfs = pci_sriov_get_totalvfs(pdev);
 	hw = &pf->hw;
 	hw->pdev = pdev;
 	hw->rx_queues = qcount;
@@ -1476,6 +1477,40 @@ static int otx2_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	return err;
 }
 
+static int otx2_sriov_enable(struct pci_dev *pdev, int numvfs)
+{
+	struct net_device *netdev = pci_get_drvdata(pdev);
+	struct otx2_nic *pf = netdev_priv(netdev);
+	int ret;
+
+	if (numvfs > pf->total_vfs)
+		numvfs = pf->total_vfs;
+
+	ret = pci_enable_sriov(pdev, numvfs);
+	if (ret)
+		return ret;
+
+	return numvfs;
+}
+
+static int otx2_sriov_disable(struct pci_dev *pdev)
+{
+	if (!pci_num_vf(pdev))
+		return 0;
+
+	pci_disable_sriov(pdev);
+
+	return 0;
+}
+
+static int otx2_sriov_configure(struct pci_dev *pdev, int numvfs)
+{
+	if (numvfs == 0)
+		return otx2_sriov_disable(pdev);
+	else
+		return otx2_sriov_enable(pdev, numvfs);
+}
+
 static void otx2_remove(struct pci_dev *pdev)
 {
 	struct net_device *netdev = pci_get_drvdata(pdev);
@@ -1502,6 +1537,7 @@ static void otx2_remove(struct pci_dev *pdev)
 
 	otx2_detach_resources(&pf->mbox);
 	otx2_pfaf_mbox_destroy(pf);
+	otx2_sriov_disable(pf->pdev);
 
 	pci_free_irq_vectors(pf->pdev);
 	pci_set_drvdata(pdev, NULL);
@@ -1515,6 +1551,7 @@ static struct pci_driver otx2_pf_driver = {
 	.id_table = otx2_pf_id_table,
 	.probe = otx2_probe,
 	.remove = otx2_remove,
+	.sriov_configure = otx2_sriov_configure
 };
 
 static int __init otx2_rvupf_init_module(void)
-- 
2.31.1

