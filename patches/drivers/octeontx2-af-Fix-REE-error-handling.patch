From e1aa79fb46de8912430abe7f7be184ced49e3d65 Mon Sep 17 00:00:00 2001
From: Smadar Fuks <smadarf@marvell.com>
Date: Mon, 8 Jun 2020 15:54:10 -0400
Subject: [PATCH 574/767] octeontx2-af: Fix REE error handling

commit 5257c04b1ab44c21dc7027322aebfbda2aa6d742 from
git@git.assembla.com:cavium/WindRiver.linux.git

Fix few cases in which error indication was not propogated to the
calling function:
- ree_init didn't pass rvu_ree_init_block failure indication, which can
  be either memory allocation or polling for CSR init completion
- rvu_mbox_handler_ree_rule_db_prog didn't pass programming failure
- ree_rof_data_enq didn't pass failure to get AF AQ done indication

Change-Id: Iaa5c9ca99b89eaba6c0cf565eede937c9709af54
Signed-off-by: Smadar Fuks <smadarf@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/29725
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/af/rvu_ree.c   | 39 +++++++++----------
 1 file changed, 19 insertions(+), 20 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_ree.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_ree.c
index 4383c16b3b59..fd2e792bc88d 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_ree.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_ree.c
@@ -191,7 +191,8 @@ static int ree_reex_programming(struct rvu *rvu, struct rvu_block *block,
 	return 0;
 }
 
-int ree_aq_verify_type6_completion(struct rvu *rvu, struct rvu_block *block)
+static int ree_aq_verify_type6_completion(struct rvu *rvu,
+					  struct rvu_block *block)
 {
 	u64 val;
 	int err;
@@ -212,9 +213,9 @@ int ree_aq_verify_type6_completion(struct rvu *rvu, struct rvu_block *block)
 	return 0;
 }
 
-int ree_aq_inst_enq(struct rvu *rvu, struct rvu_block *block,
-		    struct ree_rsrc *ree, dma_addr_t head, u32 size,
-		    int doneint)
+static void ree_aq_inst_enq(struct rvu *rvu, struct rvu_block *block,
+			    struct ree_rsrc *ree, dma_addr_t head, u32 size,
+			    int doneint)
 {
 	struct admin_queue *aq = block->aq;
 	struct ree_af_aq_inst_s inst;
@@ -237,7 +238,6 @@ int ree_aq_inst_enq(struct rvu *rvu, struct rvu_block *block,
 	ree->aq_head++;
 	if (ree->aq_head >= aq->inst->qsize)
 		ree->aq_head = 0;
-	return 0;
 }
 
 static int ree_reex_memory_alloc(struct rvu *rvu, struct rvu_block *block,
@@ -519,7 +519,7 @@ int ree_rof_data_enq(struct rvu *rvu, struct rvu_block *block,
 		     int *rule_db_len, int *db_block)
 {
 	void *prefix_ptr = ree->prefix_ctx->base;
-	int err, size, num_of_entries = 0;
+	int size, num_of_entries = 0;
 	dma_addr_t head;
 
 	/* Parse ROF data */
@@ -568,22 +568,16 @@ int ree_rof_data_enq(struct rvu *rvu, struct rvu_block *block,
 	while (num_of_entries > 0) {
 		if (num_of_entries > REE_PREFIX_PTR_LEN) {
 			size = REE_PREFIX_PTR_LEN * sizeof(struct ree_rof_s);
-			err = ree_aq_inst_enq(rvu, block, ree, head, size,
-					      false);
+			ree_aq_inst_enq(rvu, block, ree, head, size, false);
 			head += REE_PREFIX_PTR_LEN * sizeof(struct ree_rof_s);
 		} else {
 			size = num_of_entries * sizeof(struct ree_rof_s);
-			err = ree_aq_inst_enq(rvu, block, ree, head, size,
-					      true);
+			ree_aq_inst_enq(rvu, block, ree, head, size, true);
 		}
-		if (err)
-			return err;
 		num_of_entries -= REE_PREFIX_PTR_LEN;
 	}
 	/* Verify completion of type 6 */
-	ree_aq_verify_type6_completion(rvu, block);
-
-	return 0;
+	return ree_aq_verify_type6_completion(rvu, block);
 }
 
 static
@@ -718,8 +712,11 @@ int rvu_mbox_handler_ree_rule_db_prog(struct rvu *rvu,
 	if (req->total_len != ree->ruledb_len)
 		return REE_AF_ERR_RULE_DB_PARTIAL;
 
-	if (!req->is_incremental || req->is_dbi)
-		ree_rule_db_prog(rvu, block, ree, req->is_incremental);
+	if (!req->is_incremental || req->is_dbi) {
+		err = ree_rule_db_prog(rvu, block, ree, req->is_incremental);
+		if (err)
+			return err;
+	}
 
 	if (req->is_dbi) {
 		memcpy(ree->ruledbi,
@@ -1166,15 +1163,17 @@ static int rvu_ree_init_block(struct rvu *rvu, int blkaddr)
 int rvu_ree_init(struct rvu *rvu)
 {
 	struct rvu_hwinfo *hw = rvu->hw;
+	int err;
 
 	hw->ree = devm_kcalloc(rvu->dev, MAX_REE_BLKS, sizeof(struct ree_rsrc),
 			       GFP_KERNEL);
 	if (!hw->ree)
 		return -ENOMEM;
 
-	rvu_ree_init_block(rvu, BLKADDR_REE0);
-	rvu_ree_init_block(rvu, BLKADDR_REE1);
-	return 0;
+	err = rvu_ree_init_block(rvu, BLKADDR_REE0);
+	if (err)
+		return err;
+	return rvu_ree_init_block(rvu, BLKADDR_REE1);
 }
 
 void rvu_ree_freemem_block(struct rvu *rvu, int blkaddr, int blkid)
-- 
2.31.1

