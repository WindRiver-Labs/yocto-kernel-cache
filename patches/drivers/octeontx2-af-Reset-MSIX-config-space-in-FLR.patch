From 32d5076eab423465ced5bda370327f083e5fbbfd Mon Sep 17 00:00:00 2001
From: Geetha sowjanya <gakula@marvell.com>
Date: Tue, 23 Feb 2021 16:03:39 +0530
Subject: [PATCH 04/17] octeontx2-af: Reset MSIX config space in FLR

commit 14366ff9312294487b17fcb2135b7289d3d22fa8 from
git@git.assembla.com:cavium/WindRiver.linux.git

Current FLR handler do not clear the MSIX space.
This patch clear the MSIX vectors as part of device FLR
and also re-enables VF mbox and ME interrupts as it gets
cleared as a part of (VF reset)HWVF_RST.

Change-Id: I547a20b4240f70ec2005a0f8d5ea46dc1b197e17
Signed-off-by: Geetha sowjanya <gakula@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/46517
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/af/rvu.c    | 26 ++++++++++++++++++++++
 .../net/ethernet/marvell/octeontx2/nic/otx2_pf.c   |  6 +++++
 2 files changed, 32 insertions(+)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
index 10e9ead..1a2a658 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
@@ -2580,6 +2580,26 @@ static void rvu_sso_pfvf_rst(struct rvu *rvu, u16 pcifunc)
 	}
 }
 
+/* Reset PF/VF MSIX config space */
+static void rvu_pfvf_msix_reset(struct rvu *rvu, u16 pcifunc)
+{
+	u64 reg, val;
+	int pfvf;
+
+	if (pcifunc & RVU_PFVF_FUNC_MASK) {
+		pfvf = rvu_get_hwvf(rvu, pcifunc);
+		reg = RVU_AF_HWVF_RST;
+		val = (pfvf & 0xFF) | BIT_ULL(12);
+	} else {
+		pfvf = rvu_get_pf(pcifunc);
+		reg = RVU_AF_PF_RST;
+		val = (pfvf & 0x1F) | BIT_ULL(12);
+	}
+
+	rvu_write64(rvu, BLKADDR_RVUM, reg, val);
+	rvu_poll_reg(rvu, BLKADDR_RVUM, reg, BIT_ULL(12), true);
+}
+
 static void __rvu_flr_handler(struct rvu *rvu, u16 pcifunc)
 {
 	mutex_lock(&rvu->flr_lock);
@@ -2600,6 +2620,7 @@ static void __rvu_flr_handler(struct rvu *rvu, u16 pcifunc)
 	rvu_blklf_teardown(rvu, pcifunc, BLKADDR_NPA);
 	rvu_detach_rsrcs(rvu, NULL, pcifunc);
 	rvu_sso_pfvf_rst(rvu, pcifunc);
+	rvu_pfvf_msix_reset(rvu, pcifunc);
 	mutex_unlock(&rvu->flr_lock);
 }
 
@@ -2618,6 +2639,11 @@ static void rvu_afvf_flr_handler(struct rvu *rvu, int vf)
 	/* Signal FLR finish and enable IRQ */
 	rvupf_write64(rvu, RVU_PF_VFTRPENDX(reg), BIT_ULL(vf));
 	rvupf_write64(rvu, RVU_PF_VFFLR_INT_ENA_W1SX(reg), BIT_ULL(vf));
+	/* Re-enable MBOX and ME interrupt as it gets cleared
+	 * in HWVF_RST reset.
+	 */
+	rvupf_write64(rvu, RVU_PF_VFME_INT_ENA_W1SX(reg), BIT_ULL(vf));
+	rvupf_write64(rvu, RVU_PF_VFPF_MBOX_INT_ENA_W1SX(0), BIT_ULL(vf));
 }
 
 static void rvu_flr_handler(struct work_struct *work)
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index 2729c8f..49df343 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -125,6 +125,12 @@ static void otx2_flr_handler(struct work_struct *work)
 		/* clear transcation pending bit */
 		otx2_write64(pf, RVU_PF_VFTRPENDX(reg), BIT_ULL(vf));
 		otx2_write64(pf, RVU_PF_VFFLR_INT_ENA_W1SX(reg), BIT_ULL(vf));
+		/* Re-enable MBOX and ME interrupt as it gets cleared
+		 * in HWVF_RST reset.
+		 */
+		otx2_write64(pf, RVU_PF_VFME_INT_ENA_W1SX(reg), BIT_ULL(vf));
+		otx2_write64(pf, RVU_PF_VFPF_MBOX_INT_ENA_W1SX(reg),
+			     BIT_ULL(vf));
 	}
 
 	mutex_unlock(&mbox->lock);
-- 
1.9.1

