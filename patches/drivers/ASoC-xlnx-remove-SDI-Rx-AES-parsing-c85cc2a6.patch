From 5de4f1479d43dfc46a8cc3120608dc45a7baab2c Mon Sep 17 00:00:00 2001
From: Maruthi Srinivas Bayyavarapu <maruthi.srinivas.bayyavarapu@xilinx.com>
Date: Tue, 25 Sep 2018 23:23:30 +0530
Subject: [PATCH 0120/1851] ASoC: xlnx: remove SDI Rx AES parsing

commit fef2495e73ce4348b60561e16b42dc7093f72586 from
https://github.com/Xilinx/linux-xlnx.git

AES parsing logic will be moved to audio formatter driver.
Removed the same from sdi audio driver. Now, instead of waiting
for channel status update (which gives AES bytes for parsing), Rx
startup callback waits for sample rate update status which conveys
valid stream received on SDI extract block.

Signed-off-by: Maruthi Srinivas Bayyavarapu <maruthi.srinivas.bayyavarapu@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 sound/soc/xilinx/xlnx_sdi_audio.c | 296 ++++--------------------------
 1 file changed, 37 insertions(+), 259 deletions(-)

diff --git a/sound/soc/xilinx/xlnx_sdi_audio.c b/sound/soc/xilinx/xlnx_sdi_audio.c
index a3bba4aca5cc..ed6908c0e106 100644
--- a/sound/soc/xilinx/xlnx_sdi_audio.c
+++ b/sound/soc/xilinx/xlnx_sdi_audio.c
@@ -30,6 +30,7 @@
 #define XSDIAUD_CH_MUTE_REG_OFFSET		0x30
 #define XSDIAUD_ACTIVE_GRP_REG_OFFSET		0X40
 #define XSDIAUD_EXT_CH_STAT0_REG_OFFSET		0X48
+#define XSDIAUD_EXT_SRATE_STS_REG_OFFSET	0X70
 #define XSDIAUD_GUI_PARAM_REG_OFFSET		0XFC
 
 #define XSDIAUD_CNTRL_EN_MASK		BIT(0)
@@ -38,7 +39,8 @@
 #define XSDIAUD_VER_MAJOR_MASK		GENMASK(31, 24)
 #define XSDIAUD_VER_MINOR_MASK		GENMASK(23, 16)
 
-#define XSDIAUD_EMB_CS_UPDATE_MASK	BIT(16)
+#define XSDIAUD_EXT_GROUP_1_STS_MASK	BIT(0)
+#define XSDIAUD_EXT_AUDSTS_UPDATE_MASK	BIT(8)
 #define XSDIAUD_EMB_VID_CNT_ELE_SHIFT	(16)
 #define XSDIAUD_EMB_VID_CNT_ELE_MASK	BIT(16)
 #define XSDIAUD_EMB_VID_CNT_TSCAN_MASK	BIT(8)
@@ -48,39 +50,6 @@
 #define XSDIAUD_EMB_AUD_CNT_ASYNC_AUDIO	BIT(4)
 
 #define CH_STATUS_UPDATE_TIMEOUT	40
-/* audio params macros */
-#define PROF_SAMPLERATE_MASK		GENMASK(7, 6)
-#define PROF_SAMPLERATE_SHIFT		6
-#define PROF_CHANNEL_COUNT_MASK		GENMASK(11, 8)
-#define PROF_CHANNEL_COUNT_SHIFT	8
-#define PROF_MAX_BITDEPTH_MASK		GENMASK(18, 16)
-#define PROF_MAX_BITDEPTH_SHIFT		16
-#define PROF_BITDEPTH_MASK		GENMASK(21, 19)
-#define PROF_BITDEPTH_SHIFT		19
-
-#define AES_FORMAT_MASK			BIT(0)
-#define PROF_SAMPLERATE_UNDEFINED	0
-#define PROF_SAMPLERATE_44100		1
-#define PROF_SAMPLERATE_48000		2
-#define PROF_SAMPLERATE_32000		3
-#define PROF_CHANNELS_UNDEFINED		0
-#define PROF_TWO_CHANNELS		8
-#define PROF_STEREO_CHANNELS		2
-#define PROF_MAX_BITDEPTH_UNDEFINED	0
-#define PROF_MAX_BITDEPTH_20		2
-#define PROF_MAX_BITDEPTH_24		4
-
-#define CON_SAMPLE_RATE_MASK		GENMASK(27, 24)
-#define CON_SAMPLE_RATE_SHIFT		24
-#define CON_CHANNEL_COUNT_MASK		GENMASK(23, 20)
-#define CON_CHANNEL_COUNT_SHIFT		20
-#define CON_MAX_BITDEPTH_MASK		BIT(1)
-#define CON_BITDEPTH_MASK		GENMASK(3, 1)
-#define CON_BITDEPTH_SHIFT		0x1
-
-#define CON_SAMPLERATE_44100		0
-#define CON_SAMPLERATE_48000		2
-#define CON_SAMPLERATE_32000		3
 
 enum IP_MODE {
 	EMBED,
@@ -122,45 +91,34 @@ enum sdi_audio_samplesize {
 	XSDIAUD_SAMPSIZE1
 };
 
-/**
- * struct audio_params - audio stream parameters
- * @srate: sampling rate
- * @sig_bits: significant bits in container
- * @channels: number of channels
- */
-struct audio_params {
-	u32 srate;
-	u32 sig_bits;
-	u32 channels;
-};
-
 struct dev_ctx {
 	enum IP_MODE mode;
 	void __iomem *base;
 	struct device *dev;
-	struct audio_params *params;
 	struct drm_display_mode *video_mode;
 	struct snd_pcm_substream *stream;
-	bool rx_prams_valid;
-	wait_queue_head_t params_q;
+	bool rx_srate_updated;
+	wait_queue_head_t srate_q;
 };
 
 static irqreturn_t xtract_irq_handler(int irq, void *dev_id)
 {
-	u32 val;
+	u32 irq_sts, irq_en, active_grps;
 	struct dev_ctx *ctx = dev_id;
 
-	val = readl(ctx->base + XSDIAUD_INT_STS_REG_OFFSET);
-	if (val & XSDIAUD_EMB_CS_UPDATE_MASK) {
-		writel(XSDIAUD_EMB_CS_UPDATE_MASK,
+	irq_sts = readl(ctx->base + XSDIAUD_INT_STS_REG_OFFSET);
+	active_grps = readl(ctx->base + XSDIAUD_ACTIVE_GRP_REG_OFFSET);
+	if ((irq_sts & XSDIAUD_EXT_AUDSTS_UPDATE_MASK) &&
+	    (active_grps & XSDIAUD_EXT_GROUP_1_STS_MASK)) {
+		writel(XSDIAUD_EXT_AUDSTS_UPDATE_MASK,
 		       ctx->base + XSDIAUD_INT_STS_REG_OFFSET);
-		val = readl(ctx->base + XSDIAUD_INT_EN_REG_OFFSET);
-		/* Disable further interrupts. CH status got updated*/
-		writel(val & ~XSDIAUD_EMB_CS_UPDATE_MASK,
+		irq_en = readl(ctx->base + XSDIAUD_INT_EN_REG_OFFSET);
+		/* Disable further interrupts. sample rate status got updated*/
+		writel(irq_en & ~XSDIAUD_EXT_AUDSTS_UPDATE_MASK,
 		       ctx->base + XSDIAUD_INT_EN_REG_OFFSET);
 
-		ctx->rx_prams_valid = true;
-		wake_up_interruptible(&ctx->params_q);
+		ctx->rx_srate_updated = true;
+		wake_up_interruptible(&ctx->srate_q);
 		return IRQ_HANDLED;
 	}
 
@@ -202,224 +160,45 @@ static void audio_reset_core(void __iomem *aud_base, bool reset)
 	}
 }
 
-static struct audio_params *parse_professional_format(u32 reg1_val,
-						      u32 reg2_val)
-{
-	u32 padded, val;
-	struct audio_params *params;
-
-	params = kzalloc(sizeof(*params), GFP_KERNEL);
-	if (!params)
-		return NULL;
-
-	val = (reg1_val & PROF_SAMPLERATE_MASK) >> PROF_SAMPLERATE_SHIFT;
-	switch (val) {
-	case PROF_SAMPLERATE_44100:
-		params->srate = 44100;
-		break;
-	case PROF_SAMPLERATE_48000:
-		params->srate = 48000;
-		break;
-	case PROF_SAMPLERATE_32000:
-		params->srate = 32000;
-		break;
-	case PROF_SAMPLERATE_UNDEFINED:
-	default:
-		/* not indicated */
-		kfree(params);
-		return NULL;
-	}
-
-	val = (reg1_val & PROF_CHANNEL_COUNT_MASK) >> PROF_CHANNEL_COUNT_SHIFT;
-	switch (val) {
-	case PROF_CHANNELS_UNDEFINED:
-	case PROF_STEREO_CHANNELS:
-	case PROF_TWO_CHANNELS:
-		params->channels = 2;
-		break;
-	default:
-		/* TODO: handle more channels in future*/
-		kfree(params);
-		return NULL;
-	}
-
-	val = (reg1_val & PROF_MAX_BITDEPTH_MASK) >> PROF_MAX_BITDEPTH_SHIFT;
-	switch (val) {
-	case PROF_MAX_BITDEPTH_UNDEFINED:
-	case PROF_MAX_BITDEPTH_20:
-		padded = 0;
-		break;
-	case PROF_MAX_BITDEPTH_24:
-		padded = 4;
-		break;
-	default:
-		/* user defined values are not supported */
-		kfree(params);
-		return NULL;
-	}
-
-	val = (reg1_val & PROF_BITDEPTH_MASK) >> PROF_BITDEPTH_SHIFT;
-	switch (val) {
-	case 1:
-		params->sig_bits = 16 + padded;
-		break;
-	case 2:
-		params->sig_bits = 18 + padded;
-		break;
-	case 4:
-		params->sig_bits = 19 + padded;
-		break;
-	case 5:
-		params->sig_bits = 20 + padded;
-		break;
-	case 6:
-		params->sig_bits = 17 + padded;
-		break;
-	case 0:
-	default:
-		kfree(params);
-		return NULL;
-	}
-
-	return params;
-}
-
-static struct audio_params *parse_consumer_format(u32 reg1_val, u32 reg2_val)
-{
-	u32 padded, val;
-	struct audio_params *params;
-
-	params = kzalloc(sizeof(*params), GFP_KERNEL);
-	if (!params)
-		return NULL;
-
-	val = (reg1_val & CON_SAMPLE_RATE_MASK) >> CON_SAMPLE_RATE_SHIFT;
-	switch (val) {
-	case CON_SAMPLERATE_44100:
-		params->srate = 44100;
-		break;
-	case CON_SAMPLERATE_48000:
-		params->srate = 48000;
-		break;
-	case CON_SAMPLERATE_32000:
-		params->srate = 32000;
-		break;
-	default:
-		kfree(params);
-		return NULL;
-	}
-
-	val = (reg1_val & CON_CHANNEL_COUNT_MASK) >> CON_CHANNEL_COUNT_SHIFT;
-	params->channels = val;
-
-	if (reg2_val & CON_MAX_BITDEPTH_MASK)
-		padded = 4;
-	else
-		padded = 0;
-
-	val = (reg2_val & CON_BITDEPTH_MASK) >> CON_BITDEPTH_SHIFT;
-	switch (val) {
-	case 1:
-		params->sig_bits = 16 + padded;
-		break;
-	case 2:
-		params->sig_bits = 18 + padded;
-		break;
-	case 4:
-		params->sig_bits = 19 + padded;
-		break;
-	case 5:
-		params->sig_bits = 20 + padded;
-		break;
-	case 6:
-		params->sig_bits = 17 + padded;
-		break;
-	case 0:
-	default:
-		kfree(params);
-		return NULL;
-	}
-
-	return params;
-}
-
 static int xlnx_sdi_rx_pcm_startup(struct snd_pcm_substream *substream,
 				   struct snd_soc_dai *dai)
 {
 	int err;
-	u32 reg1_val, reg2_val;
+	u32 val, sample_rate;
 
-	struct snd_pcm_runtime *rtd = substream->runtime;
 	struct dev_ctx *ctx = dev_get_drvdata(dai->dev);
 	void __iomem *base = ctx->base;
 	unsigned long jiffies = msecs_to_jiffies(CH_STATUS_UPDATE_TIMEOUT);
 
 	audio_enable(base);
-	writel(XSDIAUD_EMB_CS_UPDATE_MASK,
+	writel(XSDIAUD_EXT_AUDSTS_UPDATE_MASK,
 	       ctx->base + XSDIAUD_INT_EN_REG_OFFSET);
-	err = wait_event_interruptible_timeout(ctx->params_q,
-					       ctx->rx_prams_valid,
+	err = wait_event_interruptible_timeout(ctx->srate_q,
+					       ctx->rx_srate_updated,
 					       jiffies);
 
 	if (!err) {
-		dev_err(ctx->dev, "Didn't received valid audio data\n");
+		dev_err(ctx->dev, "Didn't get valid audio property update\n");
 		return -EINVAL;
 	}
-	ctx->rx_prams_valid = false;
-
-	reg1_val = readl(base + XSDIAUD_EXT_CH_STAT0_REG_OFFSET);
-	reg2_val = readl(base + XSDIAUD_EXT_CH_STAT0_REG_OFFSET + 4);
-	if (reg1_val & AES_FORMAT_MASK)
-		ctx->params = parse_professional_format(reg1_val, reg2_val);
-	else
-		ctx->params = parse_consumer_format(reg1_val, reg2_val);
-
-	if (!ctx->params)
-		return -EINVAL;
-
-	dev_info(ctx->dev,
-		 "Audio properties: srate %d sig_bits = %d channels = %d\n",
-		ctx->params->srate, ctx->params->sig_bits,
-		ctx->params->channels);
-
-	err = snd_pcm_hw_constraint_minmax(rtd, SNDRV_PCM_HW_PARAM_RATE,
-					   ctx->params->srate,
-					   ctx->params->srate);
-
-	if (err < 0) {
-		dev_err(ctx->dev, "failed to constrain samplerate to %dHz\n",
-			ctx->params->srate);
-		kfree(ctx->params);
-		return err;
-	}
+	ctx->rx_srate_updated = false;
 
-	/*
-	 * During record, after AES bits(8) are removed, pcm is at max 24bits.
-	 * Out of 24 bits, sig_bits represent valid number of audio bits from
-	 * input stream.
-	 */
-	err = snd_pcm_hw_constraint_msbits(rtd, 0, 24, ctx->params->sig_bits);
-
-	if (err < 0) {
-		dev_err(ctx->dev,
-			"failed to constrain 'bits per sample' %d bits\n",
-			ctx->params->sig_bits);
-		kfree(ctx->params);
-		return err;
-	}
-
-	err = snd_pcm_hw_constraint_minmax(rtd, SNDRV_PCM_HW_PARAM_CHANNELS,
-					   ctx->params->channels,
-					   ctx->params->channels);
-	if (err < 0) {
-		dev_err(ctx->dev,
-			"failed to constrain channel count to %d\n",
-			ctx->params->channels);
-		kfree(ctx->params);
-		return err;
+	val = readl(base + XSDIAUD_EXT_SRATE_STS_REG_OFFSET);
+	/* As both channels contain same sample rate, read either of them */
+	switch (val & CHAN_ID_0) {
+	case 0:
+		sample_rate = 48000;
+		break;
+	case 1:
+		sample_rate = 44100;
+		break;
+	case 2:
+		sample_rate = 32000;
+		break;
 	}
 
-	dev_info(ctx->dev, " sdi rx audio enabled\n");
+	dev_dbg(ctx->dev,
+		"sdi rx audio enabled : sample rate = %d\n", sample_rate);
 	return 0;
 }
 
@@ -428,7 +207,6 @@ static void xlnx_sdi_rx_pcm_shutdown(struct snd_pcm_substream *substream,
 {
 	struct dev_ctx *ctx = dev_get_drvdata(dai->dev);
 
-	kfree(ctx->params);
 	audio_disable(ctx->base);
 
 	dev_info(dai->dev, " sdi rx audio disabled\n");
@@ -663,7 +441,7 @@ static int xlnx_sdi_audio_probe(struct platform_device *pdev)
 			return -ENODEV;
 		}
 
-		init_waitqueue_head(&ctx->params_q);
+		init_waitqueue_head(&ctx->srate_q);
 
 		snd_dai = &xlnx_sdi_rx_dai;
 	} else {
-- 
2.31.1

