From 4f7444961b86aee18ae39db21dca8a9c5f92e79f Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Tue, 6 Aug 2019 12:02:52 +0530
Subject: [PATCH 0251/1921] octeontx2-af: Add error messages in driver exit
 path

Added few error messages to help user identify why
AF driver exited from probe() or deferred.

Change-Id: I9cbc41c68e659499fb49d753d8ee17832e178763
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/13933
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/rvu.c   | 29 ++++++++++++++-----
 1 file changed, 21 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
index 1e1f300dfcea..f36ced5ea4d2 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
@@ -716,7 +716,7 @@ static void rvu_setup_pfvf_macaddress(struct rvu *rvu)
 	}
 }
 
-static void rvu_fwdata_init(struct rvu *rvu)
+static int rvu_fwdata_init(struct rvu *rvu)
 {
 	u64 fwdbase;
 	int err;
@@ -724,15 +724,21 @@ static void rvu_fwdata_init(struct rvu *rvu)
 	/* Get firmware data base address */
 	err = cgx_get_fwdata_base(&fwdbase);
 	if (err)
-		return;
+		goto fail;
 	rvu->fwdata = ioremap_wc(fwdbase, sizeof(struct rvu_fwdata));
 	if (!rvu->fwdata)
-		return;
+		goto fail;
 	if (!is_rvu_fwdata_valid(rvu)) {
+		dev_err(rvu->dev,
+			"Mismatch in 'fwdata' struct btw kernel and firmware\n");
 		iounmap(rvu->fwdata);
 		rvu->fwdata = NULL;
-		return;
+		return -EINVAL;
 	}
+	return 0;
+fail:
+	dev_err(rvu->dev, "Unable to fetch 'fwdata' from firmware\n");
+	return -EIO;
 }
 
 static void rvu_fwdata_exit(struct rvu *rvu)
@@ -919,7 +925,9 @@ static int rvu_setup_hw_resources(struct rvu *rvu)
 		rvu_scan_block(rvu, block);
 	}
 
-	rvu_fwdata_init(rvu);
+	err = rvu_fwdata_init(rvu);
+	if (err)
+		goto msix_err;
 
 	err = rvu_npc_init(rvu);
 	if (err)
@@ -1006,8 +1014,10 @@ int rvu_aq_alloc(struct rvu *rvu, struct admin_queue **ad_queue,
 int rvu_mbox_handler_ready(struct rvu *rvu, struct msg_req *req,
 			   struct ready_msg_rsp *rsp)
 {
-	rsp->rclk_freq = rvu->fwdata->rclk;
-	rsp->sclk_freq = rvu->fwdata->sclk;
+	if (rvu->fwdata) {
+		rsp->rclk_freq = rvu->fwdata->rclk;
+		rsp->sclk_freq = rvu->fwdata->sclk;
+	}
 	return 0;
 }
 
@@ -2775,8 +2785,11 @@ static int rvu_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	rvu->ptp = ptp_get();
 	if (IS_ERR(rvu->ptp)) {
 		err = PTR_ERR(rvu->ptp);
-		if (err == -EPROBE_DEFER)
+		if (err == -EPROBE_DEFER) {
+			dev_err(dev,
+				"PTP driver not loaded, deferring probe\n");
 			goto err_release_regions;
+		}
 		rvu->ptp = NULL;
 	}
 
-- 
2.31.1

