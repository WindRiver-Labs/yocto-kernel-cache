From 4e9e7d892ebd64e90394c43a838e416d566323b0 Mon Sep 17 00:00:00 2001
From: Wendy Liang <wendy.liang@xilinx.com>
Date: Mon, 22 Jun 2020 15:35:14 -0700
Subject: [PATCH 1399/1852] misc: xilinx-ai-engine: Update AI engine partition
 request parameter

commit 49fa146db4f5d380f2f6f2a3962868cba391e9e6 from
https://github.com/Xilinx/linux-xlnx.git

Update the parameters to request for an AI engine partition.
There are more that just partition ID should be used to request an AI
engine partition. Driver should check partition ID and also the UID
of the image loaded on the AI engine to see of it can grant the
application access to the partition. The request can also has metadata
for application to tell driver which resources the application uses. And
the application can use flag to tell the driver which particular
requirement the application needs, such as donot reset the partition
when closing the partition.

This commit is to update the parameters so that the user API doesn't
need to change in future when the underline feature is implemented.

Signed-off-by: Wendy Liang <wendy.liang@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/misc/xilinx-ai-engine/ai-engine-dev.c | 27 ++++++++++++-------
 .../xilinx-ai-engine/ai-engine-internal.h     |  4 +--
 include/uapi/linux/xlnx-ai-engine.h           | 20 +++++++++++++-
 3 files changed, 38 insertions(+), 13 deletions(-)

diff --git a/drivers/misc/xilinx-ai-engine/ai-engine-dev.c b/drivers/misc/xilinx-ai-engine/ai-engine-dev.c
index 4fe00bbd4aa5..11a70648ca0d 100644
--- a/drivers/misc/xilinx-ai-engine/ai-engine-dev.c
+++ b/drivers/misc/xilinx-ai-engine/ai-engine-dev.c
@@ -149,35 +149,42 @@ struct aie_partition *aie_get_partition_from_id(struct aie_device *adev,
 }
 
 /**
- * aie_request_partition_from_id() - request AI engine partition from id
+ * aie_request_partition() - request AI engine partition
  * @adev: AI engine device
- * @partition_id: partition id
+ * @req: partition request, includes the requested AI engine information
+ *	 such as partition node ID and the UID of the image which is
+ *	 loaded on the partition.
  * @return: partition pointer if partition exists, otherwise, NULL.
  *
  * This function finds a defined partition which matches the specified
  * partition id, request it by increasing the refcount, and returns it.
  */
-struct aie_partition *aie_request_partition_from_id(struct aie_device *adev,
-						    u32 partition_id)
+struct aie_partition *aie_request_partition(struct aie_device *adev,
+					    struct aie_partition_req *req)
 {
 	struct aie_partition *apart;
 
 	mutex_lock_interruptible(&adev->mlock);
-	apart = aie_get_partition_from_id(adev, partition_id);
+	apart = aie_get_partition_from_id(adev, req->partition_id);
 	if (!apart) {
 		dev_err(&adev->dev,
 			"request partition %u failed, not exist.\n",
-			partition_id);
+			req->partition_id);
 		mutex_unlock(&adev->mlock);
 		return ERR_PTR(-EINVAL);
 	}
+	/*
+	 * TODO: It will check image UID too to see if the user matches
+	 * what's loaded in the AI engine partition. And check the meta
+	 * data to see which resources used by application.
+	 */
 
 	mutex_lock_interruptible(&apart->mlock);
 	if (apart->status & XAIE_PART_STATUS_INUSE) {
 		mutex_unlock(&apart->mlock);
 		dev_err(&adev->dev,
 			"request partition %u failed, partition in use.\n",
-			partition_id);
+			req->partition_id);
 		apart = ERR_PTR(-EBUSY);
 	} else {
 		/*
@@ -224,12 +231,12 @@ static long xilinx_ai_engine_ioctl(struct file *filp, unsigned int cmd,
 	}
 	case AIE_REQUEST_PART_IOCTL:
 	{
-		u32 partition_id;
+		struct aie_partition_req req;
 		struct aie_partition *apart;
 
-		if (copy_from_user(&partition_id, argp, sizeof(partition_id)))
+		if (copy_from_user(&req, argp, sizeof(req)))
 			return -EFAULT;
-		apart = aie_request_partition_from_id(adev, partition_id);
+		apart = aie_request_partition(adev, &req);
 		if (IS_ERR(apart))
 			return PTR_ERR(apart);
 		ret = aie_get_partition_fd(apart);
diff --git a/drivers/misc/xilinx-ai-engine/ai-engine-internal.h b/drivers/misc/xilinx-ai-engine/ai-engine-internal.h
index 13ec9cb8cc51..ce7417356453 100644
--- a/drivers/misc/xilinx-ai-engine/ai-engine-internal.h
+++ b/drivers/misc/xilinx-ai-engine/ai-engine-internal.h
@@ -213,8 +213,8 @@ const struct file_operations *aie_part_get_fops(void);
 u8 aie_part_in_use(struct aie_partition *apart);
 struct aie_partition *aie_get_partition_from_id(struct aie_device *adev,
 						u32 partition_id);
-struct aie_partition *aie_request_partition_from_id(struct aie_device *adev,
-						    u32 partition_id);
+struct aie_partition *aie_request_partition(struct aie_device *adev,
+					    struct aie_partition_req *req);
 struct aie_partition *of_aie_part_probe(struct aie_device *adev,
 					struct device_node *nc);
 void aie_part_remove(struct aie_partition *apart);
diff --git a/include/uapi/linux/xlnx-ai-engine.h b/include/uapi/linux/xlnx-ai-engine.h
index a274d1fdde3a..4fc068425989 100644
--- a/include/uapi/linux/xlnx-ai-engine.h
+++ b/include/uapi/linux/xlnx-ai-engine.h
@@ -78,12 +78,30 @@ struct aie_partition_query {
 	__u32 partition_cnt;
 };
 
+/**
+ * struct aie_partition_req - AIE request partition arguments
+ * @partition_id: partition node id. It is used to identify the AI engine
+ *		  partition in the system.
+ * @uid: image identifier loaded on the AI engine partition
+ * @meta_data: meta data to indicate which resources used by application.
+ * @flag: used for application to indicate particular driver requirements
+ *	  application wants to have for the partition. e.g. do not clean
+ *	  resource when closing the partition.
+ */
+struct aie_partition_req {
+	__u32 partition_id;
+	__u32 uid;
+	__u64 meta_data;
+	__u32 flag;
+};
+
 #define AIE_IOCTL_BASE 'A'
 
 /* AI engine device IOCTL operations */
 #define AIE_ENQUIRE_PART_IOCTL		_IOWR(AIE_IOCTL_BASE, 0x1, \
 					      struct aie_partition_query)
-#define AIE_REQUEST_PART_IOCTL		_IOR(AIE_IOCTL_BASE, 0x2, __u32)
+#define AIE_REQUEST_PART_IOCTL		_IOR(AIE_IOCTL_BASE, 0x2, \
+					     struct aie_partition_req)
 
 /* AI engine partition IOCTL operations */
 #define AIE_REG_IOCTL			_IOWR(AIE_IOCTL_BASE, 0x8, \
-- 
2.31.1

