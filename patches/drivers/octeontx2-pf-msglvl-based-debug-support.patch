From 1b21ed20ff3e9b39f359ff9999369442683b4969 Mon Sep 17 00:00:00 2001
From: Prakash Brahmajyosyula <bprakash@marvell.com>
Date: Thu, 6 Jun 2019 12:04:01 +0530
Subject: [PATCH 179/767] octeontx2-pf: msglvl based debug support.

commit e4cd836782c35279a664f86ae827df8753e68f8b from
git@git.assembla.com:cavium/WindRiver.linux.git

Add debug messages by using netif_msg_*() macros.
With this patch, supported msglvls are pktdata, tx_err and rx_err.

These messasges levels can be enabled or disabled by using ethtool.

Change-Id: Ie5d23b239a676054bf48eb1b45aa8b8f33bbb297
Signed-off-by: Prakash Brahmajyosyula <bprakash@marvell.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.h       |  1 +
 .../marvell/octeontx2/nic/otx2_ethtool.c      | 16 ++++++++++
 .../marvell/octeontx2/nic/otx2_txrx.c         | 30 +++++++++++++++----
 3 files changed, 41 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index fc2ee1b24e0e..6de2c62e5732 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -178,6 +178,7 @@ struct otx2_nic {
 	u16			tx_chan_base;
 	u8			cq_time_wait;
 	u32			cq_ecount_wait;
+	u32			msg_enable;
 	struct work_struct	reset_task;
 	u64			reset_count;
 	u8			total_vfs;
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
index 9d631d93e061..82342aedfdd2 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
@@ -1046,6 +1046,20 @@ static int otx2_get_ts_info(struct net_device *netdev,
 	return 0;
 }
 
+static u32 otx2_get_msglevel(struct net_device *netdev)
+{
+	struct otx2_nic *pfvf = netdev_priv(netdev);
+
+	return pfvf->msg_enable;
+}
+
+static void otx2_set_msglevel(struct net_device *netdev, u32 val)
+{
+	struct otx2_nic *pfvf = netdev_priv(netdev);
+
+	pfvf->msg_enable = val;
+}
+
 static void otx2_get_fec_info(u64 index, int mode, struct ethtool_link_ksettings
 			      *link_ksettings)
 {
@@ -1261,6 +1275,8 @@ static const struct ethtool_ops otx2_ethtool_ops = {
 	.get_rxfh		= otx2_get_rxfh,
 	.set_rxfh		= otx2_set_rxfh,
 	.get_ts_info		= otx2_get_ts_info,
+	.get_msglevel		= otx2_get_msglevel,
+	.set_msglevel		= otx2_set_msglevel,
 	.get_link_ksettings     = otx2_get_link_ksettings,
 	.get_pauseparam		= otx2_get_pauseparam,
 	.set_pauseparam		= otx2_set_pauseparam,
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
index 1bd93c678dd1..a210dd392a72 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
@@ -99,8 +99,11 @@ static void otx2_snd_pkt_handler(struct otx2_nic *pfvf,
 	snd_comp = (struct nix_send_comp_s *)(cqe + sizeof(*cqe_hdr));
 	if (snd_comp->status) {
 		/* tx packet error handling*/
-		dev_info(pfvf->dev, "TX%d: Error in send CQ entry\n",
-			 cq->cint_idx);
+		if (netif_msg_tx_err(pfvf)) {
+			netdev_info(pfvf->netdev,
+				    "TX%d: Error in send CQ status:%x\n",
+				    cq->cint_idx, snd_comp->status);
+		}
 	}
 
 	/* Barrier, so that update to sq by other cpus is visible */
@@ -243,14 +246,18 @@ static void otx2_rcv_pkt_handler(struct otx2_nic *pfvf,
 		sg = (struct nix_rx_sg_s *)start;
 		/* For a 128byte size CQE, NIX_RX_IMM_S is never expected */
 		if (sg->subdc != NIX_SUBDC_SG) {
-			dev_err(pfvf->dev, "RQ%d: Unexpected SUBDC %d\n",
-				cq->cq_idx, sg->subdc);
+			if (netif_msg_rx_err(pfvf))
+				netdev_err(pfvf->netdev,
+					   "RQ%d: Unexpected SUBDC %d\n",
+					   cq->cq_idx, sg->subdc);
 			break;
 		}
 
 		if (!sg->segs) {
-			dev_err(pfvf->dev, "RQ%d: Zero segments in NIX_RX_SG_S\n",
-				cq->cq_idx);
+			if (netif_msg_rx_err(pfvf))
+				netdev_err(pfvf->netdev,
+					   "RQ%d: Zero segment in NIX_RX_SG_S\n",
+					   cq->cq_idx);
 			break;
 		}
 
@@ -260,6 +267,11 @@ static void otx2_rcv_pkt_handler(struct otx2_nic *pfvf,
 		for (seg = 0; seg < sg->segs; seg++) {
 			/* Check for errors */
 			if (parse->errlev || parse->errcode) {
+				if (netif_msg_rx_err(pfvf))
+					netdev_err(pfvf->netdev,
+						   "RQ%d: Error pkt received errlev:%x errcode:%x\n",
+						   cq->cq_idx, parse->errlev,
+						   parse->errcode);
 				otx2_aura_freeptr(pfvf, cq->cq_idx,
 						  *iova & ~0x07ULL);
 				iova++;
@@ -299,6 +311,12 @@ static void otx2_rcv_pkt_handler(struct otx2_nic *pfvf,
 	if (!skb)
 		return;
 
+	if (netif_msg_pktdata(pfvf) && !skb_is_nonlinear(skb)) {
+		netdev_info(pfvf->netdev, "skb 0x%p, len=%d\n", skb, skb->len);
+		print_hex_dump(KERN_DEBUG, "RX:", DUMP_PREFIX_OFFSET, 16, 1,
+			       skb->data, skb->len, true);
+	}
+
 	otx2_set_rxhash(pfvf, cqe_hdr, skb);
 
 	skb_record_rx_queue(skb, cq->cq_idx);
-- 
2.31.1

