From 3c0fa712c7e1f1d6d1fa29164d0261fccdda8100 Mon Sep 17 00:00:00 2001
From: Nishad Saraf <nishad.saraf@xilinx.com>
Date: Wed, 9 Sep 2020 23:46:18 -0700
Subject: [PATCH 1579/1851] misc: xilinx-ai-engine: Add support to request
 device management services

commit 3290f25bdeb69b4b48c4cc34614f8296719e7417 from
https://github.com/Xilinx/linux-xlnx.git

Platform management services like device control, resets, power
management, etc. are provided by Platform, Loader and Manager(PLM)
through firmware driver APIs. For requesting some of these services,
this change reads AI Engine platform management node ID from DT node.
Some other features like clearing interrupts in the NoC interconnect
might only be valid for particular silicon revisions. For supporting
such silicon specific features, AI Engine driver will query and store
this information in device instance. While at it, this change makes
EEMI operations accessible to all the other source files in the
driver.

Signed-off-by: Nishad Saraf <nishad.saraf@xilinx.com>
Reviewed-by: Wendy Liang <wendy.liang@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/misc/xilinx-ai-engine/ai-engine-aie.c | 16 +++-------
 drivers/misc/xilinx-ai-engine/ai-engine-dev.c | 32 ++++++++++++++++++-
 .../xilinx-ai-engine/ai-engine-internal.h     |  8 +++++
 3 files changed, 43 insertions(+), 13 deletions(-)

diff --git a/drivers/misc/xilinx-ai-engine/ai-engine-aie.c b/drivers/misc/xilinx-ai-engine/ai-engine-aie.c
index ab4f6956be7e..a28d3722eb45 100644
--- a/drivers/misc/xilinx-ai-engine/ai-engine-aie.c
+++ b/drivers/misc/xilinx-ai-engine/ai-engine-aie.c
@@ -128,8 +128,6 @@ static const struct aie_dma_attr aie_shimdma = {
 	.bd_len = 0x14U,
 };
 
-static const struct zynqmp_eemi_ops *eemi_ops;
-
 static u32 aie_get_tile_type(struct aie_location *loc)
 {
 	if (loc->row)
@@ -205,16 +203,16 @@ static int aie_reset_shim(struct aie_device *adev, struct aie_range *range)
 	aie_set_shim_reset(adev, range, true);
 
 	/* Assert shim reset of AI engine array */
-	ret = eemi_ops->reset_assert(VERSAL_PM_RST_AIE_SHIM_ID,
-				     PM_RESET_ACTION_ASSERT);
+	ret = adev->eemi_ops->reset_assert(VERSAL_PM_RST_AIE_SHIM_ID,
+					   PM_RESET_ACTION_ASSERT);
 	if (ret < 0) {
 		dev_err(&adev->dev, "failed to assert SHIM reset.\n");
 		return ret;
 	}
 
 	/* Release shim reset of AI engine array */
-	ret = eemi_ops->reset_assert(VERSAL_PM_RST_AIE_SHIM_ID,
-				     PM_RESET_ACTION_RELEASE);
+	ret = adev->eemi_ops->reset_assert(VERSAL_PM_RST_AIE_SHIM_ID,
+					   PM_RESET_ACTION_RELEASE);
 	if (ret < 0) {
 		dev_err(&adev->dev, "failed to release SHIM reset.\n");
 		return ret;
@@ -427,12 +425,6 @@ int aie_device_init(struct aie_device *adev)
 	adev->col_clkbuf = &aie_col_clkbuf;
 	adev->shim_dma = &aie_shimdma;
 
-	eemi_ops = zynqmp_pm_get_eemi_ops();
-	if (IS_ERR(eemi_ops) || !eemi_ops->reset_assert) {
-		dev_err(&adev->dev, "failed to get eemi ops.\n");
-		return PTR_ERR(eemi_ops);
-	}
-
 	/* Get the columns resource */
 	/* Get number of columns from AI engine memory resource */
 	ret = aie_resource_initialize(&adev->cols_res, 50);
diff --git a/drivers/misc/xilinx-ai-engine/ai-engine-dev.c b/drivers/misc/xilinx-ai-engine/ai-engine-dev.c
index e15d789e3575..ed0fd70736ae 100644
--- a/drivers/misc/xilinx-ai-engine/ai-engine-dev.c
+++ b/drivers/misc/xilinx-ai-engine/ai-engine-dev.c
@@ -11,6 +11,7 @@
 #include <linux/device.h>
 #include <linux/dma-mapping.h>
 #include <linux/file.h>
+#include <linux/firmware/xlnx-zynqmp.h>
 #include <linux/fs.h>
 #include <linux/idr.h>
 #include <linux/list.h>
@@ -26,7 +27,8 @@
 
 #include "ai-engine-internal.h"
 
-#define AIE_DEV_MAX	(MINORMASK + 1)
+#define AIE_DEV_MAX			(MINORMASK + 1)
+#define VERSAL_SILICON_REV_MASK		GENMASK(31, 28)
 
 static dev_t aie_major;
 struct class *aie_class;
@@ -351,6 +353,7 @@ static int xilinx_ai_engine_probe(struct platform_device *pdev)
 {
 	struct aie_device *adev;
 	struct device *dev;
+	u32 idcode, version, pm_reg[2];
 	int ret;
 
 	adev = devm_kzalloc(&pdev->dev, sizeof(*adev), GFP_KERNEL);
@@ -378,6 +381,33 @@ static int xilinx_ai_engine_probe(struct platform_device *pdev)
 		return ret;
 	}
 
+	/*
+	 * AI Engine platform management node ID is required for requesting
+	 * services from firmware driver.
+	 */
+	ret = of_property_read_u32_array(pdev->dev.of_node, "power-domains",
+					 pm_reg, ARRAY_SIZE(pm_reg));
+	if (ret < 0) {
+		dev_err(&pdev->dev,
+			"Failed to read power manangement information\n");
+		return ret;
+	}
+	adev->pm_node_id = pm_reg[1];
+
+	adev->eemi_ops = zynqmp_pm_get_eemi_ops();
+	if (IS_ERR(adev->eemi_ops) || !adev->eemi_ops->reset_assert ||
+	    !adev->eemi_ops->get_chipid || !adev->eemi_ops->ioctl) {
+		dev_err(&adev->dev, "failed to get eemi ops.\n");
+		return PTR_ERR(adev->eemi_ops);
+	}
+
+	ret = adev->eemi_ops->get_chipid(&idcode, &version);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "Failed to get chip ID\n");
+		return ret;
+	}
+	adev->version = FIELD_GET(VERSAL_SILICON_REV_MASK, idcode);
+
 	dev = &adev->dev;
 	device_initialize(dev);
 	dev->class = aie_class;
diff --git a/drivers/misc/xilinx-ai-engine/ai-engine-internal.h b/drivers/misc/xilinx-ai-engine/ai-engine-internal.h
index a168c541b116..36e5794d9cb9 100644
--- a/drivers/misc/xilinx-ai-engine/ai-engine-internal.h
+++ b/drivers/misc/xilinx-ai-engine/ai-engine-internal.h
@@ -43,6 +43,10 @@
 
 #define AIE_PART_STATUS_BRIDGE_DISABLED	0x1U
 
+/* Silicon Engineering Sample(ES) revision ID */
+#define VERSAL_ES1_REV_ID		0x0
+#define VERSAL_ES2_REV_ID		0x1
+
 /**
  * struct aie_tile_regs - contiguous range of AI engine register
  *			  within an AI engine tile
@@ -160,6 +164,7 @@ struct aie_resource {
  * @mlock: protection for AI engine device operations
  * @base: AI engine device base virtual address
  * @res: memory resource of AI engine device
+ * @eemi_ops: pointer to eemi ops structure
  * @kernel_regs: array of kernel only registers
  * @ops: tile operations
  * @col_rst: column reset attribute
@@ -173,6 +178,7 @@ struct aie_resource {
  *	      while columns are occupied by partitions.
  * @num_kernel_regs: number of kernel only registers range
  * @version: AI engine device version
+ * @pm_node_id: AI Engine platform management node ID
  */
 struct aie_device {
 	struct list_head partitions;
@@ -181,6 +187,7 @@ struct aie_device {
 	struct mutex mlock; /* protection for AI engine partitions */
 	void __iomem *base;
 	struct resource *res;
+	const struct zynqmp_eemi_ops *eemi_ops;
 	const struct aie_tile_regs *kernel_regs;
 	const struct aie_tile_operations *ops;
 	const struct aie_single_reg_field *col_rst;
@@ -193,6 +200,7 @@ struct aie_device {
 	u32 row_shift;
 	u32 num_kernel_regs;
 	int version;
+	u32 pm_node_id;
 };
 
 /**
-- 
2.31.1

