From 86b91725163c132dc6cc73de551eeeb8ea21b822 Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Wed, 22 Jan 2020 23:49:35 +0530
Subject: [PATCH 0348/1921] octeontx2-pf: Fix netdev watchdog timeout value

For 96xx A0 due to a silicon which frequently causes transmit
side stalls the watchdog timeout was set to a very high value
instead of disabling. Since on the subsequent silicon versions
the issue is fixed this patch sets a proper meaningful timeout value.

Change-Id: Iaffac7a420be957fcdc8378e6ca95d72237ae8ae
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/22045
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.h       | 23 +++++++++++--------
 .../ethernet/marvell/octeontx2/nic/otx2_pf.c  |  3 ++-
 2 files changed, 15 insertions(+), 11 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index dfa0961b0412..8fbf9c3d3b29 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -350,14 +350,21 @@ static inline void otx2_setup_dev_hw_settings(struct otx2_nic *pfvf)
 
 	if (is_96xx_A0(pfvf->pdev) || is_95xx_A0(pfvf->pdev)) {
 		hw->hw_tso = false;
-	/* Due to HW issue previous silicons required minimum 600
-	 * unused CQE to avoid CQ overflow.
-	 */
+		/* Due to HW issue previous silicons required minimum 600
+		 * unused CQE to avoid CQ overflow.
+		 */
 		pfvf->hw.rq_skid = 600;
 		pfvf->qset.rqe_cnt = Q_COUNT(Q_SIZE_1K);
 	}
-	if (is_96xx_A0(pfvf->pdev))
+	if (is_96xx_A0(pfvf->pdev)) {
 		pfvf->hw.cq_qcount_wait = 0x0;
+
+		/* Due to HW errata there will be frequent stalls on the
+		 * transmit side, instead of disabling set timeout to a
+		 * very high value.
+		 */
+		pfvf->netdev->watchdog_timeo = 10000 * HZ;
+	}
 }
 
 static inline void __iomem *otx2_get_regaddr(struct otx2_nic *nic, u64 offset)
@@ -631,12 +638,8 @@ otx2_mbox_up_handler_ ## _fn_name(struct otx2_nic *pfvf,		\
 MBOX_UP_CGX_MESSAGES
 #undef M
 
-/* Time to wait before watchdog kicks off.
- * Due to PSE deadlock errata, XOFF on TL2 transmission
- * queues takes more time than default watchdog timeout.
- * Hence setting this value higher.
- */
-#define OTX2_TX_TIMEOUT		(100000 * HZ)
+/* Time to wait before watchdog kicks off */
+#define OTX2_TX_TIMEOUT		(60 * HZ)
 
 #define	RVU_PFVF_PF_SHIFT	10
 #define	RVU_PFVF_PF_MASK	0x3F
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index b6a26791cc13..c36c8e3f66ac 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -2450,7 +2450,8 @@ static int otx2_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	netdev->priv_flags |= IFF_UNICAST_FLT;
 
 	netdev->gso_max_segs = OTX2_MAX_GSO_SEGS;
-	netdev->watchdog_timeo = OTX2_TX_TIMEOUT;
+	netdev->watchdog_timeo = netdev->watchdog_timeo ?
+				 netdev->watchdog_timeo : OTX2_TX_TIMEOUT;
 
 	netdev->netdev_ops = &otx2_netdev_ops;
 
-- 
2.31.1

