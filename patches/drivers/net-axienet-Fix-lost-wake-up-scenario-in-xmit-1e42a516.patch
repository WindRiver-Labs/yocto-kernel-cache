From 940b8be2d3fa0c99a7d20c97c1bd702442b89af6 Mon Sep 17 00:00:00 2001
From: Appana Durga Kedareswara Rao <appana.durga.rao@xilinx.com>
Date: Fri, 24 Jan 2020 20:52:18 +0530
Subject: [PATCH 1039/1851] net: axienet: Fix lost wake-up scenario in xmit

commit c978854d8e0f3c9a4ff2f4940d5b0af10d399247 from
https://github.com/Xilinx/linux-xlnx.git

In ndo_start_xmit we are checking for free BD count
and incase there are no available BD's we stop
the networking stack.

If these sequence of operation are preemted then
it will lead to classic Lost Wake-Up Problem.

If interrupt comes after xmit has checked  BD
count and TX post processing clears up the BD and
issue wake-up and then later xmit goes for a wait.
There is no one to wake up xmit and as wake-up
event is lost.

Signed-off-by: Appana Durga Kedareswara Rao <appana.durga.rao@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/net/ethernet/xilinx/xilinx_axienet.h      |  2 ++
 drivers/net/ethernet/xilinx/xilinx_axienet_main.c | 13 +++++++++++--
 2 files changed, 13 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet.h b/drivers/net/ethernet/xilinx/xilinx_axienet.h
index 6d8151c87dc3..4a119d22c4b2 100644
--- a/drivers/net/ethernet/xilinx/xilinx_axienet.h
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet.h
@@ -389,6 +389,7 @@ struct axidma_bd {
  * @regs:	Base address for the axienet_local device address space
  * @dma_regs:	Base address for the axidma device address space
  * @dma_err_tasklet: Tasklet structure to process Axi DMA errors
+ * @tx_lock:	Spin lock for tx path
  * @tx_irq:	Axidma TX IRQ number
  * @rx_irq:	Axidma RX IRQ number
  * @phy_mode:	Phy type to identify between MII/GMII/RGMII/SGMII/1000 Base-X
@@ -438,6 +439,7 @@ struct axienet_local {
 	void __iomem *dma_regs;
 
 	struct tasklet_struct dma_err_tasklet;
+	spinlock_t tx_lock;
 	spinlock_t rx_lock;		/* Spin lock */
 	struct napi_struct napi;	/* NAPI Structure */
 
diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
index 80c9d51a272c..90adf49d9ad6 100644
--- a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
@@ -625,13 +625,17 @@ axienet_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 	dma_addr_t tail_p;
 	struct axienet_local *lp = netdev_priv(ndev);
 	struct axidma_bd *cur_p;
+	unsigned long flags;
 
 	num_frag = skb_shinfo(skb)->nr_frags;
 	cur_p = &lp->tx_bd_v[lp->tx_bd_tail];
 
+	spin_lock_irqsave(&lp->tx_lock, flags);
 	if (axienet_check_tx_bd_space(lp, num_frag)) {
-		if (netif_queue_stopped(ndev))
+		if (netif_queue_stopped(ndev)) {
+			spin_unlock_irqrestore(&lp->tx_lock, flags);
 			return NETDEV_TX_BUSY;
+		}
 
 		netif_stop_queue(ndev);
 
@@ -639,8 +643,10 @@ axienet_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 		smp_mb();
 
 		/* Space might have just been freed - check again */
-		if (axienet_check_tx_bd_space(lp, num_frag))
+		if (axienet_check_tx_bd_space(lp, num_frag)) {
+			spin_unlock_irqrestore(&lp->tx_lock, flags);
 			return NETDEV_TX_BUSY;
+		}
 
 		netif_wake_queue(ndev);
 	}
@@ -688,6 +694,8 @@ axienet_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 	if (++lp->tx_bd_tail >= lp->tx_bd_num)
 		lp->tx_bd_tail = 0;
 
+	spin_unlock_irqrestore(&lp->tx_lock, flags);
+
 	return NETDEV_TX_OK;
 }
 
@@ -1881,6 +1889,7 @@ static int axienet_probe(struct platform_device *pdev)
 	if (lp->eth_irq <= 0)
 		dev_info(&pdev->dev, "Ethernet core IRQ not defined\n");
 
+	spin_lock_init(&lp->tx_lock);
 	spin_lock_init(&lp->rx_lock);
 
 	/* Retrieve the MAC address */
-- 
2.31.1

