From 9ca3b485ed04a6f80b61a2c02078af3c0187b6fa Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Mon, 12 Aug 2019 17:08:19 +0530
Subject: [PATCH 0259/1921] octeontx2-af: Fix programming and logical issues

Fixed many programming, logical and compilation issues.

Change-Id: Iaf6b29832a1335c9167faf8c995b014048bc36f6
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/14392
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/cgx.c   |  6 ++---
 .../ethernet/marvell/octeontx2/af/rvu_cgx.c   |  8 +++++--
 .../marvell/octeontx2/af/rvu_debugfs.c        | 23 ++++++++-----------
 .../ethernet/marvell/octeontx2/af/rvu_nix.c   |  2 +-
 .../ethernet/marvell/octeontx2/af/rvu_npc.c   |  5 ++--
 5 files changed, 23 insertions(+), 21 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/cgx.c b/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
index 6d6a0dfe03de..5ada00783b52 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
@@ -261,7 +261,7 @@ int cgx_lmac_addr_del(u8 cgx_id, u8 lmac_id, u8 index)
 	struct lmac *lmac = lmac_pdata(lmac_id, cgx_dev);
 
 	/* Validate the index */
-	if (index < 0 || index >= lmac->mac_to_index_bmap.max)
+	if (index >= lmac->mac_to_index_bmap.max)
 		return -EINVAL;
 
 	/* Skip deletion for reserved index i.e. index 0 */
@@ -434,7 +434,7 @@ int cgx_get_tx_stats(void *cgxd, int lmac_id, int idx, u64 *tx_stat)
 }
 EXPORT_SYMBOL(cgx_get_tx_stats);
 
-int cgx_set_fec_stats_count(struct cgx_link_user_info *linfo)
+static int cgx_set_fec_stats_count(struct cgx_link_user_info *linfo)
 {
 	if (linfo->fec) {
 		switch (linfo->lmac_type_id) {
@@ -869,7 +869,7 @@ static inline bool cgx_cmdresp_is_linkevent(u64 event)
 	id = FIELD_GET(EVTREG_ID, event);
 	if (id == CGX_CMD_LINK_BRING_UP ||
 	    id == CGX_CMD_LINK_BRING_DOWN ||
-	    CGX_CMD_MODE_CHANGE)
+	    id == CGX_CMD_MODE_CHANGE)
 		return true;
 	else
 		return false;
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
index 613c7ab4ea79..68237d75b373 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
@@ -611,8 +611,10 @@ static void cgx_notify_up_ptp_info(struct rvu *rvu, int pf, bool enable)
 
 	/* Send mbox message to PF */
 	msg = otx2_mbox_alloc_msg_cgx_ptp_rx_info(rvu, pf);
-	if (!msg)
-		dev_err(rvu->dev, "failed to alloc message\n");
+	if (!msg) {
+		dev_err(rvu->dev, "ptp notification to pf %d failed\n", pf);
+		return;
+	}
 
 	msg->ptp_en = enable;
 	otx2_mbox_msg_send(&rvu->afpf_wq_info.mbox_up, pf);
@@ -929,6 +931,8 @@ int rvu_cgx_nix_cuml_stats(struct rvu *rvu, void *cgxd, int lmac_id,
 	 */
 	pcifunc = pf << RVU_PFVF_PF_SHIFT;
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NIX, pcifunc);
+	if (blkaddr < 0)
+		return 0;
 	block = &rvu->hw->block[blkaddr];
 
 	*stat = 0;
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c
index ae74ddb56b33..63de2b4c75e1 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c
@@ -553,7 +553,7 @@ static int write_npa_ctx(struct rvu *rvu, bool all,
 			 int npalf, int id, int ctype)
 {
 	struct rvu_pfvf *pfvf;
-	int max_id;
+	int max_id = 0;
 	u16 pcifunc;
 
 	if (!rvu_dbg_is_valid_lf(rvu, BLKTYPE_NPA, npalf, &pcifunc))
@@ -1999,7 +1999,7 @@ static int read_sso_pc(struct rvu *rvu)
 
 	reg = rvu_read64(rvu, blkaddr, SSO_AF_AW_READ_ARB);
 	pr_info("SSO XAQ reads outstanding		%lld\n",
-		(reg & 0x3F) >> 24);
+		(reg >> 24) & 0x3F);
 
 	reg = rvu_read64(rvu, blkaddr, SSO_AF_XAQ_REQ_PC);
 	pr_info("SSO XAQ reads requests			%lld\n", reg);
@@ -2009,13 +2009,13 @@ static int read_sso_pc(struct rvu *rvu)
 
 	reg = rvu_read64(rvu, blkaddr, SSO_AF_AW_WE);
 	pr_info("SSO IAQ reserved			%lld\n",
-		(reg & 0x3FFF) >> 16);
+		(reg >> 16) & 0x3FFF);
 	pr_info("SSO IAQ total				%lld\n", reg & 0x3FFF);
 	pr_info("\n");
 
 	reg = rvu_read64(rvu, blkaddr, SSO_AF_TAQ_CNT);
 	pr_info("SSO TAQ reserved			%lld\n",
-		(reg & 0x7FF) >> 16);
+		(reg >> 16) & 0x7FF);
 	pr_info("SSO TAQ total				%lld\n", reg & 0x7FF);
 	pr_info("\n");
 
@@ -2405,13 +2405,13 @@ static ssize_t rvu_dbg_sso_cmd_parser(struct file *filp,
 	char *cmd_buf;
 	int lf = 0;
 
-	if (*ppos != 0)
-		return 0;
+	if ((*ppos != 0) || !count)
+		return -EINVAL;
 
 	cmd_buf = kzalloc(count + 1, GFP_KERNEL);
+	if (!cmd_buf)
+		return -ENOSPC;
 
-	if (!cmd_buf || !count)
-		return count;
 	if (parse_sso_cmd_buffer(cmd_buf, &count, buffer,
 				 &lf, &all) < 0) {
 		pr_info("Usage: echo [<%s>/all] > %s\n", lf_type, file_nm);
@@ -2611,16 +2611,13 @@ static ssize_t rvu_dbg_cpt_cmd_parser(struct file *filp,
 	char *cmd_buf;
 	int ret = 0;
 
-	if (*ppos != 0)
+	if ((*ppos != 0) || !count)
 		return -EINVAL;
 
 	cmd_buf = kzalloc(count + 1, GFP_KERNEL);
 	if (!cmd_buf)
 		return -ENOSPC;
-	if (!count) {
-		kfree(cmd_buf);
-		return count;
-	}
+
 	if (parse_cpt_cmd_buffer(cmd_buf, &count, buffer,
 				 rvu->rvu_dbg.cpt_ctx.e_type) < 0)
 		ret = -EINVAL;
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
index 28018ed2ad67..aa3fd8979e48 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
@@ -2013,7 +2013,7 @@ static int nix_tx_vtag_decfg(struct rvu *rvu, int blkaddr,
 	u16 pcifunc = req->hdr.pcifunc;
 	int idx0 = req->tx.vtag0_idx;
 	int idx1 = req->tx.vtag1_idx;
-	int err;
+	int err = 0;
 
 	if (req->tx.free_vtag0 && req->tx.free_vtag1)
 		if (vlan->entry2pfvf_map[idx0] != pcifunc ||
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c
index 0de4be4b068f..640f435cfe64 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c
@@ -38,8 +38,9 @@ static void npc_mcam_free_all_entries(struct rvu *rvu, struct npc_mcam *mcam,
 static void npc_mcam_free_all_counters(struct rvu *rvu, struct npc_mcam *mcam,
 				       u16 pcifunc);
 
-int npc_mcam_verify_pf_func(struct rvu *rvu, struct mcam_entry *entry_data,
-			    u8 intf, u16 pcifunc)
+static int npc_mcam_verify_pf_func(struct rvu *rvu,
+				   struct mcam_entry *entry_data,
+				   u8 intf, u16 pcifunc)
 {
 	u16 pf_func, pf_func_mask;
 
-- 
2.31.1

