From 99d2397074416d0006fdca0461f13b1d18a34e7c Mon Sep 17 00:00:00 2001
From: Naveen Mamindlapalli <naveenm@marvell.com>
Date: Tue, 20 Apr 2021 00:15:53 +0530
Subject: [PATCH 08/23] octeontx2-af: add vf trust check to set_rx_mode mbox
 handler

commit 8524faf3a195d40f040101445795c4ddf9219b9e from
git@git.assembla.com:cavium/WindRiver.linux.git

This patch checks VF trust setting when multicast or promisc
mode is enabled by VF driver. Untrusted VF can't enable promisc
or multicast mode. When VF trust setting is disabled by PF, then
the multicast and promisc entries will be disabled for that VF.

Change-Id: Ib6793c9446eb68a60f1408c1723a3290f7b11d8a
Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/50689
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/52280
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/rvu.c   | 24 +++++++++++++++++--
 .../ethernet/marvell/octeontx2/af/rvu_nix.c   |  5 ++++
 2 files changed, 27 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
index aaf9c92d646a..ad9b8d1e2280 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
@@ -2035,9 +2035,11 @@ int rvu_mbox_handler_ndc_sync_op(struct rvu *rvu,
 int rvu_mbox_handler_set_vf_perm(struct rvu *rvu, struct set_vf_perm *req,
 				 struct msg_rsp *rsp)
 {
+	struct rvu_hwinfo *hw = rvu->hw;
 	u16 pcifunc = req->hdr.pcifunc;
 	struct rvu_pfvf *pfvf;
-	int target;
+	int blkaddr, nixlf;
+	u16 target;
 
 	/* Only PF can add VF permissions */
 	if ((pcifunc & RVU_PFVF_FUNC_MASK) || is_afvf(pcifunc))
@@ -2046,11 +2048,29 @@ int rvu_mbox_handler_set_vf_perm(struct rvu *rvu, struct set_vf_perm *req,
 	target = (pcifunc & ~RVU_PFVF_FUNC_MASK) | (req->vf + 1);
 	pfvf = rvu_get_pfvf(rvu, target);
 
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NIX, target);
+	if (blkaddr < 0)
+		return NPA_AF_ERR_AF_LF_INVALID;
+
+	nixlf = rvu_get_lf(rvu, &hw->block[blkaddr], pcifunc, 0);
+	if (nixlf < 0)
+		return NPA_AF_ERR_AF_LF_INVALID;
+
 	if (req->flags & RESET_VF_PERM)
 		pfvf->flags &= RVU_CLEAR_VF_PERM;
 	else if (test_bit(PF_SET_VF_TRUSTED, &pfvf->flags) ^
-		 (req->flags & VF_TRUSTED))
+		 (req->flags & VF_TRUSTED)) {
 		change_bit(PF_SET_VF_TRUSTED, &pfvf->flags);
+		if (!test_bit(PF_SET_VF_TRUSTED, &pfvf->flags)) {
+			/* Delete multicast and promisc MCAM entries */
+			npc_enadis_default_mce_entry(rvu, target, nixlf,
+						     NIXLF_ALLMULTI_ENTRY,
+						     false);
+			npc_enadis_default_mce_entry(rvu, target, nixlf,
+						     NIXLF_PROMISC_ENTRY,
+						     false);
+		}
+	}
 
 	return 0;
 }
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
index 70a1f1b5c531..45e331fafee1 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
@@ -3539,6 +3539,11 @@ int rvu_mbox_handler_nix_set_rx_mode(struct rvu *rvu, struct nix_rx_mode *req,
 		return 0;
 	}
 
+	/* untrusted VF can't configure promisc/allmulti */
+	if (is_vf(pcifunc) && !test_bit(PF_SET_VF_TRUSTED, &pfvf->flags) &&
+	    (promisc || allmulti))
+		return 0;
+
 	err = nix_get_nixlf(rvu, pcifunc, &nixlf, NULL);
 	if (err)
 		return err;
-- 
2.31.1

