From dac31423d1b5df597457be3694501d0ccb27cbea Mon Sep 17 00:00:00 2001
From: Hariprasad Kelam <hkelam@marvell.com>
Date: Mon, 17 Feb 2020 15:27:26 +0530
Subject: [PATCH 0368/1921] octeontx2-pf: Remove unnecessary mbox request in
 unbind

If interface is already in default mode then sending
mbox to reset HW config back to default mode is not
necessary. This patch fixes the same.

minor changes
* Remove reinstalling vf vlan config rule upon mac
  address change as AF takes care of this case

Change-Id: I341cbf40433f9e92124efa8ed6c21e80349c772d
Signed-off-by: Hariprasad Kelam <hkelam@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/23594
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.h       |  3 ++
 .../marvell/octeontx2/nic/otx2_ethtool.c      | 29 +++++++++++++----
 .../ethernet/marvell/octeontx2/nic/otx2_pf.c  | 32 ++-----------------
 3 files changed, 28 insertions(+), 36 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index f5c3d6fc8692..d4899d9930f8 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -303,10 +303,13 @@ struct otx2_nic {
 #define OTX2_PRIV_FLAG_PAM4			BIT(0)
 #define OTX2_PRIV_FLAG_EDSA_HDR			BIT(1)
 #define OTX2_PRIV_FLAG_HIGIG2_HDR		BIT(2)
+#define OTX2_PRIV_FLAG_DEF_MODE			BIT(3)
 #define OTX2_IS_EDSA_ENABLED(flags)		((flags) &              \
 						 OTX2_PRIV_FLAG_EDSA_HDR)
 #define OTX2_IS_HIGIG2_ENABLED(flags)		((flags) &              \
 						 OTX2_PRIV_FLAG_HIGIG2_HDR)
+#define OTX2_IS_DEF_MODE_ENABLED(flags)		((flags) &              \
+						 OTX2_PRIV_FLAG_DEF_MODE)
 	u32		        ethtool_flags;
 
 	/* extended DSA and EDSA  header lengths are 8/16 bytes
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
index d8a2b2c36d14..7f51893b14d7 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
@@ -1341,32 +1341,42 @@ static int otx2_set_phy_mod_type(struct net_device *netdev, bool enable)
 int otx2_set_npc_parse_mode(struct otx2_nic *pfvf, bool unbind)
 {
 	struct npc_set_pkind *req;
+	u32 interface_mode = 0;
 	int rc = -EAGAIN;
 
+	if (OTX2_IS_DEF_MODE_ENABLED(pfvf->ethtool_flags))
+		return 0;
+
 	otx2_mbox_lock(&pfvf->mbox);
 	req = otx2_mbox_alloc_msg_npc_set_pkind(&pfvf->mbox);
 	if (!req)
 		goto end;
 
-	if (unbind)
+	if (unbind) {
 		req->mode = OTX2_PRIV_FLAGS_DEFAULT;
-	else if (OTX2_IS_HIGIG2_ENABLED(pfvf->ethtool_flags))
+		interface_mode = OTX2_PRIV_FLAG_DEF_MODE;
+	} else if (OTX2_IS_HIGIG2_ENABLED(pfvf->ethtool_flags)) {
 		req->mode = OTX2_PRIV_FLAGS_HIGIG;
-	else if (OTX2_IS_EDSA_ENABLED(pfvf->ethtool_flags))
+		interface_mode = OTX2_PRIV_FLAG_HIGIG2_HDR;
+	} else if (OTX2_IS_EDSA_ENABLED(pfvf->ethtool_flags))   {
 		req->mode = OTX2_PRIV_FLAGS_EDSA;
-	else
+		interface_mode = OTX2_PRIV_FLAG_EDSA_HDR;
+	} else {
 		req->mode = OTX2_PRIV_FLAGS_DEFAULT;
+		interface_mode = OTX2_PRIV_FLAG_DEF_MODE;
+	}
 
 	req->dir  = PKIND_RX;
 
 	/* req AF to change pkind on both the dir */
-	if (req->mode == OTX2_PRIV_FLAGS_HIGIG || unbind)
+	if (req->mode == OTX2_PRIV_FLAGS_HIGIG ||
+	    req->mode == OTX2_PRIV_FLAGS_DEFAULT)
 		req->dir |= PKIND_TX;
 
 	if (!otx2_sync_mbox_msg(&pfvf->mbox))
 		rc = 0;
 	else
-		pfvf->ethtool_flags &= ~req->mode;
+		pfvf->ethtool_flags &= ~interface_mode;
 end:
 	otx2_mbox_unlock(&pfvf->mbox);
 	return rc;
@@ -1380,6 +1390,7 @@ static int otx2_enable_addl_header(struct net_device *netdev, int bitpos,
 
 	if (enable) {
 		pfvf->ethtool_flags |= BIT(bitpos);
+		pfvf->ethtool_flags &= ~OTX2_PRIV_FLAG_DEF_MODE;
 	} else {
 		pfvf->ethtool_flags &= ~BIT(bitpos);
 		len = 0;
@@ -1400,9 +1411,13 @@ static int otx2_enable_addl_header(struct net_device *netdev, int bitpos,
 		pfvf->xtra_hdr = 0;
 
 	/* NPC parse mode will be updated here */
-	if (if_up)
+	if (if_up) {
 		otx2_open(netdev);
 
+		if (!enable)
+			pfvf->ethtool_flags |= OTX2_PRIV_FLAG_DEF_MODE;
+	}
+
 	return 0;
 }
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index 2f16be473621..ee29dcc48a7d 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -1964,10 +1964,7 @@ static int otx2_ioctl(struct net_device *netdev, struct ifreq *req, int cmd)
 
 static int otx2_do_set_vf_mac(struct otx2_nic *pf, int vf, const u8 *mac)
 {
-	struct otx2_flow_config *flow_cfg = pf->flow_cfg;
 	struct npc_install_flow_req *req;
-	struct otx2_vf_config *config;
-	u32 idx;
 	int err;
 
 	otx2_mbox_lock(&pf->mbox);
@@ -1987,32 +1984,6 @@ static int otx2_do_set_vf_mac(struct otx2_nic *pf, int vf, const u8 *mac)
 	req->vf = vf + 1;
 	req->op = NIX_RX_ACTION_DEFAULT;
 
-	err = otx2_sync_mbox_msg(&pf->mbox);
-	if (err)
-		goto out;
-
-	/* update vf vlan rx flow entry */
-	req = otx2_mbox_alloc_msg_npc_install_flow(&pf->mbox);
-	if (!req) {
-		err = -ENOMEM;
-		goto out;
-	}
-
-	idx = ((vf * OTX2_PER_VF_VLAN_FLOWS) + OTX2_VF_VLAN_RX_INDEX);
-	req->entry = flow_cfg->entry[flow_cfg->vf_vlan_offset + idx];
-	config = &pf->vf_configs[vf];
-	req->packet.vlan_tci = htons(config->vlan);
-	req->mask.vlan_tci = htons(VLAN_VID_MASK);
-	/* af fills the destination mac addr */
-	u64_to_ether_addr(0xffffffffffffull, req->mask.dmac);
-	req->features = BIT_ULL(NPC_OUTER_VID) | BIT_ULL(NPC_DMAC);
-	req->channel = pf->hw.rx_chan_base;
-	req->intf = NIX_INTF_RX;
-	req->vf = vf + 1;
-	req->op = NIX_RX_ACTION_DEFAULT;
-	req->vtag0_valid = true;
-	req->vtag0_type = NIX_AF_LFX_RX_VTAG_TYPE7;
-
 	err = otx2_sync_mbox_msg(&pf->mbox);
 out:
 	otx2_mbox_unlock(&pf->mbox);
@@ -2483,6 +2454,9 @@ static int otx2_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	pf->flags |= OTX2_FLAG_RX_PAUSE_ENABLED;
 	pf->flags |= OTX2_FLAG_TX_PAUSE_ENABLED;
 
+	/* Set interface mode as Default */
+	pf->ethtool_flags |= OTX2_PRIV_FLAG_DEF_MODE;
+
 	return 0;
 
 err_unreg_netdev:
-- 
2.31.1

