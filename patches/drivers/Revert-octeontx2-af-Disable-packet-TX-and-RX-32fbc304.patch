From e38e11334bf4991247a5be5d8db5f13514d6ae76 Mon Sep 17 00:00:00 2001
From: Subbaraya Sundeep <sbhatta@marvell.com>
Date: Sat, 19 Jun 2021 15:48:29 +0530
Subject: [PATCH 1609/1921] Revert "octeontx2-af: Disable packet TX and RX"

CGM LMAC packet TX and RX are disabled after
bringing up LMAC ports during AF driver
initialization. This was done because packets
were received by CGX and till NPC though
interface is not up and running. LMAC's packet
TX and RX are only enabled in the interface
bring up sequence. But there exists a race condition
when an interface is brought up early while kernel
booting (like NFS boot or setting ip kernel
commandline parameter) so that packet TX and RX
are enabled and at later stage LMAC port
up work handler is invoked and disables TX and RX.
Hence after kernel boots interface ends up
in a case where interface shows <UP, RUNNING>
but packet I/O does not work. This patch reverts
the commit "42f95cba4483" to fix the problem.
Reverting this will cause rx_miss_stats(drops at NPC)
to increment though no interface is up.

Change-Id: If01353f50b13b2539dc5dac9df2a34104e62f613
Signed-off-by: Subbaraya Sundeep <sbhatta@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/54545
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/af/cgx.c | 6 ------
 1 file changed, 6 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/cgx.c b/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
index 551f2085b2ac..a90e48aeaebe 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
@@ -1577,10 +1577,6 @@ static void cgx_lmac_linkup_work(struct work_struct *work)
 		if (err)
 			dev_info(dev, "cgx port %d:%d Link up command failed\n",
 				 cgx->cgx_id, i);
-		/* Disable packet I/O in CGX in case firmware enabled it
-		 * after Link up sequence.
-		 */
-		cgx_lmac_rx_tx_enable(cgx, i, false);
 	}
 }
 
@@ -1752,8 +1748,6 @@ static int cgx_lmac_init(struct cgx *cgx)
 		cgx->lmac_idmap[lmac->lmac_id] = lmac;
 		set_bit(lmac->lmac_id, &cgx->lmac_bmap);
 		cgx->mac_ops->mac_pause_frm_config(cgx, lmac->lmac_id, true);
-		/* Disable packet I/O for a sane state */
-		cgx_lmac_rx_tx_enable(cgx, lmac->lmac_id, false);
 	}
 
 	return cgx_lmac_verify_fwi_version(cgx);
-- 
2.31.1

