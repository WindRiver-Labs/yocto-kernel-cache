From b6323d2132573f85039354ec458d2200732d6fa0 Mon Sep 17 00:00:00 2001
From: Bhaskara Budiredla <bbudiredla@marvell.com>
Date: Tue, 26 May 2020 13:34:46 +0530
Subject: [PATCH 0506/1921] arm64: Add workaround for Marvell erratum 38545

On some OcteonTX2 chips, an issue exists wherein when an interrupt
is pending and a second interrupt arrives at the core under certain
stall conditions, a read of interrpt acknowledge register will return
the first interrupt but not acknowledge it. A second read of IAR will
return the first interrupt again, not the second interrupt.

Change-Id: Id5c43ff69b597fe84bc5dccdee807322305c6925
Signed-off-by: Bhaskara Budiredla <bbudiredla@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/29010
Reviewed-by: Andrew Pinski <apinski@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 arch/arm64/Kconfig               | 15 +++++++++++++++
 arch/arm64/include/asm/cpucaps.h |  3 ++-
 arch/arm64/include/asm/cputype.h |  4 ++++
 arch/arm64/kernel/cpu_errata.c   | 24 ++++++++++++++++++++++++
 drivers/irqchip/irq-gic-v3.c     | 17 +++++++++++++++--
 5 files changed, 60 insertions(+), 3 deletions(-)

diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index da4c47420e0b..88adcf3cc2fc 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -637,6 +637,21 @@ config MRVL_ERRATUM_38500
 
 	  If unsure, say Y.
 
+config MRVL_ERRATUM_38545
+	bool "Marvell erratum 38545"
+	default y
+	help
+	  On some OcteonTX2 chips, an issue exists wherein when an interrupt
+	  is pending and a second interrupt arrives at the core under certain
+	  stall conditions, a read of interrpt acknowledge register will return
+	  the first interrupt but not acknowledge it. A second read of IAR will
+	  return the first interrupt again, not the second interrupt. To
+	  workaround, software checks the active interrupt priorities before
+	  and after PE acknowledges interrupt in sw. The PE ignores interrupt
+	  if there was no change in acitive priorities.
+
+	  If unsure, say Y.
+
 config QCOM_FALKOR_ERRATUM_1003
 	bool "Falkor E1003: Incorrect translation due to ASID change"
 	default y
diff --git a/arch/arm64/include/asm/cpucaps.h b/arch/arm64/include/asm/cpucaps.h
index d77dd06d5269..3fb98f08c603 100644
--- a/arch/arm64/include/asm/cpucaps.h
+++ b/arch/arm64/include/asm/cpucaps.h
@@ -57,7 +57,8 @@
 #define ARM64_WORKAROUND_1542419		47
 #define ARM64_WORKAROUND_CAVIUM_36890		48
 #define ARM64_WORKAROUND_MRVL_38500		49
+#define ARM64_WORKAROUND_MRVL_38545		50
 
-#define ARM64_NCAPS				50
+#define ARM64_NCAPS				51
 
 #endif /* __ASM_CPUCAPS_H */
diff --git a/arch/arm64/include/asm/cputype.h b/arch/arm64/include/asm/cputype.h
index 590f885341d3..725498330e2f 100644
--- a/arch/arm64/include/asm/cputype.h
+++ b/arch/arm64/include/asm/cputype.h
@@ -82,6 +82,8 @@
 #define MRVL_CPU_PART_OCTEONTX2_98XX	0x0B1
 #define MRVL_CPU_PART_OCTEONTX2_96XX	0x0B2
 #define MRVL_CPU_PART_OCTEONTX2_95XX	0x0B3
+#define MRVL_CPU_PART_OCTEONTX2_LOKI	0x0B4
+#define MRVL_CPU_PART_OCTEONTX2_95MM	0x0B5
 
 #define BRCM_CPU_PART_BRAHMA_B53	0x100
 #define BRCM_CPU_PART_VULCAN		0x516
@@ -113,6 +115,8 @@
 #define MIDR_MRVL_OCTEONTX2_98XX MIDR_CPU_MODEL(ARM_CPU_IMP_CAVIUM, MRVL_CPU_PART_OCTEONTX2_98XX)
 #define MIDR_MRVL_OCTEONTX2_96XX MIDR_CPU_MODEL(ARM_CPU_IMP_CAVIUM, MRVL_CPU_PART_OCTEONTX2_96XX)
 #define MIDR_MRVL_OCTEONTX2_95XX MIDR_CPU_MODEL(ARM_CPU_IMP_CAVIUM, MRVL_CPU_PART_OCTEONTX2_95XX)
+#define MIDR_MRVL_OCTEONTX2_LOKI MIDR_CPU_MODEL(ARM_CPU_IMP_CAVIUM, MRVL_CPU_PART_OCTEONTX2_LOKI)
+#define MIDR_MRVL_OCTEONTX2_95MM MIDR_CPU_MODEL(ARM_CPU_IMP_CAVIUM, MRVL_CPU_PART_OCTEONTX2_95MM)
 #define MIDR_BRAHMA_B53 MIDR_CPU_MODEL(ARM_CPU_IMP_BRCM, BRCM_CPU_PART_BRAHMA_B53)
 #define MIDR_BRCM_VULCAN MIDR_CPU_MODEL(ARM_CPU_IMP_BRCM, BRCM_CPU_PART_VULCAN)
 #define MIDR_QCOM_FALKOR_V1 MIDR_CPU_MODEL(ARM_CPU_IMP_QCOM, QCOM_CPU_PART_FALKOR_V1)
diff --git a/arch/arm64/kernel/cpu_errata.c b/arch/arm64/kernel/cpu_errata.c
index b7c416ce5b39..be550622c4e2 100644
--- a/arch/arm64/kernel/cpu_errata.c
+++ b/arch/arm64/kernel/cpu_errata.c
@@ -812,6 +812,23 @@ static const struct midr_range marvell_erratum_38500_cpus[] = {
 	MIDR_ALL_VERSIONS(MIDR_THUNDERX_83XX),
 };
 
+static const struct midr_range marvell_erratum_38545_cpus[] = {
+	/* Cavium ThunderX, T81 all passes */
+	MIDR_ALL_VERSIONS(MIDR_THUNDERX_81XX),
+	/* Cavium ThunderX, T83 all passes */
+	MIDR_ALL_VERSIONS(MIDR_THUNDERX_83XX),
+	/* Marvell OcteonTX 2, 95xx all passes */
+	MIDR_ALL_VERSIONS(MIDR_MRVL_OCTEONTX2_95XX),
+	/* Marvell OcteonTX 2, 95MM all passes */
+	MIDR_ALL_VERSIONS(MIDR_MRVL_OCTEONTX2_95MM),
+	/* Marvell OcteonTX 2, LOKI all passes */
+	MIDR_ALL_VERSIONS(MIDR_MRVL_OCTEONTX2_LOKI),
+	/* Marvell OcteonTX 2, 96xx all passes */
+	MIDR_ALL_VERSIONS(MIDR_MRVL_OCTEONTX2_96XX),
+	/* Marvell OcteonTX 2, 98xx all passes */
+	MIDR_ALL_VERSIONS(MIDR_MRVL_OCTEONTX2_98XX),
+};
+
 const struct arm64_cpu_capabilities arm64_errata[] = {
 #ifdef CONFIG_ARM64_WORKAROUND_CLEAN_CACHE
 	{
@@ -991,6 +1008,13 @@ const struct arm64_cpu_capabilities arm64_errata[] = {
 		.capability = ARM64_WORKAROUND_MRVL_38500,
 		ERRATA_MIDR_RANGE_LIST(marvell_erratum_38500_cpus),
 	},
+#endif
+#ifdef CONFIG_MRVL_ERRATUM_38545
+	{
+		.desc = "Marvell erratum 38545",
+		.capability = ARM64_WORKAROUND_MRVL_38545,
+		ERRATA_MIDR_RANGE_LIST(marvell_erratum_38545_cpus),
+	},
 #endif
 	{
 	}
diff --git a/drivers/irqchip/irq-gic-v3.c b/drivers/irqchip/irq-gic-v3.c
index c09c1eea3319..d1afd2d0bfea 100644
--- a/drivers/irqchip/irq-gic-v3.c
+++ b/drivers/irqchip/irq-gic-v3.c
@@ -149,10 +149,23 @@ static void gic_redist_wait_for_rwp(void)
 
 static u64 __maybe_unused gic_read_iar(void)
 {
+	u32 irqnr;
+	u32 apr;
+	bool cc_enabled;
+
+	cc_enabled = cpus_have_const_cap(ARM64_WORKAROUND_MRVL_38545);
+	if (cc_enabled)
+		apr = read_sysreg_s(SYS_ICC_AP1R0_EL1);
+
 	if (cpus_have_const_cap(ARM64_WORKAROUND_CAVIUM_23154))
-		return gic_read_iar_cavium_thunderx();
+		irqnr = gic_read_iar_cavium_thunderx();
 	else
-		return gic_read_iar_common();
+		irqnr = gic_read_iar_common();
+
+	if (!cc_enabled || apr != read_sysreg_s(SYS_ICC_AP1R0_EL1))
+		return irqnr;
+
+	return ICC_IAR1_EL1_SPURIOUS;
 }
 #endif
 
-- 
2.31.1

