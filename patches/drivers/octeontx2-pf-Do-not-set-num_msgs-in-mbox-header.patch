From 7a9b29f0c660f36e9f434eae65d7a8e89cdd4cc3 Mon Sep 17 00:00:00 2001
From: Subbaraya Sundeep <sbhatta@marvell.com>
Date: Thu, 5 Dec 2019 18:04:30 +0530
Subject: [PATCH 426/767] octeontx2-pf: Do not set num_msgs in mbox header

commit 8e7f7faf9d90a84283093e02b90a9e9a12b061ae from
git@git.assembla.com:cavium/WindRiver.linux.git

A single interrupt line from VF to PF is used by
VF to send messages to PF and for replying to UP messages
sent by PF. Hence num_msgs in mbox header is cleared
explicitly in PF interrupt handler to avoid queuing a
work twice for an event. The same num_msgs which was
cleared in interrupt handler was set again in work
queue handler by mistake. This patch fixes it.
Also
 - clearing interrupt in work queue handlers is not
   necessary hence removed it.
 - checking status in message response is not needed
   hence removed it.

Change-Id: I1875d37816b61b4874eea1c7175c63dfea71bcb1
Signed-off-by: Subbaraya Sundeep <sbhatta@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/20142
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/nic/otx2_pf.c | 16 ++--------------
 .../net/ethernet/marvell/octeontx2/nic/otx2_vf.c |  4 ----
 2 files changed, 2 insertions(+), 18 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index abd6c08c7c2f..0698e2a76434 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -102,7 +102,6 @@ static void otx2_flr_handler(struct work_struct *work)
 	struct flr_work *flrwork = container_of(work, struct flr_work, work);
 	struct otx2_nic *pf = flrwork->pf;
 	struct msg_req *req;
-	struct msg_rsp *rsp;
 	int vf, reg = 0;
 
 	vf = flrwork - pf->flr_wrk;
@@ -122,11 +121,6 @@ static void otx2_flr_handler(struct work_struct *work)
 			reg = 1;
 			vf = vf - 64;
 		}
-		rsp = (struct  msg_rsp *)
-		      otx2_mbox_get_rsp(&pf->mbox.mbox, 0, &req->hdr);
-		otx2_mbox_unlock(&pf->mbox);
-		if (rsp->hdr.rc)
-			return;
 		/* clear transcation pending bit */
 		otx2_write64(pf, RVU_PF_VFTRPENDX(reg), BIT_ULL(vf));
 		otx2_write64(pf, RVU_PF_VFFLR_INT_ENA_W1SX(reg), BIT_ULL(vf));
@@ -377,9 +371,7 @@ static int otx2_forward_vf_mbox_msgs(struct otx2_nic *pf,
 		src_mdev = &src_mbox->dev[vf];
 		mbox_hdr = src_mbox->hwbase +
 				src_mbox->rx_start + (vf * MBOX_SIZE);
-		req_hdr = (struct mbox_hdr *)(src_mdev->mbase +
-					      src_mbox->rx_start);
-		req_hdr->num_msgs = num_msgs;
+
 		dst_mbox = &pf->mbox;
 		dst_size = dst_mbox->mbox.tx_size -
 				ALIGN(sizeof(*mbox_hdr), MBOX_MSG_ALIGN);
@@ -392,7 +384,7 @@ static int otx2_forward_vf_mbox_msgs(struct otx2_nic *pf,
 		otx2_mbox_lock(&pf->mbox);
 		dst_mdev->mbase = src_mdev->mbase;
 		dst_mdev->msg_size = mbox_hdr->msg_size;
-		dst_mdev->num_msgs = mbox_hdr->num_msgs;
+		dst_mdev->num_msgs = num_msgs;
 		err = otx2_sync_mbox_msg(dst_mbox);
 		if (err) {
 			dev_warn(pf->dev,
@@ -829,10 +821,6 @@ static void otx2_pfaf_mbox_handler(struct work_struct *work)
 	}
 
 	otx2_mbox_reset(mbox, 0);
-
-	/* Clear the IRQ */
-	smp_wmb();
-	otx2_write64(pf, RVU_PF_INT, BIT_ULL(0));
 }
 
 static void otx2_handle_link_event(struct otx2_nic *pf)
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
index 734b3a188a45..218ce0382adb 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
@@ -132,10 +132,6 @@ static void otx2vf_vfaf_mbox_handler(struct work_struct *work)
 	}
 
 	otx2_mbox_reset(mbox, 0);
-
-	/* Clear the IRQ */
-	smp_wmb();
-	otx2_write64(af_mbox->pfvf, RVU_VF_INT, BIT_ULL(0));
 }
 
 static int otx2vf_process_mbox_msg_up(struct otx2_nic *vf,
-- 
2.31.1

