From cf0d18b9d795760cb2efc8c8aac987ccc4e1710c Mon Sep 17 00:00:00 2001
From: Andrei Simion <andreis@xilinx.com>
Date: Tue, 7 Feb 2012 18:07:43 -0800
Subject: [PATCH 0724/1852] Xilinx: ARM: Devcfg and SLCR drivers updated to
 support reconfiguration.

commit b8fb89c086b5477e621273e2ed9229ab87723678 from
https://github.com/Xilinx/linux-xlnx.git

The devcfg and SLCR drivers have been updated to allow (multiple)
reconfigurations of the Programmable Logic.

The flow of reconfiguration is as follows:

1. (Preload): Called in the devcfg driver's open function via an SLCR
function exposed from the SLCR driver.

- Put the FPGA outputs (PS->PL) into reset (disable AXI interface).
- Disable the level shifters.
- Enable the output level shifters.

2. (Reset PROG_B - rising edge): Called in the devcfg driver's open function.

- Set PCFG_PROG_B to 1.
- Set PCFG_PROG_B to 0.
- Wait for PCFG_INIT_B to go low.
- Set PCFG_PROG_B to 1.
- Wait for PCFG_INIT_B to go high
- Clear the PCFG_DONE interrupt.

3. (Download the bitstream): The devcfg write function uses multiple DMA
transfers to send the bitstream to the PCAP.

4. (Postload): Called in the devcfg driver's release function via an SLCR
function exposed from the SLCR driver.

- Enable the input level shifters.
- Take the FPGA outputs (PS->PL) out of reset (enable AXI interface).

The user initiates a reconfiguration from Linux by redirecting a *byte-swapped
binary of the* bitstream into the devcfg device file:
	cat system_bs.bin > /dev/xdevcfg

Signed-off-by: Andrei Simion <andreis@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 arch/arm/mach-zynq/common.h |  3 +++
 arch/arm/mach-zynq/slcr.c   | 30 ++++++++++++++++++++++++++++++
 2 files changed, 33 insertions(+)

diff --git a/arch/arm/mach-zynq/common.h b/arch/arm/mach-zynq/common.h
index 2a45ec80491b..db82c106e319 100644
--- a/arch/arm/mach-zynq/common.h
+++ b/arch/arm/mach-zynq/common.h
@@ -29,6 +29,9 @@ extern int zynq_cpun_start(u32 address, int cpu);
 extern const struct smp_operations zynq_smp_ops;
 #endif
 
+extern void zynq_slcr_init_preload_fpga(void);
+extern void zynq_slcr_init_postload_fpga(void);
+
 extern void __iomem *zynq_scu_base;
 
 void zynq_pm_late_init(void);
diff --git a/arch/arm/mach-zynq/slcr.c b/arch/arm/mach-zynq/slcr.c
index 5507d30d1b4f..b4cdef65162c 100644
--- a/arch/arm/mach-zynq/slcr.c
+++ b/arch/arm/mach-zynq/slcr.c
@@ -16,6 +16,7 @@
 /* register offsets */
 #define SLCR_UNLOCK_OFFSET		0x8   /* SCLR unlock register */
 #define SLCR_PS_RST_CTRL_OFFSET		0x200 /* PS Software Reset Control */
+#define SLCR_FPGA_RST_CTRL_OFFSET	0x240 /* FPGA Software Reset Control */
 #define SLCR_A9_CPU_RST_CTRL_OFFSET	0x244 /* CPU Software Reset Control */
 #define SLCR_REBOOT_STATUS_OFFSET	0x258 /* PS Reboot Status */
 #define SLCR_PSS_IDCODE			0x530 /* PS IDCODE */
@@ -130,6 +131,35 @@ u32 zynq_slcr_get_ocm_config(void)
 	return ret;
 }
 
+/**
+ * zynq_slcr_init_preload_fpga - Disable communication from the PL to PS.
+ */
+void zynq_slcr_init_preload_fpga(void)
+{
+	/* Assert FPGA top level output resets */
+	zynq_slcr_write(0xF, SLCR_FPGA_RST_CTRL_OFFSET);
+
+	/* Disable level shifters */
+	zynq_slcr_write(0, SLCR_LVL_SHFTR_EN_OFFSET);
+
+	/* Enable output level shifters */
+	zynq_slcr_write(0xA, SLCR_LVL_SHFTR_EN_OFFSET);
+}
+EXPORT_SYMBOL(zynq_slcr_init_preload_fpga);
+
+/**
+ * zynq_slcr_init_postload_fpga - Re-enable communication from the PL to PS.
+ */
+void zynq_slcr_init_postload_fpga(void)
+{
+	/* Enable level shifters */
+	zynq_slcr_write(0xf, SLCR_LVL_SHFTR_EN_OFFSET);
+
+	/* Deassert AXI interface resets */
+	zynq_slcr_write(0, SLCR_FPGA_RST_CTRL_OFFSET);
+}
+EXPORT_SYMBOL(zynq_slcr_init_postload_fpga);
+
 /**
  * zynq_slcr_cpu_start - Start cpu
  * @cpu:	cpu number
-- 
2.31.1

