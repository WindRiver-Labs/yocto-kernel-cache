From cb99d01fd0a7fea7128d941eade4e6e0f9d41ae3 Mon Sep 17 00:00:00 2001
From: Srujana Challa <schalla@marvell.com>
Date: Mon, 29 Jun 2020 19:19:27 +0530
Subject: [PATCH 0523/1921] drivers:cpt - add support for CPT1 in VF driver

Adds support for CPT1 in VF driver. User may specify
the cpt block number(0 or 1, default 0) to which
CPT instructions may submit, through module
parameter to the VF

Change-Id: I95c134e1881f80f9c4a5fa8d4efcaed35a0916a3
Signed-off-by: Srujana Challa <schalla@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/31174
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Mahipal Challa <mchalla@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../marvell/octeontx2/otx2_cpt_mbox_common.c  |  1 +
 drivers/crypto/marvell/octeontx2/otx2_cptlf.h | 22 ++++----
 .../marvell/octeontx2/otx2_cptlf_main.c       | 51 +++++++++++--------
 .../marvell/octeontx2/otx2_cptpf_mbox.c       |  5 +-
 .../marvell/octeontx2/otx2_cptpf_ucode.c      |  1 +
 .../marvell/octeontx2/otx2_cptvf_main.c       |  6 +++
 .../marvell/octeontx2/otx2_cptvf_mbox.c       |  4 ++
 7 files changed, 58 insertions(+), 32 deletions(-)

diff --git a/drivers/crypto/marvell/octeontx2/otx2_cpt_mbox_common.c b/drivers/crypto/marvell/octeontx2/otx2_cpt_mbox_common.c
index 1c8cd36cd2e7..838a3f66e14a 100644
--- a/drivers/crypto/marvell/octeontx2/otx2_cpt_mbox_common.c
+++ b/drivers/crypto/marvell/octeontx2/otx2_cpt_mbox_common.c
@@ -166,6 +166,7 @@ int otx2_cpt_attach_rscrs_msg(struct pci_dev *pdev)
 	req->hdr.pcifunc = OTX2_CPT_RVU_PFFUNC(get_pf_id(pdev),
 					       get_vf_id(pdev));
 	req->cptlfs = lfs->lfs_num;
+	req->cpt_blkaddr = lfs->blkaddr;
 	ret = otx2_cpt_send_mbox_msg(pdev);
 	if (ret)
 		return ret;
diff --git a/drivers/crypto/marvell/octeontx2/otx2_cptlf.h b/drivers/crypto/marvell/octeontx2/otx2_cptlf.h
index a5f8d236c707..fd1e7dc112d2 100644
--- a/drivers/crypto/marvell/octeontx2/otx2_cptlf.h
+++ b/drivers/crypto/marvell/octeontx2/otx2_cptlf.h
@@ -104,6 +104,7 @@ struct otx2_cptlfs_info {
 	u8 are_lfs_attached;	/* Whether CPT LFs are attached */
 	u8 lfs_num;		/* Number of CPT LFs */
 	u8 kcrypto_limits;      /* Kernel crypto limits */
+	u8 blkaddr;             /* BLKADDR_CPT0/BLKADDR_CPT1 */
 };
 
 static inline void otx2_cpt_free_instruction_queues(
@@ -175,7 +176,7 @@ static inline void otx2_cptlf_set_iqueues_base_addr(
 
 	for (slot = 0; slot < lfs->lfs_num; slot++) {
 		lf_q_base.u = lfs->lf[slot].iqueue.dma_addr;
-		otx2_cpt_write64(lfs->reg_base, BLKADDR_CPT0, slot,
+		otx2_cpt_write64(lfs->reg_base, lfs->blkaddr, slot,
 				 OTX2_CPT_LF_Q_BASE, lf_q_base.u);
 	}
 }
@@ -185,7 +186,7 @@ static inline void otx2_cptlf_do_set_iqueue_size(struct otx2_cptlf_info *lf)
 	union otx2_cptx_lf_q_size lf_q_size = { .u = 0x0 };
 
 	lf_q_size.s.size_div40 = OTX2_CPT_SIZE_DIV40;
-	otx2_cpt_write64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
+	otx2_cpt_write64(lf->lfs->reg_base, lf->lfs->blkaddr, lf->slot,
 			 OTX2_CPT_LF_Q_SIZE, lf_q_size.u);
 }
 
@@ -201,15 +202,16 @@ static inline void otx2_cptlf_do_disable_iqueue(struct otx2_cptlf_info *lf)
 {
 	union otx2_cptx_lf_ctl lf_ctl = { .u = 0x0 };
 	union otx2_cptx_lf_inprog lf_inprog;
+	u8 blkaddr = lf->lfs->blkaddr;
 	int timeout = 20;
 
 	/* Disable instructions enqueuing */
-	otx2_cpt_write64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
+	otx2_cpt_write64(lf->lfs->reg_base, blkaddr, lf->slot,
 			 OTX2_CPT_LF_CTL, lf_ctl.u);
 
 	/* Wait for instruction queue to become empty */
 	do {
-		lf_inprog.u = otx2_cpt_read64(lf->lfs->reg_base, BLKADDR_CPT0,
+		lf_inprog.u = otx2_cpt_read64(lf->lfs->reg_base, blkaddr,
 					      lf->slot, OTX2_CPT_LF_INPROG);
 		if (!lf_inprog.s.inflight)
 			break;
@@ -228,7 +230,7 @@ static inline void otx2_cptlf_do_disable_iqueue(struct otx2_cptlf_info *lf)
 	 * the queue should be empty at this point
 	 */
 	lf_inprog.s.eena = 0x0;
-	otx2_cpt_write64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
+	otx2_cpt_write64(lf->lfs->reg_base, blkaddr, lf->slot,
 			 OTX2_CPT_LF_INPROG, lf_inprog.u);
 }
 
@@ -243,14 +245,15 @@ static inline void otx2_cptlf_disable_iqueues(struct otx2_cptlfs_info *lfs)
 static inline void otx2_cptlf_set_iqueue_enq(struct otx2_cptlf_info *lf,
 					     bool enable)
 {
+	u8 blkaddr = lf->lfs->blkaddr;
 	union otx2_cptx_lf_ctl lf_ctl;
 
-	lf_ctl.u = otx2_cpt_read64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
+	lf_ctl.u = otx2_cpt_read64(lf->lfs->reg_base, blkaddr, lf->slot,
 				   OTX2_CPT_LF_CTL);
 
 	/* Set iqueue's enqueuing */
 	lf_ctl.s.ena = enable ? 0x1 : 0x0;
-	otx2_cpt_write64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
+	otx2_cpt_write64(lf->lfs->reg_base, blkaddr, lf->slot,
 			 OTX2_CPT_LF_CTL, lf_ctl.u);
 }
 
@@ -263,13 +266,14 @@ static inline void otx2_cptlf_set_iqueue_exec(struct otx2_cptlf_info *lf,
 					      bool enable)
 {
 	union otx2_cptx_lf_inprog lf_inprog;
+	u8 blkaddr = lf->lfs->blkaddr;
 
-	lf_inprog.u = otx2_cpt_read64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
+	lf_inprog.u = otx2_cpt_read64(lf->lfs->reg_base, blkaddr, lf->slot,
 				      OTX2_CPT_LF_INPROG);
 
 	/* Set iqueue's execution */
 	lf_inprog.s.eena = enable ? 0x1 : 0x0;
-	otx2_cpt_write64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
+	otx2_cpt_write64(lf->lfs->reg_base, blkaddr, lf->slot,
 			 OTX2_CPT_LF_INPROG, lf_inprog.u);
 }
 
diff --git a/drivers/crypto/marvell/octeontx2/otx2_cptlf_main.c b/drivers/crypto/marvell/octeontx2/otx2_cptlf_main.c
index 3cda537825bc..661e1f4704a2 100644
--- a/drivers/crypto/marvell/octeontx2/otx2_cptlf_main.c
+++ b/drivers/crypto/marvell/octeontx2/otx2_cptlf_main.c
@@ -26,8 +26,8 @@ static int cptlf_get_done_time_wait(struct otx2_cptlf_info *lf)
 {
 	union otx2_cptx_lf_done_wait done_wait;
 
-	done_wait.u = otx2_cpt_read64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
-				      OTX2_CPT_LF_DONE_WAIT);
+	done_wait.u = otx2_cpt_read64(lf->lfs->reg_base, lf->lfs->blkaddr,
+				      lf->slot, OTX2_CPT_LF_DONE_WAIT);
 	return done_wait.s.time_wait;
 }
 
@@ -35,11 +35,12 @@ static void cptlf_do_set_done_time_wait(struct otx2_cptlf_info *lf,
 					int time_wait)
 {
 	union otx2_cptx_lf_done_wait done_wait;
+	u8 blkaddr = lf->lfs->blkaddr;
 
-	done_wait.u = otx2_cpt_read64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
+	done_wait.u = otx2_cpt_read64(lf->lfs->reg_base, blkaddr, lf->slot,
 				      OTX2_CPT_LF_DONE_WAIT);
 	done_wait.s.time_wait = time_wait;
-	otx2_cpt_write64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
+	otx2_cpt_write64(lf->lfs->reg_base, blkaddr, lf->slot,
 			 OTX2_CPT_LF_DONE_WAIT, done_wait.u);
 }
 
@@ -47,19 +48,20 @@ static int cptlf_get_done_num_wait(struct otx2_cptlf_info *lf)
 {
 	union otx2_cptx_lf_done_wait done_wait;
 
-	done_wait.u = otx2_cpt_read64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
-				      OTX2_CPT_LF_DONE_WAIT);
+	done_wait.u = otx2_cpt_read64(lf->lfs->reg_base, lf->lfs->blkaddr,
+				      lf->slot, OTX2_CPT_LF_DONE_WAIT);
 	return done_wait.s.num_wait;
 }
 
 static void cptlf_do_set_done_num_wait(struct otx2_cptlf_info *lf, int num_wait)
 {
 	union otx2_cptx_lf_done_wait done_wait;
+	u8 blkaddr = lf->lfs->blkaddr;
 
-	done_wait.u = otx2_cpt_read64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
+	done_wait.u = otx2_cpt_read64(lf->lfs->reg_base, blkaddr, lf->slot,
 				      OTX2_CPT_LF_DONE_WAIT);
 	done_wait.s.num_wait = num_wait;
-	otx2_cpt_write64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
+	otx2_cpt_write64(lf->lfs->reg_base, blkaddr, lf->slot,
 			 OTX2_CPT_LF_DONE_WAIT, done_wait.u);
 }
 
@@ -84,8 +86,8 @@ static int cptlf_get_inflight(struct otx2_cptlf_info *lf)
 {
 	union otx2_cptx_lf_inprog lf_inprog;
 
-	lf_inprog.u = otx2_cpt_read64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
-				      OTX2_CPT_LF_INPROG);
+	lf_inprog.u = otx2_cpt_read64(lf->lfs->reg_base, lf->lfs->blkaddr,
+				      lf->slot, OTX2_CPT_LF_INPROG);
 
 	return lf_inprog.s.inflight;
 }
@@ -214,7 +216,7 @@ static void cptlf_set_misc_intrs(struct otx2_cptlfs_info *lfs, u8 enable)
 	irq_misc.s.nwrp = 0x1;
 
 	for (slot = 0; slot < lfs->lfs_num; slot++)
-		otx2_cpt_write64(lfs->reg_base, BLKADDR_CPT0, slot, reg,
+		otx2_cpt_write64(lfs->reg_base, lfs->blkaddr, slot, reg,
 				 irq_misc.u);
 }
 
@@ -233,7 +235,7 @@ static void cptlf_enable_done_intr(struct otx2_cptlfs_info *lfs)
 	int slot;
 
 	for (slot = 0; slot < lfs->lfs_num; slot++)
-		otx2_cpt_write64(lfs->reg_base, BLKADDR_CPT0, slot,
+		otx2_cpt_write64(lfs->reg_base, lfs->blkaddr, slot,
 				 OTX2_CPT_LF_DONE_INT_ENA_W1S, 0x1);
 }
 
@@ -242,7 +244,7 @@ static void cptlf_disable_done_intr(struct otx2_cptlfs_info *lfs)
 	int slot;
 
 	for (slot = 0; slot < lfs->lfs_num; slot++)
-		otx2_cpt_write64(lfs->reg_base, BLKADDR_CPT0, slot,
+		otx2_cpt_write64(lfs->reg_base, lfs->blkaddr, slot,
 				 OTX2_CPT_LF_DONE_INT_ENA_W1C, 0x1);
 }
 
@@ -250,8 +252,8 @@ static inline int cptlf_read_done_cnt(struct otx2_cptlf_info *lf)
 {
 	union otx2_cptx_lf_done irq_cnt;
 
-	irq_cnt.u = otx2_cpt_read64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
-				    OTX2_CPT_LF_DONE);
+	irq_cnt.u = otx2_cpt_read64(lf->lfs->reg_base, lf->lfs->blkaddr,
+				    lf->slot, OTX2_CPT_LF_DONE);
 	return irq_cnt.s.done;
 }
 
@@ -259,10 +261,11 @@ static irqreturn_t cptlf_misc_intr_handler(int __always_unused irq, void *arg)
 {
 	union otx2_cptx_lf_misc_int irq_misc, irq_misc_ack;
 	struct otx2_cptlf_info *lf = arg;
+	u8 blkaddr = lf->lfs->blkaddr;
 	struct device *dev;
 
 	dev = &lf->lfs->pdev->dev;
-	irq_misc.u = otx2_cpt_read64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
+	irq_misc.u = otx2_cpt_read64(lf->lfs->reg_base, blkaddr, lf->slot,
 				     OTX2_CPT_LF_MISC_INT);
 	irq_misc_ack.u = 0x0;
 
@@ -295,7 +298,7 @@ static irqreturn_t cptlf_misc_intr_handler(int __always_unused irq, void *arg)
 	}
 
 	/* Acknowledge interrupts */
-	otx2_cpt_write64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
+	otx2_cpt_write64(lf->lfs->reg_base, blkaddr, lf->slot,
 			 OTX2_CPT_LF_MISC_INT, irq_misc_ack.u);
 
 	return IRQ_HANDLED;
@@ -305,18 +308,19 @@ static irqreturn_t cptlf_done_intr_handler(int irq, void *arg)
 {
 	union otx2_cptx_lf_done_wait done_wait;
 	struct otx2_cptlf_info *lf = arg;
+	u8 blkaddr = lf->lfs->blkaddr;
 	int irq_cnt;
 
 	/* Read the number of completed requests */
 	irq_cnt = cptlf_read_done_cnt(lf);
 	if (irq_cnt) {
-		done_wait.u = otx2_cpt_read64(lf->lfs->reg_base, BLKADDR_CPT0,
+		done_wait.u = otx2_cpt_read64(lf->lfs->reg_base, blkaddr,
 					      lf->slot, OTX2_CPT_LF_DONE_WAIT);
 		/* Acknowledge the number of completed requests */
-		otx2_cpt_write64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
+		otx2_cpt_write64(lf->lfs->reg_base, blkaddr, lf->slot,
 				 OTX2_CPT_LF_DONE_ACK, irq_cnt);
 
-		otx2_cpt_write64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
+		otx2_cpt_write64(lf->lfs->reg_base, blkaddr, lf->slot,
 				 OTX2_CPT_LF_DONE_WAIT, done_wait.u);
 		if (unlikely(!lf->wqe)) {
 			dev_err(&lf->lfs->pdev->dev, "No work for LF %d\n",
@@ -837,11 +841,16 @@ static int cptlf_create_sysfs_cfg(struct otx2_cptlfs_info *lfs)
 int otx2_cptvf_lf_init(struct pci_dev *pdev, void *reg_base,
 		       struct otx2_cptlfs_info *lfs, int lfs_num)
 {
+	struct otx2_cptvf_dev *cptvf;
 	int slot, ret;
 
 	lfs->reg_base = reg_base;
 	lfs->lfs_num = lfs_num;
 	lfs->pdev = pdev;
+
+	cptvf = (struct otx2_cptvf_dev *) pci_get_drvdata(pdev);
+	lfs->blkaddr = cptvf->blkaddr;
+
 	for (slot = 0; slot < lfs->lfs_num; slot++) {
 		lfs->lf[slot].lfs = lfs;
 		lfs->lf[slot].slot = slot;
@@ -849,7 +858,7 @@ int otx2_cptvf_lf_init(struct pci_dev *pdev, void *reg_base,
 			OTX2_CPT_RVU_FUNC_ADDR_S(BLKADDR_LMT, slot,
 						 OTX2_CPT_LMT_LF_LMTLINEX(0));
 		lfs->lf[slot].ioreg = lfs->reg_base +
-			OTX2_CPT_RVU_FUNC_ADDR_S(BLKADDR_CPT0, slot,
+			OTX2_CPT_RVU_FUNC_ADDR_S(lfs->blkaddr, slot,
 						 OTX2_CPT_LF_NQX(0));
 	}
 
diff --git a/drivers/crypto/marvell/octeontx2/otx2_cptpf_mbox.c b/drivers/crypto/marvell/octeontx2/otx2_cptpf_mbox.c
index 538b0ab65c5c..dcd635ebfec3 100644
--- a/drivers/crypto/marvell/octeontx2/otx2_cptpf_mbox.c
+++ b/drivers/crypto/marvell/octeontx2/otx2_cptpf_mbox.c
@@ -158,6 +158,7 @@ int otx2_cptpf_lf_init(struct otx2_cptpf_dev *cptpf, u8 eng_grp_mask, int pri,
 	lfs->reg_base = cptpf->reg_base;
 	lfs->lfs_num = lfs_num;
 	lfs->pdev = pdev;
+	lfs->blkaddr = cptpf->blkaddr;
 
 	for (slot = 0; slot < lfs->lfs_num; slot++) {
 		lfs->lf[slot].lfs = lfs;
@@ -166,7 +167,7 @@ int otx2_cptpf_lf_init(struct otx2_cptpf_dev *cptpf, u8 eng_grp_mask, int pri,
 			OTX2_CPT_RVU_FUNC_ADDR_S(BLKADDR_LMT, slot,
 			OTX2_CPT_LMT_LF_LMTLINEX(0));
 		lfs->lf[slot].ioreg = lfs->reg_base +
-			OTX2_CPT_RVU_FUNC_ADDR_S(BLKADDR_CPT0, slot,
+			OTX2_CPT_RVU_FUNC_ADDR_S(lfs->blkaddr, slot,
 			OTX2_CPT_LF_NQX(0));
 	}
 	ret = otx2_cpt_attach_rscrs_msg(pdev);
@@ -366,7 +367,7 @@ static int rx_inline_ipsec_lf_enable(struct otx2_cptpf_dev *cptpf,
 			"Engine group for inline ipsec is not available\n");
 		return -ENOENT;
 	}
-
+	cptpf->blkaddr = BLKADDR_CPT0;
 	ret = otx2_cptpf_lf_init(cptpf, 1 << egrp, OTX2_CPT_QUEUE_HI_PRIO, 1);
 	if (ret)
 		return ret;
diff --git a/drivers/crypto/marvell/octeontx2/otx2_cptpf_ucode.c b/drivers/crypto/marvell/octeontx2/otx2_cptpf_ucode.c
index 807bc397fc8d..452f12a4c533 100644
--- a/drivers/crypto/marvell/octeontx2/otx2_cptpf_ucode.c
+++ b/drivers/crypto/marvell/octeontx2/otx2_cptpf_ucode.c
@@ -1909,6 +1909,7 @@ int otx2_cpt_discover_eng_capabilities(void *obj)
 		return 0;
 
 	pdev = cptpf->pdev;
+	cptpf->blkaddr = BLKADDR_CPT0;
 	ret = create_eng_caps_discovery_grps(pdev, &cptpf->eng_grps);
 	if (ret)
 		goto delete_grps;
diff --git a/drivers/crypto/marvell/octeontx2/otx2_cptvf_main.c b/drivers/crypto/marvell/octeontx2/otx2_cptvf_main.c
index 4e2c239cffed..10ec8aa9f280 100644
--- a/drivers/crypto/marvell/octeontx2/otx2_cptvf_main.c
+++ b/drivers/crypto/marvell/octeontx2/otx2_cptvf_main.c
@@ -14,6 +14,10 @@
 #define OTX2_CPT_DRV_NAME "octeontx2-cptvf"
 #define OTX2_CPT_DRV_VERSION "1.0"
 
+static unsigned int cpt_block_num;
+module_param(cpt_block_num, uint, 0644);
+MODULE_PARM_DESC(cpt_block_num, "cpt block number (0=CPT0 1=CPT1, default 0)");
+
 static void cptvf_enable_pfvf_mbox_intrs(struct otx2_cptvf_dev *cptvf)
 {
 	/* Clear interrupt if any */
@@ -199,6 +203,8 @@ static int otx2_cptvf_probe(struct pci_dev *pdev,
 
 	kcrypto_lfs = cptvf->lfs.kcrypto_limits ? cptvf->lfs.kcrypto_limits :
 		      num_online_cpus();
+
+	cptvf->blkaddr = (cpt_block_num == 0) ? BLKADDR_CPT0 : BLKADDR_CPT1;
 	/* Initialize CPT LFs */
 	ret = otx2_cptvf_lf_init(pdev, cptvf->reg_base, &cptvf->lfs,
 				 kcrypto_lfs);
diff --git a/drivers/crypto/marvell/octeontx2/otx2_cptvf_mbox.c b/drivers/crypto/marvell/octeontx2/otx2_cptvf_mbox.c
index 2fed4a46c380..4f3aa4f478d7 100644
--- a/drivers/crypto/marvell/octeontx2/otx2_cptvf_mbox.c
+++ b/drivers/crypto/marvell/octeontx2/otx2_cptvf_mbox.c
@@ -110,6 +110,10 @@ void otx2_cptvf_pfvf_mbox_handler(struct work_struct *work)
 			for (j = 0; j < rsp_msix->cptlfs; j++)
 				cptvf->lfs.lf[j].msix_offset =
 						rsp_msix->cptlf_msixoff[j];
+
+			for (j = 0; j < rsp_msix->cpt1_lfs; j++)
+				cptvf->lfs.lf[j].msix_offset =
+						rsp_msix->cpt1_lf_msixoff[j];
 			break;
 
 		case MBOX_MSG_CPT_RD_WR_REGISTER:
-- 
2.31.1

