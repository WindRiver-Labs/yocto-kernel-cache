From 674cd81336607c35d1b6cb40420a2342a276a810 Mon Sep 17 00:00:00 2001
From: Richard Gong <richard.gong@intel.com>
Date: Tue, 23 Jun 2020 16:34:47 -0500
Subject: [PATCH 053/120] HSD #18011523007: svc: stratix10-svc: additional
 changes for SDOS

commit 500fb9e7bcfa03a34d71b3c2b203546f44eed914 from
https://github.com/altera-opensource/linux-socfpga.git

Correct the COMMAND_POLL_SERVICE_STATUS returns, SVC handles both input
and output buffers. SMC call sends all 6 registers for SDOS and includes
size for status enquiry. Clean up SMC protocol definitions.

Signed-off-by: Richard Gong <richard.gong@intel.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/firmware/stratix10-svc.c             | 37 +++++++++++++-------
 include/linux/firmware/intel/stratix10-smc.h | 34 ++++++++++--------
 2 files changed, 43 insertions(+), 28 deletions(-)

diff --git a/drivers/firmware/stratix10-svc.c b/drivers/firmware/stratix10-svc.c
index 6f186f89bcf8..6401e2b19536 100644
--- a/drivers/firmware/stratix10-svc.c
+++ b/drivers/firmware/stratix10-svc.c
@@ -264,7 +264,7 @@ static void svc_thread_cmd_config_status(struct stratix10_svc_controller *ctrl,
 
 	a0 = INTEL_SIP_SMC_FPGA_CONFIG_ISDONE;
 	a1 = (unsigned long)p_data->paddr;
-	a2 = 0;
+	a2 = (unsigned long)p_data->size;
 
 	if (p_data->command == COMMAND_POLL_SERVICE_STATUS)
 		a0 = INTEL_SIP_SMC_SERVICE_COMPLETED;
@@ -290,12 +290,15 @@ static void svc_thread_cmd_config_status(struct stratix10_svc_controller *ctrl,
 		cb_data->status = BIT(SVC_STATUS_BUSY);
 	} else if (res.a0 == INTEL_SIP_SMC_STATUS_OK) {
 		cb_data->status = BIT(SVC_STATUS_COMPLETED);
-		cb_data->kaddr1 = (res.a1) ?
-				  svc_pa_to_va(res.a1) : NULL;
-		cb_data->kaddr2 = &res.a2;
+		cb_data->kaddr2 = (res.a2) ?
+				  svc_pa_to_va(res.a2) : NULL;
+		cb_data->kaddr3 = (res.a3) ? &res.a3 : NULL;
 	} else {
 		pr_err("%s: poll status error\n", __func__);
 		cb_data->kaddr1 = &res.a1;
+		cb_data->kaddr2 = (res.a2) ?
+				  svc_pa_to_va(res.a2) : NULL;
+		cb_data->kaddr3 = (res.a3) ? &res.a3 : NULL;
 		cb_data->status = BIT(SVC_STATUS_ERROR);
 	}
 
@@ -324,7 +327,8 @@ static void svc_thread_recv_status_ok(struct stratix10_svc_data *p_data,
 	case COMMAND_RSU_NOTIFY:
 	case COMMAND_FCS_REQUEST_SERVICE:
 	case COMMAND_FCS_SEND_CERTIFICATE:
-	case COMMAND_POLL_SERVICE_STATUS:
+	case COMMAND_FCS_DATA_ENCRYPTION:
+	case COMMAND_FCS_DATA_DECRYPTION:
 		cb_data->status = BIT(SVC_STATUS_OK);
 		break;
 	case COMMAND_RECONFIG_DATA_SUBMIT:
@@ -344,9 +348,8 @@ static void svc_thread_recv_status_ok(struct stratix10_svc_data *p_data,
 		cb_data->kaddr2 = &res.a2;
 		break;
 	case COMMAND_FCS_RANDOM_NUMBER_GEN:
-	case COMMAND_FCS_DATA_ENCRYPTION:
-	case COMMAND_FCS_DATA_DECRYPTION:
 	case COMMAND_FCS_GET_PROVISION_DATA:
+	case COMMAND_POLL_SERVICE_STATUS:
 		cb_data->status = BIT(SVC_STATUS_OK);
 		cb_data->kaddr1 = &res.a1;
 		cb_data->kaddr2 = svc_pa_to_va(res.a2);
@@ -486,7 +489,7 @@ static int svc_normal_to_secure_thread(void *data)
 		case COMMAND_FCS_RANDOM_NUMBER_GEN:
 			a0 = INTEL_SIP_SMC_FCS_RANDOM_NUMBER;
 			a1 = (unsigned long)pdata->paddr;
-			a2 = (unsigned long)pdata->size;
+			a2 = 0;
 			break;
 		case COMMAND_FCS_REQUEST_SERVICE:
 			a0 = INTEL_SIP_SMC_FCS_SERVICE_REQUEST;
@@ -501,14 +504,14 @@ static int svc_normal_to_secure_thread(void *data)
 		case COMMAND_FCS_GET_PROVISION_DATA:
 			a0 = INTEL_SIP_SMC_FCS_GET_PROVISION_DATA;
 			a1 = (unsigned long)pdata->paddr;
-			a2 = (unsigned long)pdata->size;
+			a2 = 0;
 			break;
 
 		/* for polling */
 		case COMMAND_POLL_SERVICE_STATUS:
 			a0 = INTEL_SIP_SMC_SERVICE_COMPLETED;
 			a1 = (unsigned long)pdata->paddr;
-			a2 = 0;
+			a2 = (unsigned long)pdata->size;
 			break;
 
 		default:
@@ -519,7 +522,14 @@ static int svc_normal_to_secure_thread(void *data)
 			 __func__, (unsigned int)a0, (unsigned int)a1);
 		pr_debug(" a2=0x%016x\n", (unsigned int)a2);
 
-		ctrl->invoke_fn(a0, a1, a2, 0, 0, 0, 0, 0, &res);
+		if (a0 == INTEL_SIP_SMC_FCS_CRYPTION) {
+			pr_debug(" a3=0x%016x\n", (unsigned int)a3);
+			pr_debug(" a4=0x%016x\n", (unsigned int)a4);
+			pr_debug(" a5=0x%016x\n", (unsigned int)a5);
+			ctrl->invoke_fn(a0, a1, a2, a3, a4, a5, 0, 0, &res);
+		} else {
+			ctrl->invoke_fn(a0, a1, a2, 0, 0, 0, 0, 0, &res);
+		}
 
 		pr_debug("%s: after SMC call -- res.a0=0x%016x",
 			 __func__, (unsigned int)res.a0);
@@ -584,8 +594,9 @@ static int svc_normal_to_secure_thread(void *data)
 			pr_err("%s: STATUS_ERROR\n", __func__);
 			cbdata->status = BIT(SVC_STATUS_ERROR);
 			cbdata->kaddr1 = &res.a1;
-			cbdata->kaddr2 = NULL;
-			cbdata->kaddr3 = NULL;
+			cbdata->kaddr2 = (res.a2) ?
+				svc_pa_to_va(res.a2) : NULL;
+			cbdata->kaddr3 = (res.a3) ? &res.a3 : NULL;
 			pdata->chan->scl->receive_cb(pdata->chan->scl, cbdata);
 			break;
 		default:
diff --git a/include/linux/firmware/intel/stratix10-smc.h b/include/linux/firmware/intel/stratix10-smc.h
index bc705cd5fd26..8268d72cf8e4 100644
--- a/include/linux/firmware/intel/stratix10-smc.h
+++ b/include/linux/firmware/intel/stratix10-smc.h
@@ -409,15 +409,19 @@ INTEL_SIP_SMC_FAST_CALL_VAL(INTEL_SIP_SMC_FUNCID_FPGA_CONFIG_COMPLETED_WRITE)
  *
  * Call register usage:
  * a0: INTEL_SIP_SMC_SERVICE_COMPLETED
- * a1: the physical address for secure firmware to put output data
- * a2: size
+ * a1: this register is optional. If used, it is the physical address for
+ *     secure firmware to put output data
+ * a2: this register is optional. If used, it is the size of output data
  * a3-a7: not used
  *
  * Return status:
  * a0: INTEL_SIP_SMC_STATUS_OK, INTEL_SIP_SMC_STATUS_ERROR,
  *     INTEL_SIP_SMC_REJECTED or INTEL_SIP_SMC_STATUS_BUSY
- * a1: physical address for the output daat
- * a2: output data size
+ * a1: mailbox error if a0 is INTEL_SIP_SMC_STATUS_ERROR
+ * a2: physical address containing the process info
+ *     for FCS certificate -- the data contains the certificate status
+ *     for FCS cryption -- the data contains the actual data size FW processes
+ * a3: output data size
  */
 #define INTEL_SIP_SMC_FUNCID_SERVICE_COMPLETED 30
 #define INTEL_SIP_SMC_SERVICE_COMPLETED \
@@ -448,9 +452,9 @@ INTEL_SIP_SMC_FAST_CALL_VAL(INTEL_SIP_SMC_FUNCID_FPGA_CONFIG_COMPLETED_WRITE)
  * Return status:
  * a0 INTEL_SIP_SMC_STATUS_OK, INTEL_SIP_SMC_FCS_ERROR or
  *      INTEL_SIP_SMC_FCS_REJECTED
- * a1 the physical address of generated random number
- * a2 the size
- * a3 not used
+ * a1 mailbox error
+ * a2 the physical address of generated random number
+ * a3 size
  */
 #define INTEL_SIP_SMC_FUNCID_FCS_RANDOM_NUMBER 90
 #define INTEL_SIP_SMC_FCS_RANDOM_NUMBER \
@@ -461,6 +465,9 @@ INTEL_SIP_SMC_FAST_CALL_VAL(INTEL_SIP_SMC_FUNCID_FPGA_CONFIG_COMPLETED_WRITE)
  * Async call for data encryption and HMAC signature generation, or for
  * data decryption and HMAC verification.
  *
+ * Call INTEL_SIP_SMC_SERVICE_COMPLETED to get the output encrypted or
+ * decrypted data
+ *
  * Call register usage:
  * a0 INTEL_SIP_SMC_FCS_CRYPTION
  * a1 cryption mode (1 for encryption and 0 for decryption)
@@ -473,9 +480,7 @@ INTEL_SIP_SMC_FAST_CALL_VAL(INTEL_SIP_SMC_FUNCID_FPGA_CONFIG_COMPLETED_WRITE)
  * Return status:
  * a0 INTEL_SIP_SMC_STATUS_OK, INTEL_SIP_SMC_STATUS_ERROR or
  *      INTEL_SIP_SMC_STATUS_REJECTED
- * a1 mbox return code
- * a2 physical address of output data which stores encrypted or decrypted data
- * a3 output data size
+ * a1-3 not used
  */
 #define INTEL_SIP_SMC_FUNCID_FCS_CRYPTION 91
 #define INTEL_SIP_SMC_FCS_CRYPTION \
@@ -512,8 +517,7 @@ INTEL_SIP_SMC_FAST_CALL_VAL(INTEL_SIP_SMC_FUNCID_FPGA_CONFIG_COMPLETED_WRITE)
  * a3-a7 not used
  *
  * Return status:
- * a0 INTEL_SIP_SMC_STATUS_OK, INTEL_SIP_SMC_FCS_ERROR or
- *      INTEL_SIP_SMC_FCS_REJECTED
+ * a0 INTEL_SIP_SMC_STATUS_OK or INTEL_SIP_SMC_FCS_REJECTED
  * a1-a3 not used
  */
 #define INTEL_SIP_SMC_FUNCID_FCS_SEND_CERTIFICATE 93
@@ -533,9 +537,9 @@ INTEL_SIP_SMC_FAST_CALL_VAL(INTEL_SIP_SMC_FUNCID_FPGA_CONFIG_COMPLETED_WRITE)
  * Return status:
  * a0 INTEL_SIP_SMC_STATUS_OK, INTEL_SIP_SMC_FCS_ERROR or
  *      INTEL_SIP_SMC_FCS_REJECTED
- * a1 physical address for the structure of fuse and key hashes
- * a2 the size of structure
- * a3 not used
+ * a1 mailbox error
+ * a2 physical address for the structure of fuse and key hashes
+ * a3 the size of structure
  *
  */
 #define INTEL_SIP_SMC_FUNCID_FCS_GET_PROVISION_DATA 94
-- 
2.31.1

