From 80c5cb6bfbdeae019a0a00078bb6de8911067afc Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Sun, 11 Jul 2021 09:11:53 -0700
Subject: [PATCH 1641/1921] net: mvpp2: Add ksettings cross phy interface
 configuration support

Proposal:
speed change 10G/5G/2.5G/1G over ethtool ksettings

Current situation:
- Init with speed=10G, autoneg=ON and
 advertising for 10/100/1000M(baseT)/10G(baseKR/SR/LR)
- Speed set to 1G failed

Code findings:
Port speed change mvpp2_mac_config() called from phylink
applied upon the given INTERFACE-TYPE but not upon speed
=> The required FIX is in the phylink:
=> phylink_ethtool_ksettings_set() should modify the
   PHY_INTERFACE_MODE_xx (10GKR/5KR/2500BASEX/2500BASEX/1000BASEX)
   according to the required kset.speed if PHYDEV doesn't exist

SOLUTIONs:
mvpp2_get_interface_by_speed() introduced

Change-Id: I906e3c695c4ebcd48072aaf284282997b228ea9d
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/56077
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Yan Markman <ymarkman@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/56128
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
index 0e48d9112ee6..54e9832e0704 100644
--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
@@ -6161,6 +6161,18 @@ static struct mvpp2_port *mvpp2_phylink_to_port(struct phylink_config *config)
 	return container_of(config, struct mvpp2_port, phylink_config);
 }
 
+static void mvpp2_get_interface_by_speed(struct phylink_link_state *state)
+{
+	if (state->speed == SPEED_1000)
+		state->interface = PHY_INTERFACE_MODE_1000BASEX;
+	else if (state->speed == SPEED_2500)
+		state->interface = PHY_INTERFACE_MODE_2500BASEX;
+	else if (state->speed == SPEED_5000)
+		state->interface = PHY_INTERFACE_MODE_5GKR;
+	else if (state->speed == SPEED_10000)
+		state->interface = PHY_INTERFACE_MODE_10GKR;
+}
+
 static void mvpp2_phylink_validate(struct phylink_config *config,
 				   unsigned long *supported,
 				   struct phylink_link_state *state)
@@ -6169,6 +6181,9 @@ static void mvpp2_phylink_validate(struct phylink_config *config,
 	struct mvpp2_port *port = netdev_priv(dev);
 	__ETHTOOL_DECLARE_LINK_MODE_MASK(mask) = { 0, };
 
+	if (!port->phy_exist)
+		mvpp2_get_interface_by_speed(state);
+
 	/* Invalid combinations */
 	switch (state->interface) {
 	case PHY_INTERFACE_MODE_10GKR:
-- 
2.31.1

