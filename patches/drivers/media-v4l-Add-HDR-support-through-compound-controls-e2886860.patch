From 45ed16e5524bde30cd59e27ee8438ab676fd1dcc Mon Sep 17 00:00:00 2001
From: Dylan Yip <dylan.yip@xilinx.com>
Date: Tue, 2 Jun 2020 12:49:34 -0700
Subject: [PATCH 1380/1851] media: v4l: Add HDR support through compound
 controls

commit f9251bf630d153d47537e689aa872f520ee1d5ef from
https://github.com/Xilinx/linux-xlnx.git

Currently v4l framework has no support for HDR metadata. This patch
implements HDR metadata as a compound control which can be accessed from
userspace through the extended control API. The compound control ID and
structures are currently stored in a separate header since it is
unstable and may be subject to change in the future. The control type
for HDR metadata wasn't added to minimize the changes for the same
reason.

The application can obtain HDR metadata by calling VIDIOC_G_EXT_CTRLS
per frame (as per CTA 861.G spec). The connectivity device driver is
expected to provide the requested metadata. The existing framework
already has support to copy this metadata to userspace.

Signed-off-by: Dylan Yip <dylan.yip@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 include/media/hdr-ctrls.h | 89 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 89 insertions(+)
 create mode 100644 include/media/hdr-ctrls.h

diff --git a/include/media/hdr-ctrls.h b/include/media/hdr-ctrls.h
new file mode 100644
index 000000000000..5ce1d38c7847
--- /dev/null
+++ b/include/media/hdr-ctrls.h
@@ -0,0 +1,89 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+/*
+ * These are the HDR controls for use with the extended control API.
+ *
+ * It turns out that these structs are not stable yet and will undergo
+ * more changes. So keep them private until they are stable and ready to
+ * become part of the official public API.
+ */
+
+#ifndef _HDR_CTRLS_H_
+#define _HDR_CTRLS_H_
+
+#define V4L2_CTRL_CLASS_METADATA 0x00b00000
+
+#define V4L2_CID_METADATA_BASE (V4L2_CTRL_CLASS_METADATA | 0x900)
+#define V4L2_CID_METADATA_CLASS (V4L2_CTRL_CLASS_METADATA | 1)
+
+#define V4L2_CID_METADATA_HDR (V4L2_CID_METADATA_BASE + 1)
+
+enum v4l2_eotf {
+	/*
+	 * EOTF values as per CTA 861.G spec (HDMI/DP).
+	 * If v4l2 driver is being implemented for other connectivity devices,
+	 * a conversion function must be implemented.
+	 */
+	V4L2_EOTF_TRADITIONAL_GAMMA_SDR,
+	V4L2_EOTF_TRADITIONAL_GAMMA_HDR,
+	V4L2_EOTF_SMPTE_ST2084,
+	V4L2_EOTF_BT_2100_HLG,
+};
+
+enum v4l2_hdr_type {
+	/*
+	 * This is for the v4l2_metadata_hdr structure.
+	 * MSB differentiates static (0) or dynamic (1) metadata.
+	 * Other 15 bits represent specific HDR standards.
+	 */
+
+	/* static HDR */
+	V4L2_HDR_TYPE_HDR10     = 0x0000,
+
+	/* dynamic HDR */
+	V4L2_HDR_TYPE_HDR10P    = 1 << 15 | V4L2_HDR_TYPE_HDR10,
+};
+
+/**
+ * struct v4l2_hdr10_payload - HDR Metadata Payload which matches CTA 861.G spec
+ *
+ * @eotf:				Electro-Optical Transfer Function (EOTF)
+ * @metadata_type:			Static_Metadata_Descriptor_ID
+ * @display_primaries:			Color Primaries of the Data
+ * @white_point:			White Point of Colorspace Data
+ * @max_mdl:				Max Mastering Display Luminance
+ * @min_mdl:				Min Mastering Display Luminance
+ * @max_cll:				Max Content Light Level
+ * @max_fall:				Max Frame Average Light Level
+ */
+struct v4l2_hdr10_payload {
+	__u8 eotf;
+	__u8 metadata_type;
+	struct {
+		__u16 x;
+		__u16 y;
+	} display_primaries[3];
+	struct {
+		__u16 x;
+		__u16 y;
+	} white_point;
+	__u16 max_mdl;
+	__u16 min_mdl;
+	__u16 max_cll;
+	__u16 max_fall;
+};
+
+/**
+ * struct v4l2_metadata_hdr - Container for HDR metadata
+ *
+ * @metadata_type:	HDR type
+ * @size:		Size of payload/metadata
+ * @payload:		Actual metadata
+ */
+struct v4l2_metadata_hdr {
+	__u16 metadata_type;
+	__u16 size;
+	/* Currently the largest extended HDR infoframe is 4000 bytes */
+	__u8 payload[4000];
+};
+
+#endif
-- 
2.31.1

