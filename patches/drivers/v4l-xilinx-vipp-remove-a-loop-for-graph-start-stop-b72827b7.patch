From 4a8c8bb5e4ab937e31b2348c37060e6833cb5dbc Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Thu, 12 Mar 2020 10:31:38 -0700
Subject: [PATCH 1282/1851] v4l: xilinx: vipp: remove a loop for graph start /
 stop

commit 4df27f7e5d90367d97ed37ff6bde3c9d4156da9a from
https://github.com/Xilinx/linux-xlnx.git

Let's try to set the dependency sub-devices recursively while checking.
It allows to resolve dependencies in one shot, hence removing the repeated
loop.

Signed-off-by: Hyun Kwon <hyun.kwon@xilinx.com>
Reviewed-by: Dylan Yip <dylan.yip@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/media/platform/xilinx/xilinx-vipp.c | 39 ++++++++++-----------
 1 file changed, 18 insertions(+), 21 deletions(-)

diff --git a/drivers/media/platform/xilinx/xilinx-vipp.c b/drivers/media/platform/xilinx/xilinx-vipp.c
index 01857c50ee15..66559c8dd04e 100644
--- a/drivers/media/platform/xilinx/xilinx-vipp.c
+++ b/drivers/media/platform/xilinx/xilinx-vipp.c
@@ -305,8 +305,7 @@ static int xvip_entity_start_stop(struct xvip_composite_device *xdev,
  * dependencies are ready, set the streaming state on the entity. If the state
  * is already set, optimize it by skipping checks.
  *
- * Return: true if all dependecies are ready and there's a state change.
- * false otherwise.
+ * Return: true if the state is successfully or already set. false otherwise.
  */
 static bool xvip_graph_entity_start_stop(struct xvip_composite_device *xdev,
 					 struct xvip_graph_entity *entity,
@@ -319,7 +318,7 @@ static bool xvip_graph_entity_start_stop(struct xvip_composite_device *xdev,
 	int ret;
 
 	if (entity->streaming == on)
-		return false;
+		return true;
 
 	for (i = 0; i < entity->entity->num_pads; i++) {
 		struct xvip_graph_entity *remote;
@@ -342,8 +341,11 @@ static bool xvip_graph_entity_start_stop(struct xvip_composite_device *xdev,
 			continue;
 
 		/* the dependency state doesn't meet */
-		if (remote->streaming != on)
-			return false;
+		if (remote->streaming != on) {
+			state = xvip_graph_entity_start_stop(xdev, remote, on);
+			if (!state)
+				return state;
+		}
 	}
 
 	/* set state and report if state is changed or not */
@@ -352,7 +354,7 @@ static bool xvip_graph_entity_start_stop(struct xvip_composite_device *xdev,
 	/* This shouldn't happen as check is already above */
 	if (state == on) {
 		WARN(1, "Should never get here\n");
-		return false;
+		return true;
 	}
 
 	ret = xvip_entity_start_stop(xdev, entity->entity, on);
@@ -370,30 +372,25 @@ static bool xvip_graph_entity_start_stop(struct xvip_composite_device *xdev,
  * @xdev: composite device
  * @on: boolean flag. true for enable and false for disable
  *
- * Enable or disable the entire graph by checking dependencies and
- * repeating iterations until all sub-devices are handled.
+ * Enable or disable the entire graph by iterating the asd list.
+ * xvip_graph_entity_start_stop() takes care of dependencies,
+ * or state-checking.
  *
  * Return: 0 for success, otherwise error code
  */
 int xvip_graph_start_stop(struct xvip_composite_device *xdev, bool on)
 {
 	struct v4l2_async_subdev *asd;
-	bool updated = true;
-
-	while (updated) {
-		updated = false;
-		list_for_each_entry(asd, &xdev->notifier.asd_list, asd_list) {
-			struct xvip_graph_entity *entity;
-			bool state;
 
-			entity = to_xvip_entity(asd);
+	list_for_each_entry(asd, &xdev->notifier.asd_list, asd_list) {
+		struct xvip_graph_entity *entity;
+		bool state;
 
-			state = xvip_graph_entity_start_stop(xdev, entity, on);
-			if (!state)
-				continue;
+		entity = to_xvip_entity(asd);
 
-			updated = true;
-		}
+		state = xvip_graph_entity_start_stop(xdev, entity, on);
+		if (!state)
+			return -EPIPE;
 	}
 
 	return 0;
-- 
2.31.1

