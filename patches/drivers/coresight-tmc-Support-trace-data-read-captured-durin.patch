From c6748ee1543c0172ae49712a3a225e70bdfbc392 Mon Sep 17 00:00:00 2001
From: Linu Cherian <lcherian@marvell.com>
Date: Wed, 22 Jan 2020 17:44:14 +0530
Subject: [PATCH 457/767] coresight: tmc: Support trace data read captured
 during previous boot

commit ed3f455e116adbc6a6c9d69fd7ef631a23ca1175 from
git@git.assembla.com:cavium/WindRiver.linux.git

- Introduced CS_MODE_READ_PREVBOOT mode for reading trace data
  captured during previous boot

- This mode will be enabled if trace data read is invoked without
  invoking the trace hardware enable

- It is expected that DDR preserve feature to be enabled, so that
  trace buffer data is intact across soft reboots.

Change-Id: I6b97c0fb3c262fde43bc2e457271b2ec5b34a868
Signed-off-by: Linu Cherian <lcherian@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/22249
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
[Kevin: Replace tmc_etr_dump_hw() with tmc_etr_sync_sysfs_buf()]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/hwtracing/coresight/coresight-priv.h   |  3 ++-
 .../hwtracing/coresight/coresight-tmc-etr.c    | 18 +++++++++++++++---
 drivers/hwtracing/coresight/coresight-tmc.c    |  5 +++++
 3 files changed, 22 insertions(+), 4 deletions(-)

diff --git a/drivers/hwtracing/coresight/coresight-priv.h b/drivers/hwtracing/coresight/coresight-priv.h
index e7f31afd076e..b9de007ce0fc 100644
--- a/drivers/hwtracing/coresight/coresight-priv.h
+++ b/drivers/hwtracing/coresight/coresight-priv.h
@@ -77,7 +77,7 @@ extern const u32 barrier_pkt[4];
 #define CSETR_QUIRK_BUFFSIZE_8BX	(0x1U << 0) /* 8 byte size multiplier */
 #define CSETR_QUIRK_SECURE_BUFF		(0x1U << 1) /* Trace buffer is Secure */
 #define CSETR_QUIRK_RESET_CTL_REG	(0x1U << 2) /* Reset CTL on reset */
-#define CSETR_QUIRK_NO_STOP_FLUSH	(0x0U << 3) /* No Stop on flush */
+#define CSETR_QUIRK_NO_STOP_FLUSH	(0x1U << 3) /* No Stop on flush */
 #define CSETM_QUIRK_SW_SYNC		(0x1U << 4) /* No Hardware sync */
 #define CSETM_QUIRK_TREAT_ETMv43	(0x1U << 5) /* ETMv4.2 as ETMv4.3 */
 
@@ -121,6 +121,7 @@ enum cs_mode {
 	CS_MODE_DISABLED,
 	CS_MODE_SYSFS,
 	CS_MODE_PERF,
+	CS_MODE_READ_PREVBOOT,
 };
 
 /**
diff --git a/drivers/hwtracing/coresight/coresight-tmc-etr.c b/drivers/hwtracing/coresight/coresight-tmc-etr.c
index c05ca37afb69..c7f48947d174 100644
--- a/drivers/hwtracing/coresight/coresight-tmc-etr.c
+++ b/drivers/hwtracing/coresight/coresight-tmc-etr.c
@@ -1429,6 +1429,9 @@ static int tmc_enable_etr_sink_sysfs(struct coresight_device *csdev)
 		drvdata->sysfs_buf = new_buf;
 	}
 
+	if (drvdata->mode == CS_MODE_READ_PREVBOOT)
+		goto out;
+
 	ret = tmc_etr_enable_hw(drvdata, drvdata->sysfs_buf);
 	if (!ret) {
 		drvdata->mode = CS_MODE_SYSFS;
@@ -1437,8 +1440,8 @@ static int tmc_enable_etr_sink_sysfs(struct coresight_device *csdev)
 out:
 	spin_unlock_irqrestore(&drvdata->spinlock, flags);
 
-
-	if (!ret && !is_etm_sync_mode_hw())
+	if (!ret && !is_etm_sync_mode_hw() &&
+		(drvdata->mode != CS_MODE_READ_PREVBOOT))
 		smp_call_function_single(drvdata->rc_cpu, tmc_etr_timer_setup,
 					 drvdata, true);
 	/* Free memory outside the spinlock if need be */
@@ -1961,6 +1964,14 @@ int tmc_read_prepare_etr(struct tmc_drvdata *drvdata)
 	if (WARN_ON_ONCE(drvdata->config_type != TMC_CONFIG_TYPE_ETR))
 		return -EINVAL;
 
+	if (drvdata->mode == CS_MODE_READ_PREVBOOT) {
+		/* Initialize drvdata for reading trace data from last boot */
+		tmc_enable_etr_sink_sysfs(drvdata->csdev);
+		/* Update the buffer offset, len */
+		tmc_etr_sync_sysfs_buf(drvdata);
+		return 0;
+	}
+
 	if (drvdata->etr_options & CSETR_QUIRK_NO_STOP_FLUSH)
 		smp_call_function_single(drvdata->rc_cpu, tmc_flushstop_etm_off,
 					 drvdata, true);
@@ -2053,7 +2064,8 @@ int tmc_copy_secure_buffer(struct tmc_drvdata *drvdata,
 	if (res.a0 != SMCCC_RET_SUCCESS)
 		return -EFAULT;
 
-	if (drvdata->etr_options & CSETR_QUIRK_NO_STOP_FLUSH)
+	if ((drvdata->etr_options & CSETR_QUIRK_NO_STOP_FLUSH) &&
+	    (drvdata->mode == CS_MODE_SYSFS))
 		smp_call_function_single(drvdata->rc_cpu, tmc_flushstop_etm_on,
 					drvdata, true);
 	return 0;
diff --git a/drivers/hwtracing/coresight/coresight-tmc.c b/drivers/hwtracing/coresight/coresight-tmc.c
index 2cdad78f695c..01f3619fcf50 100644
--- a/drivers/hwtracing/coresight/coresight-tmc.c
+++ b/drivers/hwtracing/coresight/coresight-tmc.c
@@ -121,6 +121,11 @@ static int tmc_open(struct inode *inode, struct file *file)
 	struct tmc_drvdata *drvdata = container_of(file->private_data,
 						   struct tmc_drvdata, miscdev);
 
+	if (drvdata->buf == NULL) {
+		drvdata->mode = CS_MODE_READ_PREVBOOT;
+		dev_info(drvdata->dev, "TMC read mode for previous boot\n");
+	}
+
 	ret = tmc_read_prepare(drvdata);
 	if (ret)
 		return ret;
-- 
2.31.1

