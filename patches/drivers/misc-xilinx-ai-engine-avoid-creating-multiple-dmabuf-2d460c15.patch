From f90b133aaaf1a3f43cfc03d8c68a52da5cd75cd4 Mon Sep 17 00:00:00 2001
From: Wendy Liang <wendy.liang@xilinx.com>
Date: Tue, 15 Sep 2020 15:14:16 -0700
Subject: [PATCH 1591/1851] misc: xilinx-ai-engine: avoid creating multiple
 dmabufs for AIE mems

commit d6d54e238ebfc45856346693a7c68696d4f9dcf6 from
https://github.com/Xilinx/linux-xlnx.git

Keeps dmabuf in the AI engine memory structure, so that we can avoid
creating dmabuf for the same memory multiple times. When userspace
requesting memory information, AI engine driver checks if dmabuf has
been created, if yes, do not create another dmabuf, just return the
file descriptor.

Signed-off-by: Wendy Liang <wendy.liang@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 .../xilinx-ai-engine/ai-engine-internal.h     |  3 ++
 drivers/misc/xilinx-ai-engine/ai-engine-mem.c | 28 ++++++++++++-------
 2 files changed, 21 insertions(+), 10 deletions(-)

diff --git a/drivers/misc/xilinx-ai-engine/ai-engine-internal.h b/drivers/misc/xilinx-ai-engine/ai-engine-internal.h
index 483201eb95e9..4236c6bdbb83 100644
--- a/drivers/misc/xilinx-ai-engine/ai-engine-internal.h
+++ b/drivers/misc/xilinx-ai-engine/ai-engine-internal.h
@@ -12,6 +12,7 @@
 #include <linux/bits.h>
 #include <linux/cdev.h>
 #include <linux/device.h>
+#include <linux/dma-buf.h>
 #include <linux/file.h>
 #include <linux/fpga/fpga-bridge.h>
 #include <linux/io.h>
@@ -88,6 +89,7 @@ struct aie_partition;
 /**
  * struct aie_part_mem - AI engine partition memory information structure
  * @apart: AI engine partition
+ * @dbuf: dmabuf pointer associated with the memory
  * @mem: memory information of a type of memory
  * @size: size of the total memories in the partition
  *
@@ -100,6 +102,7 @@ struct aie_partition;
  */
 struct aie_part_mem {
 	struct aie_partition *apart;
+	struct dma_buf *dbuf;
 	struct aie_mem mem;
 	size_t size;
 };
diff --git a/drivers/misc/xilinx-ai-engine/ai-engine-mem.c b/drivers/misc/xilinx-ai-engine/ai-engine-mem.c
index b4fb217492b1..302112cc3060 100644
--- a/drivers/misc/xilinx-ai-engine/ai-engine-mem.c
+++ b/drivers/misc/xilinx-ai-engine/ai-engine-mem.c
@@ -120,7 +120,9 @@ static int aie_mem_mmap(struct dma_buf *dmabuf, struct vm_area_struct *vma)
 
 static void aie_mem_dmabuf_release(struct dma_buf *dmabuf)
 {
-	(void)dmabuf;
+	struct aie_part_mem *pmem = dmabuf->priv;
+
+	pmem->dbuf = NULL;
 }
 
 static const struct dma_buf_ops aie_mem_dma_buf_ops = {
@@ -147,7 +149,6 @@ static int aie_mem_create_dmabuf(struct aie_partition *apart,
 				 struct aie_part_mem *pmem,
 				 struct aie_mem *mem)
 {
-	DEFINE_DMA_BUF_EXPORT_INFO(exp_info);
 	struct dma_buf *dmabuf;
 	int ret;
 
@@ -157,20 +158,27 @@ static int aie_mem_create_dmabuf(struct aie_partition *apart,
 			 pmem->mem.offset, pmem->mem.size);
 		return -EINVAL;
 	}
-	exp_info.ops = &aie_mem_dma_buf_ops;
-	exp_info.size = pmem->size;
-	exp_info.flags = O_RDWR;
-	exp_info.priv = pmem;
 
-	dmabuf = dma_buf_export(&exp_info);
-	if (IS_ERR(dmabuf))
-		return PTR_ERR(dmabuf);
+	dmabuf = pmem->dbuf;
+	if (!dmabuf) {
+		DEFINE_DMA_BUF_EXPORT_INFO(exp_info);
+
+		exp_info.ops = &aie_mem_dma_buf_ops;
+		exp_info.size = pmem->size;
+		exp_info.flags = O_RDWR;
+		exp_info.priv = pmem;
+
+		dmabuf = dma_buf_export(&exp_info);
+		if (IS_ERR(dmabuf))
+			return PTR_ERR(dmabuf);
+
+		pmem->dbuf = dmabuf;
+	}
 
 	ret = dma_buf_fd(dmabuf, O_CLOEXEC);
 	if (ret < 0) {
 		dev_err(&apart->dev,
 			"dmabuf creation failed, failed to get fd.\n");
-		dma_buf_put(dmabuf);
 		return ret;
 	}
 	memcpy(mem, &pmem->mem, sizeof(*mem));
-- 
2.31.1

