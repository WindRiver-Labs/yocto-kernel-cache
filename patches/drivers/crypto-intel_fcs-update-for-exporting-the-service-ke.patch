From 6df1dbf5b0f444e0c75ab5861e6cc158d8d2adba Mon Sep 17 00:00:00 2001
From: Siew Chin Lim <elly.siew.chin.lim@intel.com>
Date: Thu, 26 Aug 2021 01:58:38 +0800
Subject: [PATCH 06/42] crypto: intel_fcs: update for exporting the service key
 object

commit f97d7752e9754767bc08f9682d65f90a0ba58ecb from
https://github.com/altera-opensource/linux-socfpga/commits/socfpga-5.4.124-lts

Update to support exporting the service key object.

Signed-off-by: Richard Gong <richard.gong@intel.com>
Signed-off-by: Siew Chin Lim <elly.siew.chin.lim@intel.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/crypto/intel_fcs.c           | 60 ++++++++++++++++++++++++++++
 include/uapi/linux/intel_fcs-ioctl.h | 13 ++++++
 2 files changed, 73 insertions(+)

diff --git a/drivers/crypto/intel_fcs.c b/drivers/crypto/intel_fcs.c
index 305329010bc6..dbef379d4458 100644
--- a/drivers/crypto/intel_fcs.c
+++ b/drivers/crypto/intel_fcs.c
@@ -41,6 +41,8 @@
 #define MEASUREMENT_RSP_MAX_SZ	4092
 #define CERTIFICATE_RSP_MAX_SZ	4096
 
+#define CRYPTO_EXPORTED_KEY_OBJECT_MAX_SZ 364
+
 #define SIGMA_SESSION_ID_ONE	0x1
 #define SIGMA_UNKNOWN_SESSION	0xffffffff
 
@@ -1193,6 +1195,64 @@ static long fcs_ioctl(struct file *file, unsigned int cmd,
 		 fcs_close_services(priv, s_buf, NULL);
 		 break;
 
+	case INTEL_FCS_DEV_CRYPTO_EXPORT_KEY:
+		 if (copy_from_user(data, (void __user *)arg, sizeof(*data))) {
+			 dev_err(dev, "failure on copy_from_user\n");
+			 return -EFAULT;
+		 }
+
+		 if (data->com_paras.k_object.obj_data_sz >
+		     CRYPTO_EXPORTED_KEY_OBJECT_MAX_SZ) {
+			 dev_err(dev, "Invalid key object size %d\n",
+				 data->com_paras.k_object.obj_data_sz);
+			 return -EFAULT;
+		 }
+
+		 d_buf = stratix10_svc_allocate_memory(priv->chan,
+				 CRYPTO_EXPORTED_KEY_OBJECT_MAX_SZ);
+		 if (!d_buf) {
+			 dev_err(dev, "failed allocate key object buf\n");
+			 return -ENOMEM;
+		 }
+
+		 msg->command = COMMAND_FCS_CRYPTO_EXPORT_KEY;
+		 msg->payload = NULL;
+		 msg->payload_length = 0;
+		 msg->payload_output = d_buf;
+		 msg->payload_length_output = CRYPTO_EXPORTED_KEY_OBJECT_MAX_SZ;
+		 msg->arg[0] = data->com_paras.k_object.sid;
+		 msg->arg[1] = data->com_paras.k_object.kid;
+		 priv->client.receive_cb = fcs_attestation_callback;
+
+		 ret = fcs_request_service(priv, (void *)msg,
+					   FCS_REQUEST_TIMEOUT);
+		 if (!ret && !priv->status) {
+			 if (priv->size > CRYPTO_EXPORTED_KEY_OBJECT_MAX_SZ) {
+				 dev_err(dev, "returned size %d is incorrect\n",
+					 priv->size);
+				 fcs_close_services(priv, NULL, d_buf);
+				 return -EFAULT;
+			 }
+
+			 memcpy(data->com_paras.k_object.obj_data,
+				priv->kbuf, priv->size);
+			 data->com_paras.k_object.obj_data_sz = priv->size;
+		 } else {
+			 data->com_paras.k_object.obj_data = NULL;
+			 data->com_paras.k_object.obj_data_sz = 0;
+		 }
+
+		 data->status = priv->status;
+
+		 if (copy_to_user((void __user *)arg, data, sizeof(*data))) {
+			 dev_err(dev, "failure on copy_to_user\n");
+			 fcs_close_services(priv, NULL, d_buf);
+			 ret = -EFAULT;
+		 }
+
+		 fcs_close_services(priv, NULL, d_buf);
+		 break;
+
 	default:
 		dev_warn(dev, "shouldn't be here [0x%x]\n", cmd);
 		break;
diff --git a/include/uapi/linux/intel_fcs-ioctl.h b/include/uapi/linux/intel_fcs-ioctl.h
index e14cfdcdf860..44e72c4d0e72 100644
--- a/include/uapi/linux/intel_fcs-ioctl.h
+++ b/include/uapi/linux/intel_fcs-ioctl.h
@@ -234,6 +234,13 @@ struct fcs_crypto_key_import {
 	uint32_t obj_data_sz;
 };
 
+struct fcs_crypto_key_object {
+	uint32_t sid;
+	uint32_t kid;
+	char *obj_data;
+	uint32_t obj_data_sz;
+};
+
 /**
  * struct intel_fcs_dev_ioct: common structure passed to Linux
  *	kernel driver for all commands.
@@ -272,6 +279,7 @@ struct intel_fcs_dev_ioctl {
 		struct fcs_rom_patch_sha384 sha384;
 		struct fcs_crypto_service_session	s_session;
 		struct fcs_crypto_key_import		k_import;
+		struct fcs_crypto_key_object		k_object;
 	} com_paras;
 };
 
@@ -321,6 +329,7 @@ enum intel_fcs_command_code {
 	INTEL_FCS_DEV_CRYPTO_OPEN_SESSION_CMD = 0xA0,
 	INTEL_FCS_DEV_CRYPTO_CLOSE_SESSION_CMD,
 	INTEL_FCS_DEV_CRYPTO_IMPORT_KEY_CMD,
+	INTEL_FCS_DEV_CRYPTO_EXPORT_KEY_CMD,
 };
 
 #define INTEL_FCS_DEV_VERSION_REQUEST \
@@ -395,5 +404,9 @@ enum intel_fcs_command_code {
 	_IOWR(INTEL_FCS_IOCTL, \
 	      INTEL_FCS_DEV_CRYPTO_IMPORT_KEY_CMD, struct intel_fcs_dev_ioctl)
 
+#define INTEL_FCS_DEV_CRYPTO_EXPORT_KEY \
+	_IOWR(INTEL_FCS_IOCTL, \
+	      INTEL_FCS_DEV_CRYPTO_EXPORT_KEY_CMD, struct intel_fcs_dev_ioctl)
+
 #endif
 
-- 
2.31.1

