From 59c82bce8fe6914d55080f43648b91d7be5a98a9 Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Fri, 10 Jul 2020 18:19:08 -0700
Subject: [PATCH 1431/1851] staging: apf: remove a not needed variable

commit d0289a3f3b71f8b3b222cae5e25be641121bf262 from
https://github.com/Xilinx/linux-xlnx.git

No need of a variable for a fixed value. Use a macro.

Signed-off-by: Hyun Kwon <hyun.kwon@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/staging/apf/xlnk.c | 13 ++++++-------
 1 file changed, 6 insertions(+), 7 deletions(-)

diff --git a/drivers/staging/apf/xlnk.c b/drivers/staging/apf/xlnk.c
index 3612df3751e7..5abdd0ca51c8 100644
--- a/drivers/staging/apf/xlnk.c
+++ b/drivers/staging/apf/xlnk.c
@@ -69,7 +69,6 @@ static ssize_t xlnk_dev_size;
 static int xlnk_dev_vmas;
 
 #define XLNK_BUF_POOL_SIZE	4096
-static unsigned int xlnk_bufpool_size = XLNK_BUF_POOL_SIZE;
 static void *xlnk_bufpool[XLNK_BUF_POOL_SIZE];
 static void *xlnk_bufpool_alloc_point[XLNK_BUF_POOL_SIZE];
 static xlnk_intptr_type xlnk_userbuf[XLNK_BUF_POOL_SIZE];
@@ -296,7 +295,7 @@ static int xlnk_buf_findnull(void)
 {
 	int i;
 
-	for (i = 1; i < xlnk_bufpool_size; i++) {
+	for (i = 1; i < XLNK_BUF_POOL_SIZE; i++) {
 		if (!xlnk_bufpool[i])
 			return i;
 	}
@@ -308,7 +307,7 @@ static int xlnk_buf_find_by_phys_addr(xlnk_intptr_type addr)
 {
 	int i;
 
-	for (i = 1; i < xlnk_bufpool_size; i++) {
+	for (i = 1; i < XLNK_BUF_POOL_SIZE; i++) {
 		if (xlnk_bufpool[i] &&
 		    xlnk_phyaddr[i] <= addr &&
 		    xlnk_phyaddr[i] + xlnk_buflen[i] > addr)
@@ -322,7 +321,7 @@ static int xlnk_buf_find_by_user_addr(xlnk_intptr_type addr, int pid)
 {
 	int i;
 
-	for (i = 1; i < xlnk_bufpool_size; i++) {
+	for (i = 1; i < XLNK_BUF_POOL_SIZE; i++) {
 		if (xlnk_bufpool[i] &&
 		    xlnk_buf_process[i] == pid &&
 		    xlnk_userbuf[i] <= addr &&
@@ -385,7 +384,7 @@ static int xlnk_init_bufpool(void)
 	}
 
 	xlnk_bufpool[0] = xlnk_dev_buf;
-	for (i = 1; i < xlnk_bufpool_size; i++)
+	for (i = 1; i < XLNK_BUF_POOL_SIZE; i++)
 		xlnk_bufpool[i] = NULL;
 
 	return 0;
@@ -718,7 +717,7 @@ static int xlnk_freebuf(int id)
 	int cacheable;
 	unsigned long attrs;
 
-	if (id <= 0 || id >= xlnk_bufpool_size)
+	if (id <= 0 || id >= XLNK_BUF_POOL_SIZE)
 		return -ENOMEM;
 
 	if (!xlnk_bufpool[id])
@@ -750,7 +749,7 @@ static void xlnk_free_all_buf(void)
 {
 	int i;
 
-	for (i = 1; i < xlnk_bufpool_size; i++)
+	for (i = 1; i < XLNK_BUF_POOL_SIZE; i++)
 		xlnk_freebuf(i);
 }
 
-- 
2.31.1

