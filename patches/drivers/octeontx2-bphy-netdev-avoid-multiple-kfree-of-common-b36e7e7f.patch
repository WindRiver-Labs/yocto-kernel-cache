From bce588dae2e67ebbd3d544e0e5b9b045c363ef3d Mon Sep 17 00:00:00 2001
From: Naveen Mamindlapalli <naveenm@marvell.com>
Date: Mon, 19 Apr 2021 18:40:23 +0530
Subject: [PATCH 1421/1921] octeontx2-bphy-netdev: avoid multiple kfree of
 common lmac objects

This patch fixes multiple instances of kfree() of common
objects shared by the LMAC instances of RFOE/CPRI interfaces.

Fixes: 1090d2e9e0a5 ("octeontx2-bphy-netdev: Fix common lmac resource free")
Change-Id: Iabfd9bacc15d276427c427970ac6c76d6c020e15
Signed-off-by: Baha Mesleh <baha.mesleh@nokia.com>
Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/50277
Reviewed-by: Sunil Kovvuri Goutham <SunilKovvuri.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <SunilKovvuri.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../marvell/octeontx2/bphy/otx2_cpri.c        | 12 +++++++----
 .../marvell/octeontx2/bphy/otx2_cpri.h        |  1 +
 .../marvell/octeontx2/bphy/otx2_rfoe.c        | 20 ++++++++++++-------
 .../marvell/octeontx2/bphy/otx2_rfoe.h        |  2 ++
 4 files changed, 24 insertions(+), 11 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_cpri.c b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_cpri.c
index 11f411adc194..816fe2dbb3d4 100644
--- a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_cpri.c
+++ b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_cpri.c
@@ -105,8 +105,9 @@ void otx2_bphy_cpri_cleanup(void)
 			priv = netdev_priv(netdev);
 			unregister_netdev(netdev);
 			netif_napi_del(&priv->napi);
-			kfree(priv->cpri_common);
-			priv->cpri_common = NULL;
+			--(priv->cpri_common->refcnt);
+			if (priv->cpri_common->refcnt == 0)
+				kfree(priv->cpri_common);
 			free_netdev(netdev);
 			drv_ctx->valid = 0;
 		}
@@ -539,6 +540,7 @@ int otx2_cpri_parse_and_init_intf(struct otx2_bphy_cdev_priv *cdev,
 					ret = -ENOMEM;
 					goto err_exit;
 				}
+				priv->cpri_common->refcnt = 1;
 			}
 			spin_lock_init(&priv->lock);
 			priv->netdev = netdev;
@@ -568,6 +570,7 @@ int otx2_cpri_parse_and_init_intf(struct otx2_bphy_cdev_priv *cdev,
 			} else {
 				/* share cpri_common data */
 				priv->cpri_common = priv2->cpri_common;
+				++(priv->cpri_common->refcnt);
 			}
 
 			netif_napi_add(priv->netdev, &priv->napi,
@@ -621,8 +624,9 @@ int otx2_cpri_parse_and_init_intf(struct otx2_bphy_cdev_priv *cdev,
 			priv = netdev_priv(netdev);
 			unregister_netdev(netdev);
 			netif_napi_del(&priv->napi);
-			kfree(priv->cpri_common);
-			priv->cpri_common = NULL;
+			--(priv->cpri_common->refcnt);
+			if (priv->cpri_common->refcnt == 0)
+				kfree(priv->cpri_common);
 			free_netdev(netdev);
 			drv_ctx->valid = 0;
 		}
diff --git a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_cpri.h b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_cpri.h
index 15aa206b1eef..1aadf5c0a647 100644
--- a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_cpri.h
+++ b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_cpri.h
@@ -94,6 +94,7 @@ struct ul_cbuf_cfg {
 struct cpri_common_cfg {
 	struct dl_cbuf_cfg		dl_cfg;
 	struct ul_cbuf_cfg		ul_cfg;
+	u8				refcnt;
 };
 
 struct otx2_cpri_link_event {
diff --git a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
index 378d7d7514a3..8af48a01a080 100644
--- a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
+++ b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
@@ -130,10 +130,10 @@ void otx2_bphy_rfoe_cleanup(void)
 		if (drv_ctx->valid) {
 			netdev = drv_ctx->netdev;
 			priv = netdev_priv(netdev);
-			if (priv->ptp_cfg) {
+			--(priv->ptp_cfg->refcnt);
+			if (!priv->ptp_cfg->refcnt) {
 				del_timer_sync(&priv->ptp_cfg->ptp_timer);
 				kfree(priv->ptp_cfg);
-				priv->ptp_cfg = NULL;
 			}
 			otx2_rfoe_ptp_destroy(priv);
 			unregister_netdev(netdev);
@@ -143,8 +143,9 @@ void otx2_bphy_rfoe_cleanup(void)
 				ft_cfg = &priv->rx_ft_cfg[idx];
 				netif_napi_del(&ft_cfg->napi);
 			}
-			kfree(priv->rfoe_common);
-			priv->rfoe_common = NULL;
+			--(priv->rfoe_common->refcnt);
+			if (priv->rfoe_common->refcnt == 0)
+				kfree(priv->rfoe_common);
 			free_netdev(netdev);
 			drv_ctx->valid = 0;
 		}
@@ -1248,6 +1249,7 @@ int otx2_rfoe_parse_and_init_intf(struct otx2_bphy_cdev_priv *cdev,
 					ret = -ENOMEM;
 					goto err_exit;
 				}
+				priv->rfoe_common->refcnt = 1;
 			}
 			spin_lock_init(&priv->lock);
 			priv->netdev = netdev;
@@ -1275,6 +1277,7 @@ int otx2_rfoe_parse_and_init_intf(struct otx2_bphy_cdev_priv *cdev,
 			priv->bcn_reg_base = bcn_reg_base;
 			priv->ptp_reg_base = ptp_reg_base;
 			priv->ptp_cfg = ptp_cfg;
+			++(priv->ptp_cfg->refcnt);
 
 			/* Initialise PTP TX work queue */
 			INIT_WORK(&priv->ptp_tx_work, otx2_rfoe_ptp_tx_work);
@@ -1317,6 +1320,7 @@ int otx2_rfoe_parse_and_init_intf(struct otx2_bphy_cdev_priv *cdev,
 			} else {
 				/* share rfoe_common data */
 				priv->rfoe_common = priv2->rfoe_common;
+				++(priv->rfoe_common->refcnt);
 			}
 
 			/* keep last (rfoe + lmac) priv structure */
@@ -1363,7 +1367,6 @@ int otx2_rfoe_parse_and_init_intf(struct otx2_bphy_cdev_priv *cdev,
 	return 0;
 
 err_exit:
-	kfree(ptp_cfg);
 	for (i = 0; i < RFOE_MAX_INTF; i++) {
 		drv_ctx = &rfoe_drv_ctx[i];
 		if (drv_ctx->valid) {
@@ -1377,12 +1380,15 @@ int otx2_rfoe_parse_and_init_intf(struct otx2_bphy_cdev_priv *cdev,
 				ft_cfg = &priv->rx_ft_cfg[idx];
 				netif_napi_del(&ft_cfg->napi);
 			}
-			kfree(priv->rfoe_common);
-			priv->rfoe_common = NULL;
+			--(priv->rfoe_common->refcnt);
+			if (priv->rfoe_common->refcnt == 0)
+				kfree(priv->rfoe_common);
 			free_netdev(netdev);
 			drv_ctx->valid = 0;
 		}
 	}
+	del_timer_sync(&ptp_cfg->ptp_timer);
+	kfree(ptp_cfg);
 
 	return ret;
 }
diff --git a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.h b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.h
index 5526391d2332..cd739f2094a0 100644
--- a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.h
+++ b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.h
@@ -162,6 +162,7 @@ struct tx_job_queue_cfg {
 /* rfoe common (for all lmac's) */
 struct rfoe_common_cfg {
 	struct tx_job_queue_cfg		tx_oth_job_cfg;
+	u8				refcnt;
 };
 
 /* ptp pending skb list */
@@ -244,6 +245,7 @@ struct ptp_bcn_off_cfg {
 	struct ptp_clk_cfg		clk_cfg;
 	struct timer_list		ptp_timer;
 	int				use_ptp_alg;
+	u8				refcnt;
 	/* protection lock for updating ref */
 	spinlock_t			lock;
 };
-- 
2.31.1

