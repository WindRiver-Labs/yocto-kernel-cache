From df9387b99959ada7ed8eb7239a923073d3d14fac Mon Sep 17 00:00:00 2001
From: Stanislaw Kardach <skardach@marvell.com>
Date: Sat, 25 May 2019 14:20:06 -0400
Subject: [PATCH 211/767] octeontx2-af: add TIM LF teardown

commit 2b38cdcd313cc851cf9b720000d7be0574744610 from
git@git.assembla.com:cavium/WindRiver.linux.git

TIM LF teardown was missing from the code which resulted in LF mapping
registers not being cleared.

Change-Id: I71b4fbf2c70fef6ddaa997270aae93b1fb5e3d05
Signed-off-by: Stanislaw Kardach <skardach@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/9956
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/rvu.c   |  2 ++
 .../net/ethernet/marvell/octeontx2/af/rvu.h   |  1 +
 .../ethernet/marvell/octeontx2/af/rvu_tim.c   | 26 +++++++++++++++----
 3 files changed, 24 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
index a60961e83d1f..8b4e140d96f3 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
@@ -2092,6 +2092,8 @@ static void rvu_blklf_teardown(struct rvu *rvu, u16 pcifunc, u8 blkaddr)
 			rvu_sso_lf_teardown(rvu, pcifunc, lf, slot);
 		else if (block->addr == BLKADDR_SSOW)
 			rvu_ssow_lf_teardown(rvu, pcifunc, lf, slot);
+		else if (block->addr == BLKADDR_TIM)
+			rvu_tim_lf_teardown(rvu, pcifunc, lf, slot);
 
 		err = rvu_lf_reset(rvu, block, lf);
 		if (err) {
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
index acb7c6ad6456..cea09c27c4b3 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
@@ -619,6 +619,7 @@ void rvu_cpt_unregister_interrupts(struct rvu *rvu);
 
 /* TIM APIs */
 int rvu_tim_init(struct rvu *rvu);
+int rvu_tim_lf_teardown(struct rvu *rvu, u16 pcifunc, int lf, int slot);
 int rvu_lf_lookup_tim_errata(struct rvu *rvu, struct rvu_block *block,
 		u16 pcifunc, int slot);
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c
index 31620f22d4df..3c0705fe080d 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c
@@ -36,10 +36,14 @@ static inline u64 get_tenns_clk(void)
 	return tsc;
 }
 
-static void rvu_tim_disable_lf(struct rvu *rvu, int lf, int blkaddr)
+static int rvu_tim_disable_lf(struct rvu *rvu, int lf, int blkaddr)
 {
 	u64 regval;
 
+	regval = rvu_read64(rvu, blkaddr, TIM_AF_RINGX_CTL1(lf));
+	if ((regval & TIM_AF_RINGX_CTL1_ENA) == 0)
+		return TIM_AF_RING_ALREADY_DISABLED;
+
 	/* Clear TIM_AF_RING(0..255)_CTL1[ENA]. */
 	regval = rvu_read64(rvu, blkaddr, TIM_AF_RINGX_CTL1(lf));
 	regval &= ~TIM_AF_RINGX_CTL1_ENA;
@@ -51,6 +55,7 @@ static void rvu_tim_disable_lf(struct rvu *rvu, int lf, int blkaddr)
 	 */
 	rvu_poll_reg(rvu, blkaddr, TIM_AF_RINGX_CTL1(lf),
 			TIM_AF_RINGX_CTL1_RCF_BUSY, true);
+	return 0;
 }
 
 int rvu_lf_lookup_tim_errata(struct rvu *rvu, struct rvu_block *block,
@@ -113,6 +118,8 @@ int rvu_mbox_handler_tim_lf_free(struct rvu *rvu,
 	if (lf < 0)
 		return TIM_AF_LF_INVALID;
 
+	rvu_tim_lf_teardown(rvu, pcifunc, lf, req->ring);
+
 	return 0;
 }
 
@@ -252,7 +259,6 @@ int rvu_mbox_handler_tim_disable_ring(struct rvu *rvu,
 {
 	u16 pcifunc = req->hdr.pcifunc;
 	int lf, blkaddr;
-	u64 regval;
 
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_TIM, pcifunc);
 	if (blkaddr < 0)
@@ -262,12 +268,22 @@ int rvu_mbox_handler_tim_disable_ring(struct rvu *rvu,
 	if (lf < 0)
 		return TIM_AF_LF_INVALID;
 
-	regval = rvu_read64(rvu, blkaddr, TIM_AF_RINGX_CTL1(lf));
-	if ((regval & TIM_AF_RINGX_CTL1_ENA) == 0)
-		return TIM_AF_RING_ALREADY_DISABLED;
+	return rvu_tim_disable_lf(rvu, lf, blkaddr);
+}
 
+int rvu_tim_lf_teardown(struct rvu *rvu, u16 pcifunc, int lf, int slot)
+{
+	int blkaddr;
+
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_TIM, pcifunc);
+	if (blkaddr < 0)
+		return TIM_AF_LF_INVALID;
+
+	/* Ensure TIM ring is disabled prior to clearing the mapping */
 	rvu_tim_disable_lf(rvu, lf, blkaddr);
 
+	rvu_write64(rvu, blkaddr, TIM_AF_RINGX_GMCTL(lf), 0);
+
 	return 0;
 }
 
-- 
2.31.1

