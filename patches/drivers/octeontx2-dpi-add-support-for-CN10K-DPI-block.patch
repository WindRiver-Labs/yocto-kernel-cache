From 8d4a2735e81a50a1b10292b66a1c45e324512dde Mon Sep 17 00:00:00 2001
From: Radha Mohan Chintakuntla <radhac@marvell.com>
Date: Wed, 24 Mar 2021 01:51:12 -0700
Subject: [PATCH 1353/1921] octeontx2-dpi: add support for CN10K DPI block

This patch adds support for DPI in CN10K.
Following changes are included:
  1. DPI initialization is different from OTX2
  2. DPI_MX_VFS is increased to 32
  2. Register offsets have been changed and they now support both OTX2
     and OTX3.

Signed-off-by: Radha Mohan Chintakuntla <radhac@marvell.com>
Change-Id: I2ab96fa6d5f50c172486ccaa75414c9cb5cc015c
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/48513
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/soc/marvell/octeontx2-dpi/dpi.c |  54 +++++---
 drivers/soc/marvell/octeontx2-dpi/dpi.h | 172 +++++++++++++++++-------
 2 files changed, 155 insertions(+), 71 deletions(-)

diff --git a/drivers/soc/marvell/octeontx2-dpi/dpi.c b/drivers/soc/marvell/octeontx2-dpi/dpi.c
index 2f05269a6878..1298e8148135 100644
--- a/drivers/soc/marvell/octeontx2-dpi/dpi.c
+++ b/drivers/soc/marvell/octeontx2-dpi/dpi.c
@@ -40,6 +40,14 @@ MODULE_DESCRIPTION(DPI_DRV_STRING);
 MODULE_LICENSE("GPL v2");
 MODULE_VERSION(DPI_DRV_VERSION);
 
+static inline bool is_otx3_dpi(struct dpipf *dpi)
+{
+	if (dpi->pdev->subsystem_device >= PCI_SUBDEVID_OCTEONTX3_DPI_PF)
+		return 1;
+
+	return 0;
+}
+
 static void dpi_reg_write(struct dpipf *dpi, u64 offset, u64 val)
 {
 	writeq(val, dpi->reg_base + offset);
@@ -68,18 +76,20 @@ static int dpi_queue_init(struct dpipf *dpi, struct dpipf_vf *dpivf, u8 vf)
 	dpi_reg_write(dpi, DPI_DMAX_IBUFF_CSIZE(queue),
 		      DPI_DMA_IBUFF_CSIZE_CSIZE((u64)(buf_size / 8)));
 
-	/* IDs are already configured while crating the domains.
-	 * No need to configure here.
-	 */
-	for (engine = 0; engine < dpi_dma_engine_get_num(); engine++) {
-		/* Dont configure the queus for PKT engines */
-		if (engine >= 4)
-			break;
-
-		reg = 0;
-		reg = dpi_reg_read(dpi, DPI_DMA_ENGX_EN(engine));
-		reg |= DPI_DMA_ENG_EN_QEN(0x1 << queue);
-		dpi_reg_write(dpi, DPI_DMA_ENGX_EN(engine), reg);
+	if (!is_otx3_dpi(dpi)) {
+		/* IDs are already configured while creating the domains.
+		 * No need to configure here.
+		 */
+		for (engine = 0; engine < dpi_dma_engine_get_num(); engine++) {
+			/* Dont configure the queus for PKT engines */
+			if (engine >= 4)
+				break;
+
+			reg = 0;
+			reg = dpi_reg_read(dpi, DPI_DMA_ENGX_EN(engine));
+			reg |= DPI_DMA_ENG_EN_QEN(0x1 << queue);
+			dpi_reg_write(dpi, DPI_DMA_ENGX_EN(engine), reg);
+		}
 	}
 
 	reg = dpi_reg_read(dpi, DPI_DMAX_IDS2(queue));
@@ -151,13 +161,18 @@ static int dpi_init(struct dpipf *dpi)
 		 * When a VF is initialised corresponding bit
 		 * in the qmap will be set for all engines.
 		 */
-		dpi_reg_write(dpi, DPI_DMA_ENGX_EN(engine), 0x0ULL);
+		if (!is_otx3_dpi(dpi))
+			dpi_reg_write(dpi, DPI_DMA_ENGX_EN(engine), 0x0ULL);
 	}
 
 	reg = 0ULL;
 	reg =  (DPI_DMA_CONTROL_ZBWCSEN | DPI_DMA_CONTROL_PKT_EN |
-		DPI_DMA_CONTROL_LDWB | DPI_DMA_CONTROL_O_MODE |
-		DPI_DMA_CONTROL_DMA_ENB(0xfULL));
+		DPI_DMA_CONTROL_LDWB | DPI_DMA_CONTROL_O_MODE);
+
+	if (is_otx3_dpi(dpi))
+		reg |= DPI_DMA_CONTROL_DMA_ENB(0x3fULL);
+	else
+		reg |= DPI_DMA_CONTROL_DMA_ENB(0xfULL);
 
 	dpi_reg_write(dpi, DPI_DMA_CONTROL, reg);
 	dpi_reg_write(dpi, DPI_CTL, DPI_CTL_EN);
@@ -200,7 +215,8 @@ static int dpi_fini(struct dpipf *dpi)
 	for (engine = 0; engine < dpi_dma_engine_get_num(); engine++) {
 
 		dpi_reg_write(dpi, DPI_ENGX_BUF(engine), reg);
-		dpi_reg_write(dpi, DPI_DMA_ENGX_EN(engine), 0x0ULL);
+		if (!is_otx3_dpi(dpi))
+			dpi_reg_write(dpi, DPI_DMA_ENGX_EN(engine), 0x0ULL);
 	}
 
 	reg = 0ULL;
@@ -403,7 +419,7 @@ static ssize_t dpi_device_config_show(struct device *dev,
 	struct dpipf *dpi = pci_get_drvdata(pdev);
 	int vf_idx;
 
-	for (vf_idx = 0; vf_idx < DPI_MAX_VFS; vf_idx++) {
+	for (vf_idx = 0; vf_idx < dpi->total_vfs; vf_idx++) {
 		struct dpipf_vf *dpivf = &dpi->vf[vf_idx];
 
 		if (!dpivf->setup_done)
@@ -452,7 +468,7 @@ static int dpi_queue_config(struct pci_dev *pfdev,
 	struct dpipf *dpi = pci_get_drvdata(pfdev);
 	struct dpipf_vf *dpivf;
 
-	if (msg->s.vfid > DPI_MAX_VFS) {
+	if (msg->s.vfid > dpi->total_vfs) {
 		dev_err(dev, "Invalid vfid:%d\n", msg->s.vfid);
 		return -1;
 	}
@@ -476,7 +492,7 @@ static ssize_t dpi_device_config_store(struct device *dev,
 	struct dpipf_vf *dpivf;
 
 	memcpy(&mbox_msg, buf, count);
-	if (mbox_msg.s.vfid > DPI_MAX_VFS) {
+	if (mbox_msg.s.vfid > dpi->total_vfs) {
 		dev_err(dev, "Invalid vfid:%d\n", mbox_msg.s.vfid);
 		return -1;
 	}
diff --git a/drivers/soc/marvell/octeontx2-dpi/dpi.h b/drivers/soc/marvell/octeontx2-dpi/dpi.h
index 2806583c32ff..08810b7d1bd0 100644
--- a/drivers/soc/marvell/octeontx2-dpi/dpi.h
+++ b/drivers/soc/marvell/octeontx2-dpi/dpi.h
@@ -14,6 +14,7 @@
  /* PCI device IDs */
 #define PCI_DEVID_OCTEONTX2_DPI_PF	0xA080
 #define PCI_DEVID_OCTEONTX2_DPI_VF	0xA081
+#define PCI_SUBDEVID_OCTEONTX3_DPI_PF	0xB900
 
 /* PCI BAR nos */
 #define PCI_DPI_PF_CFG_BAR		0
@@ -24,8 +25,13 @@
 #define DPI_VF_OFFSET(x)		(0x20000000 | 0x100000 * (x))
 
 /* MSI-X interrupts */
-#define DPI_VF_MSIX_COUNT		1
-#define DPI_MAX_REQQ_INT		8
+#define DPI_MAX_REQQ_INT ({				\
+	u32 val;					\
+	val = 8;					\
+	if (is_otx3_dpi(dpi))				\
+		val = 32;				\
+	val; })						\
+
 #define DPI_MAX_CC_INT			64
 
 /* MSI-X interrupt vectors indexes */
@@ -41,7 +47,7 @@
 #define DPI_PF_RAS_IDX			0xA8
 
 #define DPI_MAX_ENGINES			6
-#define DPI_MAX_VFS			8
+#define DPI_MAX_VFS			32
 
 /****************  Macros for register modification ************/
 #define DPI_DMA_IBUFF_CSIZE_CSIZE(x)		((x) & 0x1fff)
@@ -135,55 +141,117 @@
 #define DPI_DMAX_QRST(x)			(0x30ULL | ((x) << 11))
 #define DPI_DMAX_ERR_RSP_STATUS(x)		(0x38ULL | ((x) << 11))
 
-#define DPI_CSCLK_ACTIVE_PC			(0x4000ULL)
-#define DPI_CTL					(0x4010ULL)
-#define DPI_DMA_CONTROL				(0x4018ULL)
-#define DPI_DMA_ENGX_EN(x)			(0x4040ULL | ((x) << 3))
-#define DPI_REQ_ERR_RSP				(0x4078ULL)
-#define DPI_REQ_ERR_RSP_EN			(0x4088ULL)
-#define DPI_PKT_ERR_RSP				(0x4098ULL)
-#define DPI_NCB_CFG				(0x40A0ULL)
-#define DPI_BP_TEST0				(0x40B0ULL)
-#define DPI_ENGX_BUF(x)				(0x40C0ULL | ((x) << 3))
-#define DPI_EBUS_RECAL				(0x40F0ULL)
-#define DPI_EBUS_PORTX_CFG(x)			(0x4100ULL | ((x) << 3))
-#define DPI_EBUS_PORTX_SCFG(x)			(0x4180ULL | ((x) << 3))
-#define DPI_EBUS_PORTX_ERR_INFO(x)		(0x4200ULL | ((x) << 3))
-#define DPI_EBUS_PORTX_ERR(x)			(0x4280ULL | ((x) << 3))
-#define DPI_INFO_REG				(0x4300ULL)
-#define DPI_PF_RAS				(0x4308ULL)
-#define DPI_PF_RAS_W1S				(0x4310ULL)
-#define DPI_PF_RAS_ENA_W1C			(0x4318ULL)
-#define DPI_PF_RAS_ENA_W1S			(0x4320ULL)
-#define DPI_DMA_CCX_INT(x)			(0x5000ULL | ((x) << 3))
-#define DPI_DMA_CCX_INT_W1S(x)			(0x5400ULL | ((x) << 3))
-#define DPI_DMA_CCX_INT_ENA_W1C(x)		(0x5800ULL | ((x) << 3))
-#define DPI_DMA_CCX_INT_ENA_W1S(x)		(0x5C00ULL | ((x) << 3))
-#define DPI_DMA_CCX_CNT(x)			(0x6000ULL | ((x) << 3))
-#define DPI_REQQX_INT(x)			(0x6600ULL | ((x) << 3))
-#define DPI_REQQX_INT_W1S(x)			(0x6640ULL | ((x) << 3))
-#define DPI_REQQX_INT_ENA_W1C(x)		(0x6680ULL | ((x) << 3))
-#define DPI_REQQX_INT_ENA_W1S(x)		(0x66C0ULL | ((x) << 3))
-#define DPI_EPFX_DMA_VF_LINTX(x, y)		(0x6800ULL | ((x) << 5) |\
-								((y) << 4))
-#define DPI_EPFX_DMA_VF_LINTX_W1S(x, y)		(0x6A00ULL | ((x) << 5) |\
-								((y) << 4))
-#define DPI_EPFX_DMA_VF_LINTX_ENA_W1C(x, y)	(0x6C00ULL | ((x) << 5) |\
-								((y) << 4))
-#define DPI_EPFX_DMA_VF_LINTX_ENA_W1S(x, y)	(0x6E00ULL | ((x) << 5) |\
-								((y) << 4))
-#define DPI_EPFX_MISC_LINT(x)			(0x7000ULL | ((x) << 5))
-#define DPI_EPFX_MISC_LINT_W1S(x)		(0x7008ULL | ((x) << 5))
-#define DPI_EPFX_MISC_LINT_ENA_W1C(x)		(0x7010ULL | ((x) << 5))
-#define DPI_EPFX_MISC_LINT_ENA_W1S(x)		(0x7018ULL | ((x) << 5))
-#define DPI_EPFX_PP_VF_LINTX(x, y)		(0x7200ULL | ((x) << 5) |\
-								((y) << 4))
-#define DPI_EPFX_PP_VF_LINTX_W1S(x, y)		(0x7400ULL | ((x) << 5) |\
-								((y) << 4))
-#define DPI_EPFX_PP_VF_LINTX_ENA_W1C(x, y)	(0x7600ULL | ((x) << 5) |\
-								((y) << 4))
-#define DPI_EPFX_PP_VF_LINTX_ENA_W1S(x, y)	(0x7800ULL | ((x) << 5) |\
-								((y) << 4))
+#define DPI_CSCLK_ACTIVE_PC ({				\
+	u64 offset;					\
+							\
+	offset = (0x4000ULL);				\
+	if (is_otx3_dpi(dpi))				\
+		offset = (0x10000ULL);			\
+	offset; })					\
+
+#define DPI_CTL ({					\
+	u64 offset;					\
+							\
+	offset = (0x4010ULL);				\
+	if (is_otx3_dpi(dpi))				\
+		offset = (0x10010ULL);			\
+	offset; })					\
+
+#define DPI_DMA_CONTROL ({				\
+	u64 offset;					\
+							\
+	offset = (0x4018ULL);				\
+	if (is_otx3_dpi(dpi))				\
+		offset = (0x10018ULL);			\
+	offset; })					\
+
+#define DPI_DMA_ENGX_EN(x) ({				\
+	u64 offset;					\
+							\
+	offset = (0x4040ULL | (x) << 3);		\
+	if (is_otx3_dpi(dpi))				\
+		offset = (0x10040ULL | ((x) << 3));	\
+	offset; })					\
+
+#define DPI_ENGX_BUF(x)	({				\
+	u64 offset;					\
+							\
+	offset = (0x40C0ULL | (x) << 3);		\
+	if (is_otx3_dpi(dpi))				\
+		offset = (0x100C0ULL | ((x) << 3));	\
+	offset; })					\
+
+#define DPI_EBUS_PORTX_CFG(x) ({			\
+	u64 offset;					\
+							\
+	offset = (0x4100ULL | (x) << 3);		\
+	if (is_otx3_dpi(dpi))				\
+		offset = (0x10100ULL | ((x) << 3));	\
+	offset; })					\
+
+#define DPI_PF_RAS ({					\
+	u64 offset;					\
+							\
+	offset = (0x4308ULL);				\
+	if (is_otx3_dpi(dpi))				\
+		offset = (0x10308ULL);			\
+	offset; })					\
+
+#define DPI_PF_RAS_ENA_W1C ({				\
+	u64 offset;					\
+							\
+	offset = (0x4318ULL);				\
+	if (is_otx3_dpi(dpi))				\
+		offset = (0x10318ULL);			\
+	offset; })					\
+
+#define DPI_PF_RAS_ENA_W1S ({				\
+	u64 offset;					\
+							\
+	offset = (0x4320ULL);				\
+	if (is_otx3_dpi(dpi))				\
+		offset = (0x10320ULL);			\
+	offset; })					\
+
+#define DPI_DMA_CCX_INT(x) ({				\
+	u64 offset;					\
+							\
+	offset = (0x5000ULL | (x) << 3);		\
+	if (is_otx3_dpi(dpi))				\
+		offset = (0x11000ULL | ((x) << 3));	\
+	offset; })					\
+
+#define DPI_DMA_CCX_INT_ENA_W1C(x) ({			\
+	u64 offset;					\
+							\
+	offset = (0x5800ULL | (x) << 3);		\
+	if (is_otx3_dpi(dpi))				\
+		offset = (0x11800ULL | ((x) << 3));	\
+	offset; })					\
+
+#define DPI_REQQX_INT(x) ({				\
+	u64 offset;					\
+							\
+	offset = (0x6600ULL | (x) << 3);		\
+	if (is_otx3_dpi(dpi))				\
+		offset = (0x12C00ULL | ((x) << 5));	\
+	offset; })					\
+
+#define DPI_REQQX_INT_ENA_W1C(x) ({			\
+	u64 offset;					\
+							\
+	offset = (0x6680ULL | (x) << 3);		\
+	if (is_otx3_dpi(dpi))				\
+		offset = (0x13800ULL | ((x) << 5));	\
+	offset; })					\
+
+#define DPI_REQQX_INT_ENA_W1S(x) ({			\
+	u64 offset;					\
+							\
+	offset = (0x66C0ULL | (x) << 3);		\
+	if (is_otx3_dpi(dpi))				\
+		offset = (0x13C00ULL | ((x) << 5));	\
+	offset; })					\
 
 #define DPI_EBUS_MRRS_MIN			128
 #define DPI_EBUS_MRRS_MAX			1024
-- 
2.31.1

