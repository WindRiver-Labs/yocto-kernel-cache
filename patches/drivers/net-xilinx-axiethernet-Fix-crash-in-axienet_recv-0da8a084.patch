From 353f16ef77a92a7113286be60c04fffbc19f6ec2 Mon Sep 17 00:00:00 2001
From: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
Date: Fri, 24 Jan 2020 20:52:41 +0530
Subject: [PATCH 1065/1851] net: xilinx: axiethernet: Fix crash in axienet_recv

commit f8773a4794dcc9facd22e41b3faf6e10711eaa0e from
https://github.com/Xilinx/linux-xlnx.git

In receive path the following error is seen, followed by a kernel crash:
user.err kernel: xilinx_axienet 41040000.ethernet: No memory for new_skb

This is occurring when there are memory intensive read/writes to a SD
card, and simultaneous communications on the PL PHY. The error message
is associated with the netdev_alloc_skb() function in axienet_recv(),
which is invoked from the AXI DMA ISR to process the RX BDs. Once skb
allocation fails, we break the loop but cur_p->phys still holds the
location of the buffer used for the last completed DMA transfer. On
subsequent recv call we unmap and pass the same skb again to upper
stack which results in double free. To fix it move the skb allocation
and error handling to the top of the while() loop.

Signed-off-by: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/net/ethernet/xilinx/xilinx_axienet_main.c | 11 +++++------
 1 file changed, 5 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
index e3b9a53cdbf6..d80152f646aa 100644
--- a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
@@ -1134,6 +1134,11 @@ static int axienet_recv(struct net_device *ndev, int budget,
 
 	while ((numbdfree < budget) &&
 	       (cur_p->status & XAXIDMA_BD_STS_COMPLETE_MASK)) {
+		new_skb = netdev_alloc_skb(ndev, lp->max_frm_size);
+		if (!new_skb) {
+			dev_err(lp->dev, "No memory for new_skb\n");
+			break;
+		}
 #ifdef CONFIG_AXIENET_HAS_MCDMA
 		tail_p = q->rx_bd_p + sizeof(*q->rxq_bd_v) * q->rx_bd_ci;
 #else
@@ -1210,12 +1215,6 @@ static int axienet_recv(struct net_device *ndev, int budget,
 		size += length;
 		packets++;
 
-		new_skb = netdev_alloc_skb(ndev, lp->max_frm_size);
-		if (!new_skb) {
-			dev_err(lp->dev, "No memory for new_skb\n\r");
-			break;
-		}
-
 		/* Ensure that the skb is completely updated
 		 * prio to mapping the DMA
 		 */
-- 
2.31.1

