From 4b993fdffd913b03d298393720dbb83d3a95f190 Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Tue, 29 Oct 2019 11:35:09 +0530
Subject: [PATCH 394/767] octeontx2-pf: Aggregate multiple boolean fields into
 common flags

commit 97137802696ed80c4125a40ad97f6cd43ec86240 from
git@git.assembla.com:cavium/WindRiver.linux.git

Cleaned up multiple boolean fields and flags in otx2_nic struct into
a single flags field.

Change-Id: Ic090c8b06b7cc2c19a0121c913f674330486ad4c
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/18006
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.h       | 46 +++++++------------
 .../marvell/octeontx2/nic/otx2_flows.c        | 33 +++++++------
 .../ethernet/marvell/octeontx2/nic/otx2_pf.c  | 38 ++++++++-------
 .../marvell/octeontx2/nic/otx2_txrx.c         |  4 +-
 .../ethernet/marvell/octeontx2/nic/otx2_vf.c  |  2 +-
 5 files changed, 58 insertions(+), 65 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index 821039428c7f..81c4cf8cb22c 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -223,22 +223,31 @@ struct otx2_mac_table {
 
 struct otx2_nic {
 	void __iomem		*reg_base;
-	struct pci_dev		*pdev;
-	struct device		*dev;
 	struct net_device	*netdev;
 	void			*iommu_domain;
 	u16			xtra_hdr;
 	u16			max_frs;
 
+#define OTX2_FLAG_RX_TSTAMP_ENABLED		BIT_ULL(0)
+#define OTX2_FLAG_TX_TSTAMP_ENABLED		BIT_ULL(1)
+#define OTX2_FLAG_INTF_DOWN			BIT_ULL(2)
+#define OTX2_FLAG_MCAM_ENTRIES_ALLOC		BIT_ULL(3)
+#define OTX2_FLAG_NTUPLE_SUPPORT		BIT_ULL(4)
+#define OTX2_FLAG_UCAST_FLTR_SUPPORT		BIT_ULL(5)
+#define OTX2_FLAG_RX_VLAN_SUPPORT		BIT_ULL(6)
+	u64			flags;
+
 	struct otx2_qset	qset;
 	struct otx2_hw		hw;
+	struct pci_dev		*pdev;
+	struct device		*dev;
+
+	/* Mbox */
 	struct mbox		mbox;
 	struct mbox		*mbox_pfvf;
 	struct workqueue_struct *mbox_wq;
 	struct workqueue_struct *mbox_pfvf_wq;
-	u8			intf_down;
 
-	u16			bpid[NIX_MAX_BPID_CHAN];
 	u16			pcifunc;
 	u16			rx_chan_base;
 	u16			tx_chan_base;
@@ -250,26 +259,20 @@ struct otx2_nic {
 	struct work_struct	reset_task;
 	u64			reset_count;
 	u8			total_vfs;
+	u16			bpid[NIX_MAX_BPID_CHAN];
 	struct otx2_vf_config	*vf_configs;
 	struct cgx_link_user_info linfo;
+	struct otx2_ptp		*ptp;
 
-	bool			entries_alloc;
+	/* NPC MCAM */
 	u32			nr_flows;
 	u32                     ntuple_max_flows;
-#define OTX2_NTUPLE_FILTER_CAPABLE		0
-#define OTX2_UNICAST_FILTER_CAPABLE		1
-#define OTX2_RX_VLAN_OFFLOAD_CAPABLE		2
-	unsigned long           priv_flags;
-
 	u16			entry_list[NPC_MAX_NONCONTIG_ENTRIES];
 	struct list_head	flows;
+
 	struct workqueue_struct	*flr_wq;
 	struct flr_work		*flr_wrk;
 	struct refill_work	*refill_wrk;
-
-	u8			hw_rx_tstamp;
-	u8			hw_tx_tstamp;
-	struct otx2_ptp		*ptp;
 	struct otx2_mac_table	*mac_table;
 	struct workqueue_struct	*otx2_ndo_wq;
 	struct work_struct	otx2_rx_mode_work;
@@ -685,19 +688,4 @@ int otx2_enable_rxvlan(struct otx2_nic *pf, bool enable);
 int otx2smqvf_probe(struct otx2_nic *vf);
 int otx2smqvf_remove(struct otx2_nic *vf);
 
-/* OTX2_NIC access priv_flags */
-static inline void otx2_nic_enable_feature(struct otx2_nic *pf,
-					   unsigned long nr) {
-	set_bit(nr, &pf->priv_flags);
-}
-
-static inline void otx2_nic_disable_feature(struct otx2_nic *pf,
-					    unsigned long nr) {
-	clear_bit(nr, &pf->priv_flags);
-}
-
-static inline int otx2_nic_is_feature_enabled(struct otx2_nic *pf,
-					      unsigned long nr) {
-	return test_bit(nr, &pf->priv_flags);
-}
 #endif /* OTX2_COMMON_H */
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_flows.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_flows.c
index 78e9a851d594..1d4de95fcadf 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_flows.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_flows.c
@@ -37,10 +37,8 @@ int otx2_mcam_flow_init(struct otx2_nic *pf)
 
 	pf->ntuple_max_flows = OTX2_MAX_NTUPLE_FLOWS;
 
-	/* support ntuple,mac filters */
-	otx2_nic_enable_feature(pf, OTX2_NTUPLE_FILTER_CAPABLE);
-	otx2_nic_enable_feature(pf, OTX2_UNICAST_FILTER_CAPABLE);
-	otx2_nic_enable_feature(pf, OTX2_RX_VLAN_OFFLOAD_CAPABLE);
+	pf->flags |= (OTX2_FLAG_NTUPLE_SUPPORT |
+		      OTX2_FLAG_UCAST_FLTR_SUPPORT | OTX2_FLAG_RX_VLAN_SUPPORT);
 
 	pf->mac_table = devm_kzalloc(pf->dev, sizeof(struct otx2_mac_table)
 					* OTX2_MAX_UNICAST_FLOWS, GFP_KERNEL);
@@ -74,8 +72,7 @@ static int otx2_alloc_mcam_entries(struct otx2_nic *pfvf)
 	int i;
 
 	otx2_mbox_lock(&pfvf->mbox);
-
-	if (pfvf->entries_alloc) {
+	if (pfvf->flags & OTX2_FLAG_MCAM_ENTRIES_ALLOC) {
 		otx2_mbox_unlock(&pfvf->mbox);
 		return 0;
 	}
@@ -106,8 +103,8 @@ static int otx2_alloc_mcam_entries(struct otx2_nic *pfvf)
 		/* support only ntuples here */
 		pfvf->ntuple_max_flows = rsp->count;
 		pfvf->netdev->priv_flags &= ~IFF_UNICAST_FLT;
-		pfvf->priv_flags &= ~(BIT(OTX2_UNICAST_FILTER_CAPABLE));
-		pfvf->priv_flags &= ~(BIT(OTX2_RX_VLAN_OFFLOAD_CAPABLE));
+		pfvf->flags &= ~OTX2_FLAG_UCAST_FLTR_SUPPORT;
+		pfvf->flags &= ~OTX2_FLAG_RX_VLAN_SUPPORT;
 		pfvf->netdev->features &= ~wanted;
 		pfvf->netdev->hw_features &= ~wanted;
 	}
@@ -115,7 +112,7 @@ static int otx2_alloc_mcam_entries(struct otx2_nic *pfvf)
 	for (i = 0; i < rsp->count; i++)
 		pfvf->entry_list[i] = rsp->entry_list[i];
 
-	pfvf->entries_alloc = true;
+	pfvf->flags |= OTX2_FLAG_MCAM_ENTRIES_ALLOC;
 	otx2_mbox_unlock(&pfvf->mbox);
 
 	return 0;
@@ -129,13 +126,15 @@ static int otx2_do_add_macfilter(struct otx2_nic *pf, const u8 *mac)
 	struct npc_install_flow_req *req;
 	int err, i;
 
-	if (!pf->entries_alloc) {
+	if (!(pf->flags & OTX2_FLAG_MCAM_ENTRIES_ALLOC)) {
 		err = otx2_alloc_mcam_entries(pf);
 		if (err)
 			return err;
 	}
-	if (!otx2_nic_is_feature_enabled(pf, OTX2_UNICAST_FILTER_CAPABLE))
+
+	if (!(pf->flags & OTX2_FLAG_UCAST_FLTR_SUPPORT))
 		return -ENOMEM;
+
 	/* dont have free mcam entries or uc list is greater than alloted */
 	if (netdev_uc_count(pf->netdev) > OTX2_MAX_UNICAST_FLOWS)
 		return -ENOMEM;
@@ -354,7 +353,7 @@ int otx2_add_flow(struct otx2_nic *pfvf, struct ethtool_rx_flow_spec *fsp)
 	if (ring >= pfvf->hw.rx_queues && fsp->ring_cookie != RX_CLS_FLOW_DISC)
 		return -EINVAL;
 
-	if (!pfvf->entries_alloc) {
+	if (!(pfvf->flags & OTX2_FLAG_MCAM_ENTRIES_ALLOC)) {
 		err = otx2_alloc_mcam_entries(pfvf);
 		if (err)
 			return err;
@@ -442,7 +441,7 @@ int otx2_destroy_ntuple_flows(struct otx2_nic *pfvf)
 	struct otx2_flow *iter, *tmp;
 	int err;
 
-	if (!pfvf->entries_alloc)
+	if (!(pfvf->flags & OTX2_FLAG_MCAM_ENTRIES_ALLOC))
 		return 0;
 
 	otx2_mbox_lock(&pfvf->mbox);
@@ -472,7 +471,7 @@ int otx2_destroy_mcam_flows(struct otx2_nic *pfvf)
 	struct otx2_flow *iter, *tmp;
 	int err;
 
-	if (!pfvf->entries_alloc)
+	if (!(pfvf->flags & OTX2_FLAG_MCAM_ENTRIES_ALLOC))
 		return 0;
 
 	/* remove all flows */
@@ -501,7 +500,7 @@ int otx2_destroy_mcam_flows(struct otx2_nic *pfvf)
 		return err;
 	}
 
-	pfvf->entries_alloc = false;
+	pfvf->flags &= ~OTX2_FLAG_MCAM_ENTRIES_ALLOC;
 	otx2_mbox_unlock(&pfvf->mbox);
 
 	return 0;
@@ -560,14 +559,14 @@ int otx2_enable_rxvlan(struct otx2_nic *pf, bool enable)
 	struct mbox_msghdr *rsp_hdr;
 	int err;
 
-	if (!pf->entries_alloc) {
+	if (!(pf->flags & OTX2_FLAG_MCAM_ENTRIES_ALLOC)) {
 		err = otx2_alloc_mcam_entries(pf);
 		if (err)
 			return err;
 	}
 
 	/* Dont have enough mcam entries */
-	if (!otx2_nic_is_feature_enabled(pf, OTX2_RX_VLAN_OFFLOAD_CAPABLE))
+	if (!(pf->flags & OTX2_FLAG_RX_VLAN_SUPPORT))
 		return -ENOMEM;
 
 	if (enable) {
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index 021f726682fd..7fb993a46eb1 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -872,7 +872,7 @@ int otx2_mbox_up_handler_cgx_link_event(struct otx2_nic *pf,
 	}
 
 	/* interface has not been fully configured yet */
-	if (pf->intf_down)
+	if (pf->flags & OTX2_FLAG_INTF_DOWN)
 		return 0;
 
 	otx2_handle_link_event(pf);
@@ -1627,7 +1627,7 @@ int otx2_open(struct net_device *netdev)
 
 	otx2_set_cints_affinity(pf);
 
-	pf->intf_down = false;
+	pf->flags &= ~OTX2_FLAG_INTF_DOWN;
 	/* 'intf_down' may be checked on any cpu */
 	smp_wmb();
 
@@ -1635,16 +1635,16 @@ int otx2_open(struct net_device *netdev)
 	if (pf->linfo.link_up && !(pf->pcifunc & RVU_PFVF_FUNC_MASK))
 		otx2_handle_link_event(pf);
 
-	if (otx2_nic_is_feature_enabled(pf, OTX2_RX_VLAN_OFFLOAD_CAPABLE))
+	if (pf->flags & OTX2_FLAG_RX_VLAN_SUPPORT)
 		otx2_enable_rxvlan(pf, true);
 
-	/* When reinitializing enable time stamping if it is enabled before */
-	if (pf->hw_tx_tstamp) {
-		pf->hw_tx_tstamp = 0;
+	/* When reinitializing enable time stamping if it was enabled before */
+	if (pf->flags & OTX2_FLAG_TX_TSTAMP_ENABLED) {
+		pf->flags &= ~OTX2_FLAG_TX_TSTAMP_ENABLED;
 		otx2_config_hw_tx_tstamp(pf, true);
 	}
-	if (pf->hw_rx_tstamp) {
-		pf->hw_rx_tstamp = 0;
+	if (pf->flags & OTX2_FLAG_RX_TSTAMP_ENABLED) {
+		pf->flags &= ~OTX2_FLAG_RX_TSTAMP_ENABLED;
 		otx2_config_hw_rx_tstamp(pf, true);
 	}
 
@@ -1687,7 +1687,7 @@ int otx2_stop(struct net_device *netdev)
 	netif_carrier_off(netdev);
 	netif_tx_stop_all_queues(netdev);
 
-	pf->intf_down = true;
+	pf->flags |= OTX2_FLAG_INTF_DOWN;
 	/* 'intf_down' may be checked on any cpu */
 	smp_wmb();
 
@@ -1827,7 +1827,7 @@ static int otx2_config_hw_rx_tstamp(struct otx2_nic *pfvf, bool enable)
 	struct msg_req *req;
 	int err;
 
-	if (!!pfvf->hw_rx_tstamp == enable)
+	if (pfvf->flags & OTX2_FLAG_RX_TSTAMP_ENABLED && enable)
 		return 0;
 
 	otx2_mbox_lock(&pfvf->mbox);
@@ -1847,7 +1847,10 @@ static int otx2_config_hw_rx_tstamp(struct otx2_nic *pfvf, bool enable)
 	}
 
 	otx2_mbox_unlock(&pfvf->mbox);
-	pfvf->hw_rx_tstamp = enable;
+	if (enable)
+		pfvf->flags |= OTX2_FLAG_RX_TSTAMP_ENABLED;
+	else
+		pfvf->flags &= ~OTX2_FLAG_RX_TSTAMP_ENABLED;
 	return 0;
 }
 
@@ -1856,7 +1859,7 @@ static int otx2_config_hw_tx_tstamp(struct otx2_nic *pfvf, bool enable)
 	struct msg_req *req;
 	int err;
 
-	if (!!pfvf->hw_tx_tstamp == enable)
+	if (pfvf->flags & OTX2_FLAG_TX_TSTAMP_ENABLED && enable)
 		return 0;
 
 	otx2_mbox_lock(&pfvf->mbox);
@@ -1876,7 +1879,10 @@ static int otx2_config_hw_tx_tstamp(struct otx2_nic *pfvf, bool enable)
 	}
 
 	otx2_mbox_unlock(&pfvf->mbox);
-	pfvf->hw_tx_tstamp = enable;
+	if (enable)
+		pfvf->flags |= OTX2_FLAG_TX_TSTAMP_ENABLED;
+	else
+		pfvf->flags &= ~OTX2_FLAG_TX_TSTAMP_ENABLED;
 	return 0;
 }
 
@@ -2180,7 +2186,7 @@ static int otx2_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	pf->pdev = pdev;
 	pf->dev = dev;
 	pf->total_vfs = pci_sriov_get_totalvfs(pdev);
-	pf->intf_down = true;
+	pf->flags |= OTX2_FLAG_INTF_DOWN;
 
 	hw = &pf->hw;
 	hw->pdev = pdev;
@@ -2495,9 +2501,9 @@ static void otx2_remove(struct pci_dev *pdev)
 
 	pf = netdev_priv(netdev);
 
-	if (pf->hw_tx_tstamp)
+	if (pf->flags & OTX2_FLAG_TX_TSTAMP_ENABLED)
 		otx2_config_hw_tx_tstamp(pf, false);
-	if (pf->hw_rx_tstamp)
+	if (pf->flags & OTX2_FLAG_RX_TSTAMP_ENABLED)
 		otx2_config_hw_rx_tstamp(pf, false);
 
 	/* Disable link notifications */
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
index 3290696300d9..16ce810735dd 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
@@ -184,7 +184,7 @@ static inline void otx2_set_rxtstamp(struct otx2_nic *pfvf,
 	u64 tsns;
 	int err;
 
-	if (!pfvf->hw_rx_tstamp)
+	if (!(pfvf->flags & OTX2_FLAG_RX_TSTAMP_ENABLED))
 		return;
 
 	/* The first 8 bytes is the timestamp */
@@ -499,7 +499,7 @@ int otx2_napi_handler(struct napi_struct *napi, int budget)
 
 	if (workdone < budget && napi_complete_done(napi, workdone)) {
 		/* If interface is going down, don't re-enable IRQ */
-		if (pfvf->intf_down)
+		if (pfvf->flags & OTX2_FLAG_INTF_DOWN)
 			return workdone;
 
 		/* Re-enable interrupts */
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
index c42bf0049384..129c693e62aa 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
@@ -535,7 +535,7 @@ static int otx2vf_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	vf->pdev = pdev;
 	vf->dev = dev;
 	vf->iommu_domain = iommu_get_domain_for_dev(dev);
-	vf->intf_down = true;
+	vf->flags |= OTX2_FLAG_INTF_DOWN;
 	hw = &vf->hw;
 	hw->pdev = vf->pdev;
 	hw->rx_queues = qcount;
-- 
2.31.1

