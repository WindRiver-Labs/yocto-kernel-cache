From d10222dc23c08b1430fa94fd6f719e8db8fbaf07 Mon Sep 17 00:00:00 2001
From: Rohit Visavalia <rohit.visavalia@xilinx.com>
Date: Tue, 6 Oct 2020 09:38:10 -0700
Subject: [PATCH 1709/1851] staging: xlnxsync: Reuse the xlnxsync_err_intr
 structure

commit 7aa57f0c5fbc6832a3da7daa4c809b7d5be135cf from
https://github.com/Xilinx/linux-xlnx.git

Reuse the structure xlnxsync_err_int in xlnxsync_clr_err and
xlnxsync_stat, to reduce code redundancy.

Signed-off-by: Rohit Visavalia <rohit.visavalia@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/staging/xlnxsync/xlnxsync.c | 24 ++++++++++++------------
 include/uapi/linux/xlnxsync.h       | 28 ++++------------------------
 2 files changed, 16 insertions(+), 36 deletions(-)

diff --git a/drivers/staging/xlnxsync/xlnxsync.c b/drivers/staging/xlnxsync/xlnxsync.c
index 1b810e1501b3..4dba3e8cbc9d 100644
--- a/drivers/staging/xlnxsync/xlnxsync.c
+++ b/drivers/staging/xlnxsync/xlnxsync.c
@@ -548,12 +548,12 @@ static int xlnxsync_chan_get_status(struct xlnxsync_channel *channel,
 
 	/* Update channel error status */
 	spin_lock_irqsave(&dev->irq_lock, flags);
-	status.prod_sync_err = channel->prod_sync_err;
-	status.prod_wdg_err = channel->prod_wdg_err;
-	status.cons_sync_err = channel->cons_sync_err;
-	status.cons_wdg_err = channel->cons_wdg_err;
-	status.ldiff_err = channel->ldiff_err;
-	status.cdiff_err = channel->cdiff_err;
+	status.err.prod_sync = channel->prod_sync_err;
+	status.err.prod_wdg = channel->prod_wdg_err;
+	status.err.cons_sync = channel->cons_sync_err;
+	status.err.cons_wdg = channel->cons_wdg_err;
+	status.err.ldiff = channel->ldiff_err;
+	status.err.cdiff = channel->cdiff_err;
 	spin_unlock_irqrestore(&dev->irq_lock, flags);
 
 	status.hdr_ver = XLNXSYNC_IOCTL_HDR_VER;
@@ -674,32 +674,32 @@ static int xlnxsync_chan_clr_err(struct xlnxsync_channel *channel,
 		__func__, channel->id);
 	/* Clear channel error status */
 	spin_lock_irqsave(&dev->irq_lock, flags);
-	if (errcfg.prod_sync_err) {
+	if (errcfg.err.prod_sync) {
 		dev_dbg(dev->dev, "Unmasking producer sync err\n");
 		intr_unmask_val |= XLNXSYNC_IMR_PROD_SYNC_FAIL_MASK;
 	}
 
-	if (errcfg.prod_wdg_err) {
+	if (errcfg.err.prod_wdg) {
 		dev_dbg(dev->dev, "Unmasking producer wdg err\n");
 		intr_unmask_val |= XLNXSYNC_IMR_PROD_WDG_ERR_MASK;
 	}
 
-	if (errcfg.cons_sync_err) {
+	if (errcfg.err.cons_sync) {
 		dev_dbg(dev->dev, "Unmasking consumer sync err\n");
 		intr_unmask_val |= XLNXSYNC_IMR_CONS_SYNC_FAIL_MASK;
 	}
 
-	if (errcfg.cons_wdg_err) {
+	if (errcfg.err.cons_wdg) {
 		dev_dbg(dev->dev, "Unmasking consumer wdg err\n");
 		intr_unmask_val |= XLNXSYNC_IMR_CONS_WDG_ERR_MASK;
 	}
 
-	if (errcfg.ldiff_err) {
+	if (errcfg.err.ldiff) {
 		dev_dbg(dev->dev, "Unmasking ldiff_err err\n");
 		intr_unmask_val |= XLNXSYNC_IMR_LDIFF;
 	}
 
-	if (errcfg.cdiff_err) {
+	if (errcfg.err.cdiff) {
 		dev_dbg(dev->dev, "Unmasking cdiff_err err\n");
 		intr_unmask_val |= XLNXSYNC_IMR_CDIFF;
 	}
diff --git a/include/uapi/linux/xlnxsync.h b/include/uapi/linux/xlnxsync.h
index f2f7aa19c03c..68c45c2dc330 100644
--- a/include/uapi/linux/xlnxsync.h
+++ b/include/uapi/linux/xlnxsync.h
@@ -95,21 +95,11 @@ struct xlnxsync_chan_config {
 /**
  * struct xlnxsync_clr_err - Clear channel error
  * @hdr_ver: IOCTL header version
- * @prod_sync_err: Set this to clear producer sync error
- * @prod_wdg_err: Set this to clear producer watchdog error
- * @cons_sync_err: Set this to clear consumer sync error
- * @cons_wdg_err: Set this to clear consumer watchdog error
- * @ldiff_err: Set this to clear luma difference error
- * @cdiff_err: Set this to clear chroma difference error
+ * @err: Structure for error interrupts
  */
 struct xlnxsync_clr_err {
 	u64 hdr_ver;
-	u8 prod_sync_err;
-	u8 prod_wdg_err;
-	u8 cons_sync_err;
-	u8 cons_wdg_err;
-	u8 ldiff_err;
-	u8 cdiff_err;
+	struct xlnxsync_err_intr err;
 };
 
 /**
@@ -144,23 +134,13 @@ struct xlnxsync_config {
  * @hdr_ver: IOCTL header version
  * @fbdone: for every pair of luma/chroma buffer for every producer/consumer
  * @enable: channel enable
- * @prod_sync_err: Producer synchronization error
- * @prod_wdg_err: Producer watchdog error
- * @cons_sync_err: Consumer synchronization error
- * @cons_wdg_err: Consumer watchdog error
- * @ldiff_err: Luma difference > 1 for channel
- * @cdiff_err: Chroma difference > 1 for channel
+ * @err: Structure for error interrupts
  */
 struct xlnxsync_stat {
 	u64 hdr_ver;
 	u8 fbdone[XLNXSYNC_BUF_PER_CHAN][XLNXSYNC_IO];
 	u8 enable;
-	u8 prod_sync_err;
-	u8 prod_wdg_err;
-	u8 cons_sync_err;
-	u8 cons_wdg_err;
-	u8 ldiff_err;
-	u8 cdiff_err;
+	struct xlnxsync_err_intr err;
 };
 
 #define XLNXSYNC_MAGIC			'X'
-- 
2.31.1

