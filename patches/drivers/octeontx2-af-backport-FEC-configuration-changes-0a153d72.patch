From 151561a0072e751212106758d6b032c76b04f8d0 Mon Sep 17 00:00:00 2001
From: Hariprasad Kelam <hkelam@marvell.com>
Date: Mon, 8 Mar 2021 14:20:37 +0530
Subject: [PATCH 719/767] octeontx2-af: backport FEC configuration changes

commit dfdb6b353c9e6fb29beeae4c977e266e4dfe0115 from
git@git.assembla.com:cavium/WindRiver.linux.git

This patch address below issues
	- return early on error to aid branch prediction
	- remove unneeded variables
	- add new fec mode FEC_OFF and consider it as FEC_NONE
	  as firmware treats FEC_OFF as NONE.

Change-Id: Ibca6de4ac6dfb720cbf93a51001fe3e99eb5d940
Signed-off-by: Hariprasad Kelam <hkelam@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/47401
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/cgx.c   | 52 ++++++++++---------
 .../net/ethernet/marvell/octeontx2/af/mbox.h  |  2 +
 .../ethernet/marvell/octeontx2/af/rvu_cgx.c   |  6 +--
 3 files changed, 32 insertions(+), 28 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/cgx.c b/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
index 472f622bdd8c..c653a10fd48b 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
@@ -499,28 +499,30 @@ int cgx_stats_rst(void *cgxd, int lmac_id)
 
 static int cgx_set_fec_stats_count(struct cgx_link_user_info *linfo)
 {
-	if (linfo->fec) {
-		switch (linfo->lmac_type_id) {
-		case LMAC_MODE_SGMII:
-		case LMAC_MODE_XAUI:
-		case LMAC_MODE_RXAUI:
-		case LMAC_MODE_QSGMII:
-			return 0;
-		case LMAC_MODE_10G_R:
-		case LMAC_MODE_25G_R:
-		case LMAC_MODE_100G_R:
-		case LMAC_MODE_USXGMII:
+	if (!linfo->fec)
+		return 0;
+
+	switch (linfo->lmac_type_id) {
+	case LMAC_MODE_SGMII:
+	case LMAC_MODE_XAUI:
+	case LMAC_MODE_RXAUI:
+	case LMAC_MODE_QSGMII:
+		return 0;
+	case LMAC_MODE_10G_R:
+	case LMAC_MODE_25G_R:
+	case LMAC_MODE_100G_R:
+	case LMAC_MODE_USXGMII:
+		return 1;
+	case LMAC_MODE_40G_R:
+		return 4;
+	case LMAC_MODE_50G_R:
+		if (linfo->fec == OTX2_FEC_BASER)
+			return 2;
+		else
 			return 1;
-		case LMAC_MODE_40G_R:
-			return 4;
-		case LMAC_MODE_50G_R:
-			if (linfo->fec == OTX2_FEC_BASER)
-				return 2;
-			else
-				return 1;
-		}
+	default:
+		return 0;
 	}
-	return 0;
 }
 
 int cgx_get_fec_stats(void *cgxd, int lmac_id, struct cgx_fec_stats_rsp *rsp)
@@ -1266,12 +1268,12 @@ int cgx_set_fec(u64 fec, int cgx_id, int lmac_id)
 	req = FIELD_SET(CMDREG_ID, CGX_CMD_SET_FEC, req);
 	req = FIELD_SET(CMDSETFEC, fec, req);
 	err = cgx_fwi_cmd_generic(req, &resp, cgx, lmac_id);
-	if (!err) {
-		cgx->lmac_idmap[lmac_id]->link_info.fec =
+	if (err)
+		return err;
+
+	cgx->lmac_idmap[lmac_id]->link_info.fec =
 			FIELD_GET(RESP_LINKSTAT_FEC, resp);
-		return cgx->lmac_idmap[lmac_id]->link_info.fec;
-	}
-	return err;
+	return cgx->lmac_idmap[lmac_id]->link_info.fec;
 }
 
 int cgx_get_phy_fec_stats(void *cgxd, int lmac_id)
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
index 63845402ca1f..8254f350c7e9 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
@@ -536,6 +536,8 @@ enum fec_type {
 	OTX2_FEC_NONE,
 	OTX2_FEC_BASER,
 	OTX2_FEC_RS,
+	OTX2_FEC_STATS_CNT = 2,
+	OTX2_FEC_OFF,
 };
 
 struct fec_mode {
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
index c78026ddb232..92204311860b 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
@@ -518,7 +518,6 @@ int rvu_mbox_handler_cgx_fec_stats(struct rvu *rvu,
 {
 	int pf = rvu_get_pf(req->hdr.pcifunc);
 	u8 cgx_idx, lmac;
-	int err = 0;
 	void *cgxd;
 
 	if (!is_cgx_config_permitted(rvu, req->hdr.pcifunc))
@@ -526,8 +525,7 @@ int rvu_mbox_handler_cgx_fec_stats(struct rvu *rvu,
 	rvu_get_cgx_lmac_id(rvu->pf2cgxlmac_map[pf], &cgx_idx, &lmac);
 
 	cgxd = rvu_cgx_pdata(cgx_idx, rvu);
-	err = cgx_get_fec_stats(cgxd, lmac, rsp);
-	return err;
+	return cgx_get_fec_stats(cgxd, lmac, rsp);
 }
 
 int rvu_mbox_handler_cgx_stats_rst(struct rvu *rvu, struct msg_req *req,
@@ -927,6 +925,8 @@ int rvu_mbox_handler_cgx_set_fec_param(struct rvu *rvu,
 	if (!is_pf_cgxmapped(rvu, pf))
 		return -EPERM;
 
+	if (req->fec == OTX2_FEC_OFF)
+		req->fec = OTX2_FEC_NONE;
 	rvu_get_cgx_lmac_id(rvu->pf2cgxlmac_map[pf], &cgx_id, &lmac_id);
 	rsp->fec = cgx_set_fec(req->fec, cgx_id, lmac_id);
 	return 0;
-- 
2.31.1

