From 8ce2e72de69a0dd7206648da6292c60ec1931df8 Mon Sep 17 00:00:00 2001
From: Hariprasad Kelam <hkelam@marvell.com>
Date: Tue, 3 Nov 2020 16:36:44 +0530
Subject: [PATCH 0922/1921] octeontx2-af: cn10k: refactor RPM specific features

move rpm specific features like number of lmacs etc to rpm.c file
and lmac common structures/functions to lmac_common.h file

Change-Id: Ifd939940f3bf1990aa59de98a4344cf660bcd791
Signed-off-by: Hariprasad Kelam <hkelam@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/39255
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../ethernet/marvell/octeontx2/af/Makefile    |  2 +-
 .../net/ethernet/marvell/octeontx2/af/cgx.c   | 61 ++-----------------
 .../marvell/octeontx2/af/lmac_common.h        | 55 +++++++++++++++++
 .../net/ethernet/marvell/octeontx2/af/rpm.c   | 26 ++++++++
 4 files changed, 88 insertions(+), 56 deletions(-)
 create mode 100644 drivers/net/ethernet/marvell/octeontx2/af/lmac_common.h
 create mode 100644 drivers/net/ethernet/marvell/octeontx2/af/rpm.c

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/Makefile b/drivers/net/ethernet/marvell/octeontx2/af/Makefile
index d0fa666f3aca..8adddde5c576 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/Makefile
+++ b/drivers/net/ethernet/marvell/octeontx2/af/Makefile
@@ -12,4 +12,4 @@ octeontx2_af-y := cgx.o rvu.o rvu_cgx.o rvu_npa.o rvu_nix.o \
 		  rvu_reg.o rvu_npc.o rvu_validation.o rvu_sso.o \
 		  rvu_tim.o rvu_cpt.o rvu_debugfs.o rvu_npc_fs.o \
 		  ptp.o rvu_ptp.o rvu_fixes.o rvu_sdp.o rvu_ree.o \
-		  rvu_cn10k.o
+		  rvu_cn10k.o rpm.o
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/cgx.c b/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
index b338906c1dd9..4d51c906345e 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
@@ -22,54 +22,13 @@
 
 #include "cgx.h"
 #include "rvu.h"
+#include "lmac_common.h"
 
 #define DRV_NAME	"octeontx2-cgx"
 #define DRV_STRING      "Marvell OcteonTX2 CGX/MAC Driver"
 
 #define CGX_RX_STAT_GLOBAL_INDEX	9
 
-/**
- * struct lmac
- * @wq_cmd_cmplt:	waitq to keep the process blocked until cmd completion
- * @cmd_lock:		Lock to serialize the command interface
- * @resp:		command response
- * @link_info:		link related information
- * @mac_to_index_bmap:	Mac address to CGX table index mapping
- * @event_cb:		callback for linkchange events
- * @event_cb_lock:	lock for serializing callback with unregister
- * @cmd_pend:		flag set before new command is started
- *			flag cleared after command response is received
- * @cgx:		parent cgx port
- * @lmac_id:		lmac port id
- * @name:		lmac port name
- */
-struct lmac {
-	wait_queue_head_t wq_cmd_cmplt;
-	struct mutex cmd_lock;
-	u64 resp;
-	struct cgx_link_user_info link_info;
-	struct rsrc_bmap mac_to_index_bmap;
-	struct cgx_event_cb event_cb;
-	spinlock_t event_cb_lock;
-	bool cmd_pend;
-	struct cgx *cgx;
-	u8 lmac_id;
-	char *name;
-};
-
-struct cgx {
-	void __iomem		*reg_base;
-	struct pci_dev		*pdev;
-	u8			cgx_id;
-	u8			lmac_count;
-	struct lmac		*lmac_idmap[MAX_LMAC_PER_CGX];
-	struct			work_struct cgx_cmd_work;
-	struct			workqueue_struct *cgx_cmd_workq;
-	struct list_head	cgx_list;
-	u64			hw_features;
-	struct cgx_mac_ops     *mac_ops;
-};
-
 static struct cgx_mac_ops	otx2_mac_ops    = {
 	.name		=       "cgx",
 	.csr_offset	=       0,
@@ -126,19 +85,19 @@ struct cgx_mac_ops *cgx_get_mac_ops(void *cgxd)
 	return ((struct cgx *)cgxd)->mac_ops;
 }
 
-static void cgx_write(struct cgx *cgx, u64 lmac, u64 offset, u64 val)
+void cgx_write(struct cgx *cgx, u64 lmac, u64 offset, u64 val)
 {
 	writeq(val, cgx->reg_base + (lmac << cgx->mac_ops->lmac_offset) +
 	       offset);
 }
 
-static u64 cgx_read(struct cgx *cgx, u64 lmac, u64 offset)
+u64 cgx_read(struct cgx *cgx, u64 lmac, u64 offset)
 {
 	return readq(cgx->reg_base + (lmac << cgx->mac_ops->lmac_offset) +
 		     offset);
 }
 
-static inline struct lmac *lmac_pdata(u8 lmac_id, struct cgx *cgx)
+struct lmac *lmac_pdata(u8 lmac_id, struct cgx *cgx)
 {
 	if (!cgx || lmac_id >= MAX_LMAC_PER_CGX)
 		return NULL;
@@ -928,7 +887,7 @@ static void cgx_lmac_pause_frm_config(struct cgx *cgx, int lmac_id, bool enable)
 }
 
 /* CGX Firmware interface low level support */
-static int cgx_fwi_cmd_send(u64 req, u64 *resp, struct lmac *lmac)
+int cgx_fwi_cmd_send(u64 req, u64 *resp, struct lmac *lmac)
 {
 	struct cgx *cgx = lmac->cgx;
 	struct device *dev;
@@ -976,8 +935,7 @@ static int cgx_fwi_cmd_send(u64 req, u64 *resp, struct lmac *lmac)
 	return err;
 }
 
-static inline int cgx_fwi_cmd_generic(u64 req, u64 *resp,
-				      struct cgx *cgx, int lmac_id)
+int cgx_fwi_cmd_generic(u64 req, u64 *resp, struct cgx *cgx, int lmac_id)
 {
 	struct lmac *lmac;
 	int err;
@@ -1611,13 +1569,6 @@ int cgx_get_nr_lmacs(void *cgxd)
 	return cgx_read(cgx, 0, CGXX_CMRX_RX_LMACS) & 0x7ULL;
 }
 
-int rpm_get_nr_lmacs(void *cgxd)
-{
-	struct cgx *cgx = cgxd;
-
-	return hweight8(cgx_read(cgx, 0, CGXX_CMRX_RX_LMACS) & 0xFULL);
-}
-
 static int cgx_lmac_init(struct cgx *cgx)
 {
 	struct lmac *lmac;
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/lmac_common.h b/drivers/net/ethernet/marvell/octeontx2/af/lmac_common.h
new file mode 100644
index 000000000000..f61f7c44350b
--- /dev/null
+++ b/drivers/net/ethernet/marvell/octeontx2/af/lmac_common.h
@@ -0,0 +1,55 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*  Marvell OcteonTx2 RPM driver
+ *
+ * Copyright (C) 2020 Marvell International Ltd.
+ */
+#include "rvu.h"
+#include "cgx.h"
+/**
+ * struct lmac
+ * @wq_cmd_cmplt:      waitq to keep the process blocked until cmd completion
+ * @cmd_lock:          Lock to serialize the command interface
+ * @resp:              command response
+ * @link_info:         link related information
+ * @mac_to_index_bmap: Mac address to CGX table index mapping
+ * @event_cb:          callback for linkchange events
+ * @event_cb_lock:     lock for serializing callback with unregister
+ * @cmd_pend:          flag set before new command is started
+ *                     flag cleared after command response is received
+ * @cgx:               parent cgx port
+ * @lmac_id:           lmac port id
+ * @name:              lmac port name
+ */
+struct lmac {
+	wait_queue_head_t wq_cmd_cmplt;
+	struct mutex cmd_lock;
+	u64 resp;
+	struct cgx_link_user_info link_info;
+	struct rsrc_bmap mac_to_index_bmap;
+	struct cgx_event_cb event_cb;
+	spinlock_t event_cb_lock;
+	bool cmd_pend;
+	struct cgx *cgx;
+	u8 lmac_id;
+	char *name;
+};
+
+struct cgx {
+	void __iomem            *reg_base;
+	struct pci_dev          *pdev;
+	u8                      cgx_id;
+	u8                      lmac_count;
+	struct lmac             *lmac_idmap[MAX_LMAC_PER_CGX];
+	struct                  work_struct cgx_cmd_work;
+	struct                  workqueue_struct *cgx_cmd_workq;
+	struct list_head        cgx_list;
+	u64                     hw_features;
+	struct cgx_mac_ops     *mac_ops;
+};
+
+/* Function Declarations */
+void cgx_write(struct cgx *cgx, u64 lmac, u64 offset, u64 val);
+u64 cgx_read(struct cgx *cgx, u64 lmac, u64 offset);
+struct lmac *lmac_pdata(u8 lmac_id, struct cgx *cgx);
+int cgx_fwi_cmd_send(u64 req, u64 *resp, struct lmac *lmac);
+int cgx_fwi_cmd_generic(u64 req, u64 *resp, struct cgx *cgx, int lmac_id);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rpm.c b/drivers/net/ethernet/marvell/octeontx2/af/rpm.c
new file mode 100644
index 000000000000..7d7f84df5a0b
--- /dev/null
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rpm.c
@@ -0,0 +1,26 @@
+// SPDX-License-Identifier: GPL-2.0
+/*  Marvell OcteonTx2 RPM driver
+ *
+ * Copyright (C) 2020 Marvell International Ltd.
+ *
+ */
+
+#include "cgx.h"
+#include "lmac_common.h"
+
+void rpm_write(struct cgx *rpm, u64 lmac, u64 offset, u64 val)
+{
+	cgx_write(rpm, lmac, offset, val);
+}
+
+u64 rpm_read(struct cgx *rpm, u64 lmac, u64 offset)
+{
+	return	cgx_read(rpm, lmac, offset);
+}
+
+int rpm_get_nr_lmacs(void *rpmd)
+{
+	struct cgx *rpm = rpmd;
+
+	return hweight8(rpm_read(rpm, 0, CGXX_CMRX_RX_LMACS) & 0xFULL);
+}
-- 
2.31.1

