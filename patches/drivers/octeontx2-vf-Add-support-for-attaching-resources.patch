From d2bf229c02cc34505621e56c8f14cf5b5bc0a74d Mon Sep 17 00:00:00 2001
From: Tomasz Duszynski <tduszyns@marvell.com>
Date: Thu, 4 Apr 2019 10:50:37 +0200
Subject: [PATCH 144/767] octeontx2-vf: Add support for attaching resources

commit 6cf2f218041b0b0476eeca8283683c12e3d865ff from
git@git.assembla.com:cavium/WindRiver.linux.git

VF in order to work properly needs to have some resources
attached by AF. For example a NIX resource responsible
for packet operations. While at it also add support for
handling other mbox response messages.

Change-Id: I40a39b63416c26a1ad6869bfc8c2d4e81c03c34a
Signed-off-by: Tomasz Duszynski <tduszyns@marvell.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/nic/otx2_vf.c  | 28 +++++++++++++++++--
 1 file changed, 26 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
index bff109fe38e7..89fe6b3fcc45 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
@@ -61,6 +61,22 @@ static void otx2vf_process_vfaf_mbox_msg(struct otx2_nic *vf,
 	}
 
 	switch (msg->id) {
+	case MBOX_MSG_READY:
+		vf->pcifunc = msg->pcifunc;
+		break;
+	case MBOX_MSG_MSIX_OFFSET:
+		mbox_handler_msix_offset(vf, (struct msix_offset_rsp *)msg);
+		break;
+	case MBOX_MSG_NPA_LF_ALLOC:
+		mbox_handler_npa_lf_alloc(vf, (struct npa_lf_alloc_rsp *)msg);
+		break;
+	case MBOX_MSG_NIX_LF_ALLOC:
+		mbox_handler_nix_lf_alloc(vf, (struct nix_lf_alloc_rsp *)msg);
+		break;
+	case MBOX_MSG_NIX_TXSCH_ALLOC:
+		mbox_handler_nix_txsch_alloc(vf,
+					     (struct nix_txsch_alloc_rsp *)msg);
+		break;
 	default:
 		if (msg->rc)
 			dev_err(vf->dev,
@@ -394,10 +410,15 @@ static int otx2vf_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	if (err)
 		goto err_mbox_destroy;
 
-	err = otx2_set_real_num_queues(netdev, qcount, qcount);
+	/* Request AF to attach NPA and LIX LFs to this AF */
+	err = otx2_attach_npa_nix(vf);
 	if (err)
 		goto err_disable_mbox_intr;
 
+	err = otx2_set_real_num_queues(netdev, qcount, qcount);
+	if (err)
+		goto err_detach_rsrc;
+
 	netdev->hw_features = NETIF_F_RXCSUM | NETIF_F_IP_CSUM |
 			      NETIF_F_IPV6_CSUM | NETIF_F_RXHASH |
 			      NETIF_F_SG | NETIF_F_TSO | NETIF_F_TSO6;
@@ -412,11 +433,13 @@ static int otx2vf_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	err = register_netdev(netdev);
 	if (err) {
 		dev_err(dev, "Failed to register netdevice\n");
-		goto err_disable_mbox_intr;
+		goto err_detach_rsrc;
 	}
 
 	return 0;
 
+err_detach_rsrc:
+	otx2_detach_resources(&vf->mbox);
 err_disable_mbox_intr:
 	otx2vf_disable_mbox_intr(vf);
 err_mbox_destroy:
@@ -444,6 +467,7 @@ static void otx2vf_remove(struct pci_dev *pdev)
 
 	otx2vf_disable_mbox_intr(vf);
 
+	otx2_detach_resources(&vf->mbox);
 	otx2vf_vfaf_mbox_destroy(vf);
 	pci_free_irq_vectors(vf->pdev);
 	pci_set_drvdata(pdev, NULL);
-- 
2.31.1

