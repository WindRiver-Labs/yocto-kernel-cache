From bed5201879906ec5ac4d28d780571d3ed1da1efb Mon Sep 17 00:00:00 2001
From: Nishad Saraf <nishad.saraf@xilinx.com>
Date: Tue, 6 Oct 2020 00:35:35 -0700
Subject: [PATCH 1691/1851] misc: xilinx-ai-engine: Handle error interrupts for
 partitions not yet requested

commit cb405a65e028d123c3dbdc414d880c12e0c9484c from
https://github.com/Xilinx/linux-xlnx.git

Error interrupts might be generated for partitions which are not yet
requested. Such errors could only be backtracked to the source module
when the tiles in-use are known. This change records the occurrence of
error interrupt for such a partition, and later schedules a task in
the workqueue when the partition is requested.

Signed-off-by: Nishad Saraf <nishad.saraf@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/misc/xilinx-ai-engine/ai-engine-dev.c |  3 ++
 .../xilinx-ai-engine/ai-engine-internal.h     |  5 +++
 .../xilinx-ai-engine/ai-engine-interrupt.c    | 33 +++++++++++++++----
 .../misc/xilinx-ai-engine/ai-engine-part.c    |  1 +
 4 files changed, 36 insertions(+), 6 deletions(-)

diff --git a/drivers/misc/xilinx-ai-engine/ai-engine-dev.c b/drivers/misc/xilinx-ai-engine/ai-engine-dev.c
index fc072332c40e..67f2ee0120f6 100644
--- a/drivers/misc/xilinx-ai-engine/ai-engine-dev.c
+++ b/drivers/misc/xilinx-ai-engine/ai-engine-dev.c
@@ -622,6 +622,9 @@ struct device *aie_partition_request(struct aie_partition_req *req)
 	if (ret)
 		return ERR_PTR(ret);
 
+	if (apart->error_to_report)
+		schedule_work(&apart->adev->backtrack);
+
 	return &apart->dev;
 }
 EXPORT_SYMBOL_GPL(aie_partition_request);
diff --git a/drivers/misc/xilinx-ai-engine/ai-engine-internal.h b/drivers/misc/xilinx-ai-engine/ai-engine-internal.h
index 767082bce313..454aa22dfb90 100644
--- a/drivers/misc/xilinx-ai-engine/ai-engine-internal.h
+++ b/drivers/misc/xilinx-ai-engine/ai-engine-internal.h
@@ -385,6 +385,10 @@ struct aie_part_bridge {
  * @status: indicate if the partition is in use
  * @cntrflag: partition control flag. e.g. whether to reset columns when
  *	      the partition is released
+ * @error_to_report: indicates if there are errors pending to be reported to
+ *		     the application. This value is set to true if errors are
+ *		     found during backtracking, and error interrupt was
+ *		     received when partition was not requested yet.
  */
 struct aie_partition {
 	struct list_head node;
@@ -406,6 +410,7 @@ struct aie_partition {
 	u32 partition_id;
 	u32 status;
 	u32 cntrflag;
+	u8 error_to_report;
 };
 
 extern struct class *aie_class;
diff --git a/drivers/misc/xilinx-ai-engine/ai-engine-interrupt.c b/drivers/misc/xilinx-ai-engine/ai-engine-interrupt.c
index 4a0e373640ca..aa14aef8f387 100644
--- a/drivers/misc/xilinx-ai-engine/ai-engine-interrupt.c
+++ b/drivers/misc/xilinx-ai-engine/ai-engine-interrupt.c
@@ -568,7 +568,7 @@ static void aie_l2_backtrack(struct aie_partition *apart)
 	unsigned long l2_mask = 0;
 	u32 n, ttype, l2_bitmap_offset = 0;
 	int ret;
-	bool notify = false, sched_work = false;
+	bool sched_work = false;
 
 	ret = mutex_lock_interruptible(&apart->mlock);
 	if (ret) {
@@ -591,7 +591,7 @@ static void aie_l2_backtrack(struct aie_partition *apart)
 		for_each_set_bit(n, &l2_mask,
 				 apart->adev->l2_ctrl->num_broadcasts) {
 			if (aie_l1_backtrack(apart, loc, n))
-				notify = true;
+				apart->error_to_report = 1;
 		}
 
 		aie_enable_l2_ctrl(apart, &loc, l2_mask);
@@ -617,9 +617,14 @@ static void aie_l2_backtrack(struct aie_partition *apart)
 	if (!sched_work)
 		mutex_unlock(&apart->mlock);
 
-	/* If error was assert, then notify the application */
-	if (notify && apart->error_cb.cb)
+	/*
+	 * If error was asserted or there are errors pending to be reported to
+	 * the application, then invoke callback.
+	 */
+	if (apart->error_cb.cb && apart->error_to_report) {
+		apart->error_to_report = 0;
 		apart->error_cb.cb(apart->error_cb.priv);
+	}
 }
 
 /**
@@ -654,8 +659,21 @@ void aie_array_backtrack(struct work_struct *work)
 		return;
 	}
 
-	list_for_each_entry(apart, &adev->partitions, node)
+	list_for_each_entry(apart, &adev->partitions, node) {
+		/*
+		 * If partition isn't requested yet, then only record the
+		 * occurrence of error interrupt. Such errors can only be
+		 * backtracked when the tiles in-use are known. Based on the
+		 * error_to_report value a task is scheduled in the workqueue
+		 * to backtrack this error interrupt when partition is
+		 * requested.
+		 */
+		if (!apart->status) {
+			apart->error_to_report = 1;
+			continue;
+		}
 		aie_part_backtrack(apart);
+	}
 
 	mutex_unlock(&adev->mlock);
 }
@@ -941,8 +959,11 @@ int aie_register_error_notification(struct device *dev,
 	 * which are not requested. Such errors must be reported back to the
 	 * application when a valid callback is registered.
 	 */
-	if (aie_get_error_count(apart))
+	if (apart->error_to_report) {
+		mutex_unlock(&apart->mlock);
 		schedule_work(&apart->adev->backtrack);
+		return ret;
+	}
 
 exit:
 	mutex_unlock(&apart->mlock);
diff --git a/drivers/misc/xilinx-ai-engine/ai-engine-part.c b/drivers/misc/xilinx-ai-engine/ai-engine-part.c
index 210ba7643619..bc8a11c44a77 100644
--- a/drivers/misc/xilinx-ai-engine/ai-engine-part.c
+++ b/drivers/misc/xilinx-ai-engine/ai-engine-part.c
@@ -368,6 +368,7 @@ static int aie_part_release(struct inode *inode, struct file *filp)
 	apart->error_cb.cb = NULL;
 	apart->error_cb.priv = NULL;
 	apart->status = 0;
+	apart->error_to_report = 0;
 
 	aie_part_clear_cached_events(apart);
 	aie_resource_clear_all(&apart->l2_mask);
-- 
2.31.1

