From b51696707c24a91beb28d243d69e4f0f22930b2a Mon Sep 17 00:00:00 2001
From: Naveen Mamindlapalli <naveenm@marvell.com>
Date: Wed, 12 Jan 2022 18:41:07 +0530
Subject: [PATCH 04/12] otx2-bphy-netdev: ptp: Fix issue with ptp timestamp
 reading across lmacs

commit 25345dbdd0355dc8d2598f050dffe1100602fc97 from
git@git.assembla.com:cavium/WindRiver.linux.git

The RX GPINT is common for all LMAC's per RFOE MHAB. So the RX packet
handler uses the netdev_priv structure of first valid LMAC until the
point where the code reads the PSW and get's the actual lmacid. From
that point onwards, the code uses the netdev_priv structure of that
lmacid. There is an issue where the code checks whether PTP is enabled
or not for that lmacid before learning the actual lmacid on which the
packet is received. As a result, the PTP timestamp will be always passed
as 0 to the ptp4l application. This patch fixes the issue by reading
psw timestamp unconditionally for all packets and send the timestamp
to ptp4l application properly.

Change-Id: Iaf5ccef26be0422451d260b1670112f53a137bbd
Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/69037
Reviewed-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
Tested-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
index a0c0352615b6..70e03aba8724 100644
--- a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
+++ b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
@@ -503,8 +503,7 @@ static void otx2_rfoe_process_rx_pkt(struct otx2_rfoe_ndev_priv *priv,
 		lmac_id = psw0->lmac_id;
 		jdt_iova_addr = (u64)psw0->jd_ptr;
 		psw1 = (struct rfoe_psw1_s *)(buf_ptr + 16);
-		if (priv->rx_hw_tstamp_en)
-			tstamp = psw1->ptp_timestamp;
+		tstamp = psw1->ptp_timestamp;
 	} else {
 		ecpri_psw0 = (struct rfoe_ecpri_psw0_s *)buf_ptr;
 		if (ecpri_psw0->err_sts & 0x1F) {
@@ -522,8 +521,7 @@ static void otx2_rfoe_process_rx_pkt(struct otx2_rfoe_ndev_priv *priv,
 		lmac_id = ecpri_psw0->src_id & 0x3;
 		jdt_iova_addr = (u64)ecpri_psw0->jd_ptr;
 		ecpri_psw1 = (struct rfoe_ecpri_psw1_s *)(buf_ptr + 16);
-		if (priv->rx_hw_tstamp_en)
-			tstamp = ecpri_psw1->ptp_timestamp;
+		tstamp = ecpri_psw1->ptp_timestamp;
 	}
 
 	netif_dbg(priv, rx_status, priv->netdev,
-- 
2.34.1

