From 721ae28748424d35b18684b5b306650dfb8f9fd1 Mon Sep 17 00:00:00 2001
From: Srujana Challa <schalla@marvell.com>
Date: Fri, 16 Apr 2021 11:12:40 +0530
Subject: [PATCH 1422/1921] crypto: marvell: increase CPT HW instruction queue
 length

LDWB is getting incorrectly used in HW when
CPT_AF_LF()_PTR_CTL[IQB_LDWB]=1 and CPT instruction queue has less
than 320 free entries. So, increase HW instruction queue size by 320
and give 320 entries less for SW/NIX RX as a SW workaround.

Signed-off-by: Srujana Challa <schalla@marvell.com>
Change-Id: I9015659aac1121c092ae7b1d252929608deb5e67
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/49992
Reviewed-by: Jerin Jacob Kollanukkaran <jerinj@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <SunilKovvuri.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <SunilKovvuri.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/crypto/marvell/cn10k/cn10k_cptlf.h    | 19 +++++++++++++++----
 drivers/crypto/marvell/octeontx2/otx2_cptlf.h | 19 +++++++++++++++----
 2 files changed, 30 insertions(+), 8 deletions(-)

diff --git a/drivers/crypto/marvell/cn10k/cn10k_cptlf.h b/drivers/crypto/marvell/cn10k/cn10k_cptlf.h
index 555d453ad84b..d58fe96c6187 100644
--- a/drivers/crypto/marvell/cn10k/cn10k_cptlf.h
+++ b/drivers/crypto/marvell/cn10k/cn10k_cptlf.h
@@ -23,12 +23,22 @@
  */
 #define CN10K_CPT_INST_QLEN_MSGS  ((CN10K_CPT_SIZE_DIV40 - 1) * 40)
 
+/*
+ * LDWB is getting incorrectly used when IQB_LDWB = 1 and CPT instruction
+ * queue has less than 320 free entries. So, increase HW instruction queue
+ * size by 320 and give 320 entries less for SW/NIX RX as a workaround.
+ */
+#define CN10K_CPT_INST_QLEN_EXTRA_BYTES  (320 * CN10K_CPT_INST_SIZE)
+#define CN10K_CPT_EXTRA_SIZE_DIV40       (320/40)
+
 /* CPT instruction queue length in bytes */
-#define CN10K_CPT_INST_QLEN_BYTES (CN10K_CPT_SIZE_DIV40 * 40 * \
-				  CN10K_CPT_INST_SIZE)
+#define CN10K_CPT_INST_QLEN_BYTES                                              \
+		((CN10K_CPT_SIZE_DIV40 * 40 * CN10K_CPT_INST_SIZE) +           \
+		CN10K_CPT_INST_QLEN_EXTRA_BYTES)
 
 /* CPT instruction group queue length in bytes */
-#define CN10K_CPT_INST_GRP_QLEN_BYTES (CN10K_CPT_SIZE_DIV40 * 16)
+#define CN10K_CPT_INST_GRP_QLEN_BYTES                                          \
+		((CN10K_CPT_SIZE_DIV40 + CN10K_CPT_EXTRA_SIZE_DIV40) * 16)
 
 /* CPT FC length in bytes */
 #define CN10K_CPT_Q_FC_LEN 128
@@ -190,7 +200,8 @@ static inline void cn10k_cptlf_do_set_iqueue_size(struct cn10k_cptlf_info *lf)
 {
 	union cn10k_cptx_lf_q_size lf_q_size = { .u = 0x0 };
 
-	lf_q_size.s.size_div40 = CN10K_CPT_SIZE_DIV40;
+	lf_q_size.s.size_div40 = CN10K_CPT_SIZE_DIV40 +
+				 CN10K_CPT_EXTRA_SIZE_DIV40;
 	cn10k_cpt_write64(lf->lfs->reg_base, BLKADDR_CPT0, lf->slot,
 			  CN10K_CPT_LF_Q_SIZE, lf_q_size.u);
 }
diff --git a/drivers/crypto/marvell/octeontx2/otx2_cptlf.h b/drivers/crypto/marvell/octeontx2/otx2_cptlf.h
index fd1e7dc112d2..96dfcf01b564 100644
--- a/drivers/crypto/marvell/octeontx2/otx2_cptlf.h
+++ b/drivers/crypto/marvell/octeontx2/otx2_cptlf.h
@@ -31,12 +31,22 @@
  */
 #define OTX2_CPT_INST_QLEN_MSGS	((OTX2_CPT_SIZE_DIV40 - 1) * DIV40)
 
+/*
+ * LDWB is getting incorrectly used when IQB_LDWB = 1 and CPT instruction
+ * queue has less than 320 free entries. So, increase HW instruction queue
+ * size by 320 and give 320 entries less for SW/NIX RX as a workaround.
+ */
+#define OTX2_CPT_INST_QLEN_EXTRA_BYTES  (320 * OTX2_CPT_INST_SIZE)
+#define OTX2_CPT_EXTRA_SIZE_DIV40       (320/40)
+
 /* CPT instruction queue length in bytes */
-#define OTX2_CPT_INST_QLEN_BYTES (OTX2_CPT_SIZE_DIV40 * DIV40 * \
-				  OTX2_CPT_INST_SIZE)
+#define OTX2_CPT_INST_QLEN_BYTES                                               \
+		((OTX2_CPT_SIZE_DIV40 * DIV40 * OTX2_CPT_INST_SIZE) +          \
+		OTX2_CPT_INST_QLEN_EXTRA_BYTES)
 
 /* CPT instruction group queue length in bytes */
-#define OTX2_CPT_INST_GRP_QLEN_BYTES (OTX2_CPT_SIZE_DIV40 * 16)
+#define OTX2_CPT_INST_GRP_QLEN_BYTES                                           \
+		((OTX2_CPT_SIZE_DIV40 + OTX2_CPT_EXTRA_SIZE_DIV40) * 16)
 
 /* CPT FC length in bytes */
 #define OTX2_CPT_Q_FC_LEN 128
@@ -185,7 +195,8 @@ static inline void otx2_cptlf_do_set_iqueue_size(struct otx2_cptlf_info *lf)
 {
 	union otx2_cptx_lf_q_size lf_q_size = { .u = 0x0 };
 
-	lf_q_size.s.size_div40 = OTX2_CPT_SIZE_DIV40;
+	lf_q_size.s.size_div40 = OTX2_CPT_SIZE_DIV40 +
+				 OTX2_CPT_EXTRA_SIZE_DIV40;
 	otx2_cpt_write64(lf->lfs->reg_base, lf->lfs->blkaddr, lf->slot,
 			 OTX2_CPT_LF_Q_SIZE, lf_q_size.u);
 }
-- 
2.31.1

