From 8ccda2e8ff29525394213cfe0e34c3e1a5b1420f Mon Sep 17 00:00:00 2001
From: Ugendreshar Kudupudi <ukudupudi@marvell.com>
Date: Tue, 1 Dec 2020 20:37:18 +0530
Subject: [PATCH 1454/1921] net: mvpp2: Fix mvpp2 driver debugfs callbacks

Consecutive reads to flow or parser parameters
in the mvpp2 ethernet driver, would crash the
kernel or generate page faults. This is due to
incorrect kfree usage on port and tid variables.

Signed-off-by: Ugendreshar Kudupudi <ukudupudi@marvell.com>
Change-Id: I1f21d2b412bf473378a35bd29dfe02151809fb36
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/41439
Reviewed-by: Stefan Chulski <stefanc@marvell.com>
Tested-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/50163
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/net/ethernet/marvell/mvpp2/mvpp2.h    | 22 +++++++
 .../ethernet/marvell/mvpp2/mvpp2_debugfs.c    | 63 +++++--------------
 .../net/ethernet/marvell/mvpp2/mvpp2_main.c   |  1 +
 3 files changed, 37 insertions(+), 49 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2.h b/drivers/net/ethernet/marvell/mvpp2/mvpp2.h
index 7b4814111337..098546d5130c 100644
--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2.h
+++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2.h
@@ -855,6 +855,9 @@ enum mvpp2_prs_l3_cast {
 #define MSS_THRESHOLD_START	1024
 #define MSS_FC_MAX_TIMEOUT	5000
 
+#define MVPP2_PRS_TCAM_SRAM_SIZE        256
+#define MVPP2_N_FLOWS   52
+
 /* Definitions */
 
 /* Shared Packet Processor resources */
@@ -922,6 +925,8 @@ struct mvpp2 {
 
 	/* Debugfs root entry */
 	struct dentry *dbgfs_dir;
+	struct mvpp2_dbgfs_prs_entry *dbgfs_prs_entry[MVPP2_PRS_TCAM_SRAM_SIZE];
+	struct mvpp2_dbgfs_flow_entry *dbgfs_flow_entry[MVPP2_N_FLOWS];
 
 	/* CM3 SRAM pool */
 	struct gen_pool *sram_pool;
@@ -935,6 +940,21 @@ struct mvpp2 {
 	spinlock_t mss_spinlock;
 };
 
+struct mvpp2_dbgfs_prs_entry {
+	int tid;
+	struct mvpp2 *priv;
+};
+
+struct mvpp2_dbgfs_flow_entry {
+	int flow;
+	struct mvpp2 *priv;
+};
+
+struct mvpp2_dbgfs_port_flow_entry {
+	struct mvpp2_port *port;
+	struct mvpp2_dbgfs_flow_entry *dbg_fe;
+};
+
 struct mvpp2_pcpu_stats {
 	struct	u64_stats_sync syncp;
 	u64	rx_packets;
@@ -1065,6 +1085,8 @@ struct mvpp2_port {
 
 	/* Notifier required when the port is connected to the switch */
 	struct notifier_block dsa_notifier;
+
+	struct mvpp2_dbgfs_port_flow_entry *dbgfs_port_flow_entry;
 };
 
 /* The mvpp2_tx_desc and mvpp2_rx_desc structures describe the
diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c b/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c
index d3df19feff5d..1e614771f3a1 100644
--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c
+++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c
@@ -13,21 +13,6 @@
 #include "mvpp2_prs.h"
 #include "mvpp2_cls.h"
 
-struct mvpp2_dbgfs_prs_entry {
-	int tid;
-	struct mvpp2 *priv;
-};
-
-struct mvpp2_dbgfs_flow_entry {
-	int flow;
-	struct mvpp2 *priv;
-};
-
-struct mvpp2_dbgfs_port_flow_entry {
-	struct mvpp2_port *port;
-	struct mvpp2_dbgfs_flow_entry *dbg_fe;
-};
-
 static int mvpp2_dbgfs_flow_flt_hits_show(struct seq_file *s, void *unused)
 {
 	struct mvpp2_dbgfs_flow_entry *entry = s->private;
@@ -98,19 +83,10 @@ static int mvpp2_dbgfs_flow_type_open(struct inode *inode, struct file *file)
 	return single_open(file, mvpp2_dbgfs_flow_type_show, inode->i_private);
 }
 
-static int mvpp2_dbgfs_flow_type_release(struct inode *inode, struct file *file)
-{
-	struct seq_file *seq = file->private_data;
-	struct mvpp2_dbgfs_flow_entry *flow_entry = seq->private;
-
-	kfree(flow_entry);
-	return single_release(inode, file);
-}
-
 static const struct file_operations mvpp2_dbgfs_flow_type_fops = {
 	.open = mvpp2_dbgfs_flow_type_open,
 	.read = seq_read,
-	.release = mvpp2_dbgfs_flow_type_release,
+	.release = single_release,
 };
 
 static int mvpp2_dbgfs_flow_id_show(struct seq_file *s, void *unused)
@@ -161,20 +137,10 @@ static int mvpp2_dbgfs_port_flow_hash_opt_open(struct inode *inode,
 			   inode->i_private);
 }
 
-static int mvpp2_dbgfs_port_flow_hash_opt_release(struct inode *inode,
-						  struct file *file)
-{
-	struct seq_file *seq = file->private_data;
-	struct mvpp2_dbgfs_port_flow_entry *flow_entry = seq->private;
-
-	kfree(flow_entry);
-	return single_release(inode, file);
-}
-
 static const struct file_operations mvpp2_dbgfs_port_flow_hash_opt_fops = {
 	.open = mvpp2_dbgfs_port_flow_hash_opt_open,
 	.read = seq_read,
-	.release = mvpp2_dbgfs_port_flow_hash_opt_release,
+	.release = single_release,
 };
 
 static int mvpp2_dbgfs_port_flow_engine_show(struct seq_file *s, void *unused)
@@ -498,19 +464,10 @@ static int mvpp2_dbgfs_prs_valid_open(struct inode *inode, struct file *file)
 	return single_open(file, mvpp2_dbgfs_prs_valid_show, inode->i_private);
 }
 
-static int mvpp2_dbgfs_prs_valid_release(struct inode *inode, struct file *file)
-{
-	struct seq_file *seq = file->private_data;
-	struct mvpp2_dbgfs_prs_entry *entry = seq->private;
-
-	kfree(entry);
-	return single_release(inode, file);
-}
-
 static const struct file_operations mvpp2_dbgfs_prs_valid_fops = {
 	.open = mvpp2_dbgfs_prs_valid_open,
 	.read = seq_read,
-	.release = mvpp2_dbgfs_prs_valid_release,
+	.release = single_release,
 };
 
 static int mvpp2_dbgfs_flow_port_init(struct dentry *parent,
@@ -524,13 +481,13 @@ static int mvpp2_dbgfs_flow_port_init(struct dentry *parent,
 	if (IS_ERR(port_dir))
 		return PTR_ERR(port_dir);
 
-	/* This will be freed by 'hash_opts' release op */
 	port_entry = kmalloc(sizeof(*port_entry), GFP_KERNEL);
 	if (!port_entry)
 		return -ENOMEM;
 
 	port_entry->port = port;
 	port_entry->dbg_fe = entry;
+	port->dbgfs_port_flow_entry = port_entry;
 
 	debugfs_create_file("hash_opts", 0444, port_dir, port_entry,
 			    &mvpp2_dbgfs_port_flow_hash_opt_fops);
@@ -555,13 +512,13 @@ static int mvpp2_dbgfs_flow_entry_init(struct dentry *parent,
 	if (!flow_entry_dir)
 		return -ENOMEM;
 
-	/* This will be freed by 'type' release op */
 	entry = kmalloc(sizeof(*entry), GFP_KERNEL);
 	if (!entry)
 		return -ENOMEM;
 
 	entry->flow = flow;
 	entry->priv = priv;
+	priv->dbgfs_flow_entry[flow] = entry;
 
 	debugfs_create_file("flow_hits", 0444, flow_entry_dir, entry,
 			    &mvpp2_dbgfs_flow_flt_hits_fops);
@@ -619,13 +576,13 @@ static int mvpp2_dbgfs_prs_entry_init(struct dentry *parent,
 	if (!prs_entry_dir)
 		return -ENOMEM;
 
-	/* The 'valid' entry's ops will free that */
 	entry = kmalloc(sizeof(*entry), GFP_KERNEL);
 	if (!entry)
 		return -ENOMEM;
 
 	entry->tid = tid;
 	entry->priv = priv;
+	priv->dbgfs_prs_entry[tid] = entry;
 
 	/* Create each attr */
 	debugfs_create_file("sram", 0444, prs_entry_dir, entry,
@@ -699,6 +656,14 @@ static int mvpp2_dbgfs_port_init(struct dentry *parent,
 
 void mvpp2_dbgfs_cleanup(struct mvpp2 *priv)
 {
+	int i;
+
+	for (i = 0; i < MVPP2_PRS_TCAM_SRAM_SIZE; i++)
+		kfree(priv->dbgfs_prs_entry[i]);
+
+	for (i = 0; i < MVPP2_N_FLOWS; i++)
+		kfree(priv->dbgfs_flow_entry[i]);
+
 	debugfs_remove_recursive(priv->dbgfs_dir);
 }
 
diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
index 4f66dcfb0eaf..12206c2b03fc 100644
--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
@@ -6900,6 +6900,7 @@ static void mvpp2_port_remove(struct mvpp2_port *port)
 	int i;
 
 	mvpp2_port_musdk_set(port->dev, false);
+	kfree(port->dbgfs_port_flow_entry);
 	unregister_netdev(port->dev);
 	unregister_dsa_notifier(&port->dsa_notifier);
 	if (port->phylink)
-- 
2.31.1

