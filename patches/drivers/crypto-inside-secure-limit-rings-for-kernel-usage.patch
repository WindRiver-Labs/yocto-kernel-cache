From cc069ee72e93cf42f82340276ad2b47a2033b79c Mon Sep 17 00:00:00 2001
From: Michael Shamis <michaelsh@marvell.com>
Date: Tue, 19 Jan 2021 18:04:29 +0200
Subject: [PATCH 1209/1921] crypto: inside-secure: limit rings for kernel usage

This patch allows to devide the HW rings between Kernel
and user-space. The Kernel will do basic initialization
of all rings and will allow the user-space
to use free rings which were not allocated by Kernel.

Signed-off-by: Michael Shamis <michaelsh@marvell.com>
Change-Id: If89dd96eb4a5bf76c0f08a1b4ecaab240a9fd893
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/43930
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Stefan Chulski <stefanc@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/crypto/inside-secure/safexcel.c | 18 +++++++++++++-----
 drivers/crypto/inside-secure/safexcel.h |  2 ++
 2 files changed, 15 insertions(+), 5 deletions(-)

diff --git a/drivers/crypto/inside-secure/safexcel.c b/drivers/crypto/inside-secure/safexcel.c
index 4d9d97c59ee3..e83a52184ebb 100644
--- a/drivers/crypto/inside-secure/safexcel.c
+++ b/drivers/crypto/inside-secure/safexcel.c
@@ -675,7 +675,7 @@ static int safexcel_hw_init(struct safexcel_crypto_priv *priv)
 	}
 
 	/* Command Descriptor Rings prepare */
-	for (i = 0; i < priv->config.rings; i++) {
+	for (i = 0; i < priv->config.hw_rings; i++) {
 		/* Clear interrupts for this ring */
 		writel(GENMASK(31, 0),
 		       EIP197_HIA_AIC_R(priv) + EIP197_HIA_AIC_R_ENABLE_CLR(i));
@@ -701,7 +701,7 @@ static int safexcel_hw_init(struct safexcel_crypto_priv *priv)
 	}
 
 	/* Result Descriptor Ring prepare */
-	for (i = 0; i < priv->config.rings; i++) {
+	for (i = 0; i < priv->config.hw_rings; i++) {
 		/* Disable external triggering*/
 		writel(0, EIP197_HIA_RDR(priv, i) + EIP197_HIA_xDR_CFG);
 
@@ -725,11 +725,11 @@ static int safexcel_hw_init(struct safexcel_crypto_priv *priv)
 
 	for (pe = 0; pe < priv->config.pes; pe++) {
 		/* Enable command descriptor rings */
-		writel(EIP197_DxE_THR_CTRL_EN | GENMASK(priv->config.rings - 1, 0),
+		writel(EIP197_DxE_THR_CTRL_EN | GENMASK(priv->config.hw_rings - 1, 0),
 		       EIP197_HIA_DFE_THR(priv) + EIP197_HIA_DFE_THR_CTRL(pe));
 
 		/* Enable result descriptor rings */
-		writel(EIP197_DxE_THR_CTRL_EN | GENMASK(priv->config.rings - 1, 0),
+		writel(EIP197_DxE_THR_CTRL_EN | GENMASK(priv->config.hw_rings - 1, 0),
 		       EIP197_HIA_DSE_THR(priv) + EIP197_HIA_DSE_THR_CTRL(pe));
 	}
 
@@ -1254,7 +1254,15 @@ static void safexcel_configure(struct safexcel_crypto_priv *priv)
 
 	priv->config.pes = (val >> EIP197_N_PES_OFFSET) & mask;
 
-	priv->config.rings = min_t(u32, val & GENMASK(3, 0), max_rings);
+	priv->config.hw_rings = val & EIP197_N_RINGS_MASK;
+	if (max_rings > priv->config.hw_rings) {
+		/* Invalid, use all available rings */
+		priv->config.rings = priv->config.hw_rings;
+		dev_warn(priv->dev, "requested %d rings, given only %d rings\n",
+				max_rings, priv->config.hw_rings);
+	} else {
+		priv->config.rings = max_rings;
+	}
 
 	val = (val & GENMASK(27, 25)) >> 25;
 	mask = BIT(val) - 1;
diff --git a/drivers/crypto/inside-secure/safexcel.h b/drivers/crypto/inside-secure/safexcel.h
index 930cc48a6f85..1a6b39154477 100644
--- a/drivers/crypto/inside-secure/safexcel.h
+++ b/drivers/crypto/inside-secure/safexcel.h
@@ -230,6 +230,7 @@
 /* EIP197_HIA_OPTIONS */
 #define EIP197_N_PES_OFFSET			4
 #define EIP197_N_PES_MASK			GENMASK(4, 0)
+#define EIP197_N_RINGS_MASK			GENMASK(3, 0)
 #define EIP97_N_PES_MASK			GENMASK(2, 0)
 #define EIP197_HWDATAW_OFFSET			25
 #define EIP197_HWDATAW_MASK			GENMASK(3, 0)
@@ -598,6 +599,7 @@ enum safexcel_alg_type {
 struct safexcel_config {
 	u32 pes;
 	u32 rings;
+	u32 hw_rings;
 
 	u32 cd_size;
 	u32 cd_offset;
-- 
2.31.1

