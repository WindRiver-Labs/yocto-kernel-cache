From e51d8550f3a553ec12edfbfd76c6ec02205aeab9 Mon Sep 17 00:00:00 2001
From: Srujana Challa <schalla@marvell.com>
Date: Tue, 29 Sep 2020 13:37:11 +0530
Subject: [PATCH 0913/1921] cn10k-cpt: Workaround MBOX timeout

CPT PF sends bunch of mailbox messages(~64) to AF at a time
to read/write the CPT engine registers and waits for mailbox
response for all the messages. On cn10k asim, some times
mailbox response time is crossing the MBOX_RSP_TIMEOUT value.
So, modified code to send the mailbox message one at a time
as a workaround.

Signed-off-by: Srujana Challa <schalla@marvell.com>
Change-Id: I451dbcd90f0856feb4219264926b12d9604bb975
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/36933
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../marvell/cn10k/cn10k_cpt_mbox_common.c     |  5 -----
 .../crypto/marvell/cn10k/cn10k_cptpf_ucode.c  | 19 ++++++-------------
 2 files changed, 6 insertions(+), 18 deletions(-)

diff --git a/drivers/crypto/marvell/cn10k/cn10k_cpt_mbox_common.c b/drivers/crypto/marvell/cn10k/cn10k_cpt_mbox_common.c
index 9a29689a13e3..2b71b3986a27 100644
--- a/drivers/crypto/marvell/cn10k/cn10k_cpt_mbox_common.c
+++ b/drivers/crypto/marvell/cn10k/cn10k_cpt_mbox_common.c
@@ -210,11 +210,6 @@ int cn10k_cpt_msix_offset_msg(struct pci_dev *pdev)
 	return ret;
 }
 
-int cn10k_cpt_send_af_reg_requests(struct pci_dev *pdev)
-{
-	return cn10k_cpt_send_mbox_msg(pdev);
-}
-
 int cn10k_cpt_add_read_af_reg(struct pci_dev *pdev, u64 reg, u64 *val)
 {
 	struct otx2_mbox *mbox = get_mbox(pdev);
diff --git a/drivers/crypto/marvell/cn10k/cn10k_cptpf_ucode.c b/drivers/crypto/marvell/cn10k/cn10k_cptpf_ucode.c
index ffbb288ba3ca..409aef8a2405 100644
--- a/drivers/crypto/marvell/cn10k/cn10k_cptpf_ucode.c
+++ b/drivers/crypto/marvell/cn10k/cn10k_cptpf_ucode.c
@@ -357,13 +357,11 @@ static int cpt_attach_and_enable_cores(struct cn10k_cpt_eng_grp_info *eng_grp,
 
 	/* Enable the cores */
 	for_each_set_bit(i, bmap.bits, bmap.size) {
-		ret = cn10k_cpt_add_write_af_reg(cptpf->pdev,
-						 CPT_AF_EXEX_CTL(i), 0x1);
+		ret = cn10k_cpt_write_af_reg(cptpf->pdev,
+					     CPT_AF_EXEX_CTL(i), 0x1);
 		if (ret)
 			return ret;
 	}
-	ret = cn10k_cpt_send_af_reg_requests(cptpf->pdev);
-
 	return ret;
 }
 
@@ -2039,17 +2037,13 @@ int cn10k_cpt_disable_all_cores(struct cn10k_cptpf_dev *cptpf)
 
 	/* Disengage the cores from groups */
 	for (i = 0; i < total_cores; i++) {
-		ret = cn10k_cpt_add_write_af_reg(cptpf->pdev,
-						 CPT_AF_EXEX_CTL2(i), 0x0);
+		ret = cn10k_cpt_write_af_reg(cptpf->pdev, CPT_AF_EXEX_CTL2(i),
+					     0x0);
 		if (ret)
 			return ret;
 
 		cptpf->eng_grps.eng_ref_cnt[i] = 0;
 	}
-	ret = cn10k_cpt_send_af_reg_requests(cptpf->pdev);
-	if (ret)
-		return ret;
-
 	/* Wait for cores to become idle */
 	do {
 		busy = 0;
@@ -2072,12 +2066,11 @@ int cn10k_cpt_disable_all_cores(struct cn10k_cptpf_dev *cptpf)
 
 	/* Disable the cores */
 	for (i = 0; i < total_cores; i++) {
-		ret = cn10k_cpt_add_write_af_reg(cptpf->pdev,
-						 CPT_AF_EXEX_CTL(i), 0x0);
+		ret = cn10k_cpt_write_af_reg(cptpf->pdev,
+					     CPT_AF_EXEX_CTL(i), 0x0);
 		if (ret)
 			return ret;
 	}
-	ret = cn10k_cpt_send_af_reg_requests(cptpf->pdev);
 
 	return ret;
 }
-- 
2.31.1

