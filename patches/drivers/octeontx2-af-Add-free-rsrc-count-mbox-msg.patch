From d78fc9e98ba4939d8a682743186f1435ad3acd7e Mon Sep 17 00:00:00 2001
From: Stanislaw Kardach <skardach@marvell.com>
Date: Fri, 25 Jan 2019 16:24:50 +0530
Subject: [PATCH 012/767] octeontx2-af: Add free rsrc count mbox msg

commit 6a118faaa02d41a3bdd241cac37b39b2177456aa from
git@git.assembla.com:cavium/WindRiver.linux.git

Upon receiving the MBOX_MSG_FREE_RSRC_CNT, the AF will find out the
current number of free resources and reply it back to the requester. No
guarantee is given on the future state of the free resources yet.
If another requester sends MBOX_MSG_ATTACH_RESOURCES after this call,
the number of available resources will change.

Change-Id: I8d6fd59328568815d5732164a0b10a1f9b4257e9
Signed-off-by: Stanislaw Kardach <skardach@marvell.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/mbox.h  | 18 +++++++-
 .../marvell/octeontx2/af/rvu_validation.c     | 43 +++++++++++++++++++
 .../marvell/octeontx2/af/rvu_validation.h     |  2 +
 3 files changed, 62 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
index adf7587f7a62..376aeefb02e3 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
@@ -125,7 +125,8 @@ static inline struct mbox_msghdr *otx2_mbox_alloc_msg(struct otx2_mbox *mbox,
 M(READY,		0x001, ready, msg_req, ready_msg_rsp)		\
 M(ATTACH_RESOURCES,	0x002, attach_resources, rsrc_attach, msg_rsp)	\
 M(DETACH_RESOURCES,	0x003, detach_resources, rsrc_detach, msg_rsp)	\
-M(MSIX_OFFSET,		0x004, msix_offset, msg_req, msix_offset_rsp)	\
+M(FREE_RSRC_CNT,	0x004, free_rsrc_cnt, msg_req, free_rsrcs_rsp)	\
+M(MSIX_OFFSET,		0x005, msix_offset, msg_req, msix_offset_rsp)	\
 M(VF_FLR,		0x006, vf_flr, msg_req, msg_rsp)		\
 /* CGX mbox IDs (range 0x200 - 0x3FF) */				\
 M(CGX_START_RXTX,	0x200, cgx_start_rxtx, msg_req, msg_rsp)	\
@@ -285,6 +286,21 @@ struct rsrc_detach {
 	u8 cptlfs:1;
 };
 
+/*
+ * Number of resources available to the caller.
+ * In reply to MBOX_MSG_FREE_RSRC_CNT.
+ */
+struct free_rsrcs_rsp {
+	struct mbox_msghdr hdr;
+	u16 schq[NIX_TXSCH_LVL_CNT];
+	u16  sso;
+	u16  tim;
+	u16  ssow;
+	u16  cpt;
+	u8   npa;
+	u8   nix;
+};
+
 #define MSIX_VECTOR_INVALID	0xFFFF
 #define MAX_RVU_BLKLF_CNT	256
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c
index fa9c7a8c045f..eba92628efd5 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c
@@ -205,6 +205,49 @@ static int rvu_blk_count_rsrc(struct rvu_block *block, u16 pcifunc, u8 rshift)
 	return count;
 }
 
+int rvu_mbox_handler_free_rsrc_cnt(struct rvu *rvu, struct msg_req *req,
+				   struct free_rsrcs_rsp *rsp)
+{
+	struct nix_hw *nix_hw = rvu->hw->nix0;
+	struct rvu_hwinfo *hw = rvu->hw;
+	u16 pcifunc = req->hdr.pcifunc;
+	struct rvu_block *block;
+	int lvl, pf, curlfs;
+
+	mutex_lock(&rvu->rsrc_lock);
+	pf = rvu_get_pf(pcifunc);
+
+	block = &hw->block[BLKADDR_NPA];
+	curlfs = rvu_blk_count_rsrc(block, pcifunc, RVU_PFVF_PF_SHIFT);
+	rsp->npa = rvu->pf_limits.npa->a[pf].val - curlfs;
+
+	block = &hw->block[BLKADDR_NIX0];
+	curlfs = rvu_blk_count_rsrc(block, pcifunc, RVU_PFVF_PF_SHIFT);
+	rsp->nix = rvu->pf_limits.nix->a[pf].val - curlfs;
+
+	block = &hw->block[BLKADDR_SSO];
+	curlfs = rvu_blk_count_rsrc(block, pcifunc, RVU_PFVF_PF_SHIFT);
+	rsp->sso = rvu->pf_limits.sso->a[pf].val - curlfs;
+
+	block = &hw->block[BLKADDR_SSOW];
+	curlfs = rvu_blk_count_rsrc(block, pcifunc, RVU_PFVF_PF_SHIFT);
+	rsp->ssow = rvu->pf_limits.ssow->a[pf].val - curlfs;
+
+	block = &hw->block[BLKADDR_TIM];
+	curlfs = rvu_blk_count_rsrc(block, pcifunc, RVU_PFVF_PF_SHIFT);
+	rsp->tim = rvu->pf_limits.tim->a[pf].val - curlfs;
+
+	block = &hw->block[BLKADDR_CPT0];
+	curlfs = rvu_blk_count_rsrc(block, pcifunc, RVU_PFVF_PF_SHIFT);
+	rsp->cpt = rvu->pf_limits.cpt->a[pf].val - curlfs;
+
+	for (lvl = 0; lvl < NIX_TXSCH_LVL_CNT; lvl++)
+		rsp->schq[lvl] = rvu_rsrc_free_count(&nix_hw->txsch[lvl].schq);
+	mutex_unlock(&rvu->rsrc_lock);
+
+	return 0;
+}
+
 int rvu_check_rsrc_policy(struct rvu *rvu, struct rsrc_attach *req,
 			  u16 pcifunc)
 {
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.h
index 3d3888fadadd..cff4fa80996f 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.h
@@ -61,4 +61,6 @@ void rvu_policy_destroy(struct rvu *rvu);
 int rvu_check_rsrc_policy(struct rvu *rvu,
 			  struct rsrc_attach *req, u16 pcifunc);
 
+int rvu_mbox_handler_free_rsrc_cnt(struct rvu *rvu, struct msg_req *req,
+				   struct free_rsrcs_rsp *rsp);
 #endif /* RVU_VALIDATION_H */
-- 
2.31.1

