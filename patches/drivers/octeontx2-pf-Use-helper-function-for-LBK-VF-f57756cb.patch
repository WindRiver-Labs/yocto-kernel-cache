From 9cc37f3ca28f5c733bc19f7c32379a5297099ad0 Mon Sep 17 00:00:00 2001
From: Subbaraya Sundeep <sbhatta@marvell.com>
Date: Wed, 14 Aug 2019 12:22:47 +0530
Subject: [PATCH 0266/1921] octeontx2-pf: Use helper function for LBK VF

Helper function is available to check given
device is LBK VF or not hence use it wherever
required.

Change-Id: Id0d548f51cd747fddbab7fde577d7968432b480e
Signed-off-by: Subbaraya Sundeep <sbhatta@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/14476
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.h         |  2 +-
 .../ethernet/marvell/octeontx2/nic/otx2_vf.c    | 17 +++--------------
 2 files changed, 4 insertions(+), 15 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index 1039348e2eee..af4f04a11af5 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -264,7 +264,7 @@ struct otx2_nic {
 
 static inline bool is_otx2_lbkvf(struct pci_dev *pdev)
 {
-	return (pdev->device ==  PCI_DEVID_OCTEONTX2_RVU_AFVF);
+	return pdev->device == PCI_DEVID_OCTEONTX2_RVU_AFVF;
 }
 
 static inline bool is_96xx_A0(struct pci_dev *pdev)
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
index babfb9ab7df8..2265fe1307d5 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
@@ -359,7 +359,7 @@ static int otx2vf_open(struct net_device *netdev)
 
 	/* LBKs do not receive link events so tell everyone we are up here */
 	vf = netdev_priv(netdev);
-	if (vf->tx_chan_base < SDP_CHAN_BASE) {
+	if (is_otx2_lbkvf(vf->pdev)) {
 		pr_info("%s NIC Link is UP\n", netdev->name);
 		netif_carrier_on(netdev);
 		netif_tx_start_all_queues(netdev);
@@ -370,18 +370,7 @@ static int otx2vf_open(struct net_device *netdev)
 
 static int otx2vf_stop(struct net_device *netdev)
 {
-	struct otx2_nic *vf;
-	int err;
-
-	err = otx2_stop(netdev);
-	if (err)
-		return err;
-
-	vf = netdev_priv(netdev);
-	if (vf->tx_chan_base < SDP_CHAN_BASE)
-		pr_info("%s NIC Link is DOWN\n", netdev->name);
-
-	return 0;
+	return otx2_stop(netdev);
 }
 
 static netdev_tx_t otx2vf_xmit(struct sk_buff *skb, struct net_device *netdev)
@@ -571,7 +560,7 @@ static int otx2vf_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 
 	INIT_WORK(&vf->reset_task, otx2vf_reset_task);
 
-	if (id->device == PCI_DEVID_OCTEONTX2_RVU_AFVF) {
+	if (is_otx2_lbkvf(vf->pdev)) {
 		int n;
 
 		n = (vf->pcifunc >> RVU_PFVF_FUNC_SHIFT) & RVU_PFVF_FUNC_MASK;
-- 
2.31.1

