From c0d7bb2edb10f6c0b077d705c2c4cf2d80dbd615 Mon Sep 17 00:00:00 2001
From: Vishal Sagar <vishal.sagar@xilinx.com>
Date: Wed, 27 Feb 2019 10:15:44 -0800
Subject: [PATCH 0520/1851] drm: xlnx: scaler: Add support for clock framework

commit d269b70e269669f8657ce10acdf295cf39a19ff5 from
https://github.com/Xilinx/linux-xlnx.git

Adds support for clock framework by adding new clock properties to the
device tree for AXI lite and video clock. It also adds support to enable
and disable these clocks.

This patch breaks backward compatibility as it adds clocks and
clock-name as required properties but compatible string isn't modified.

Signed-off-by: Vishal Sagar <vishal.sagar@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/gpu/drm/xlnx/xlnx_scaler.c | 42 +++++++++++++++++++++++++++++-
 1 file changed, 41 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/xlnx/xlnx_scaler.c b/drivers/gpu/drm/xlnx/xlnx_scaler.c
index 0c13d3cd5728..c80f8b8a886b 100644
--- a/drivers/gpu/drm/xlnx/xlnx_scaler.c
+++ b/drivers/gpu/drm/xlnx/xlnx_scaler.c
@@ -18,6 +18,7 @@
  * Should be integrated with plane.
  */
 
+#include <linux/clk.h>
 #include <linux/device.h>
 #include <linux/err.h>
 #include <linux/gpio/consumer.h>
@@ -717,6 +718,8 @@ static const u32 xilinx_scaler_video_fmts[] = {
  * @vscaler_coeff: The complete array of V-scaler coefficients
  * @is_polyphase: Track if scaling algorithm is polyphase or not
  * @rst_gpio: GPIO reset line to bring VPSS Scaler out of reset
+ * @ctrl_clk: AXI Lite clock
+ * @axis_clk: Video Clock
  */
 struct xilinx_scaler {
 	void __iomem *base;
@@ -739,6 +742,8 @@ struct xilinx_scaler {
 	short vscaler_coeff[XV_VSCALER_MAX_V_PHASES][XV_VSCALER_MAX_V_TAPS];
 	bool is_polyphase;
 	struct gpio_desc *rst_gpio;
+	struct clk *ctrl_clk;
+	struct clk *axis_clk;
 };
 
 static inline void xilinx_scaler_write(void __iomem *base, u32 offset, u32 val)
@@ -1336,6 +1341,20 @@ static int xilinx_scaler_parse_of(struct xilinx_scaler *scaler)
 	u32 dt_ppc;
 	struct device_node *node = scaler->dev->of_node;
 
+	scaler->ctrl_clk = devm_clk_get(scaler->dev, "aclk_ctrl");
+	if (IS_ERR(scaler->ctrl_clk)) {
+		ret = PTR_ERR(scaler->ctrl_clk);
+		dev_err(scaler->dev, "failed to get axi lite clk %d\n", ret);
+		return ret;
+	}
+
+	scaler->axis_clk = devm_clk_get(scaler->dev, "aclk_axis");
+	if (IS_ERR(scaler->axis_clk)) {
+		ret = PTR_ERR(scaler->axis_clk);
+		dev_err(scaler->dev, "failed to get video clk %d\n", ret);
+		return ret;
+	}
+
 	ret = of_property_read_u32(node, "xlnx,h-scaler-taps",
 				   &scaler->num_hori_taps);
 	if (ret < 0) {
@@ -1630,6 +1649,19 @@ static int xilinx_scaler_probe(struct platform_device *pdev)
 		dev_info(scaler->dev, "parse_of failed\n");
 		return ret;
 	}
+
+	ret = clk_prepare_enable(scaler->ctrl_clk);
+	if (ret) {
+		dev_err(scaler->dev, "unable to enable axi lite clk %d\n", ret);
+		return ret;
+	}
+
+	ret = clk_prepare_enable(scaler->axis_clk);
+	if (ret) {
+		dev_err(scaler->dev, "unable to enable video clk %d\n", ret);
+		goto err_ctrl_clk;
+	}
+
 	scaler->max_num_phases = XSCALER_MAX_PHASES;
 	scaler->max_lines = XSCALER_MAX_HEIGHT;
 	scaler->max_pixels = XSCALER_MAX_WIDTH;
@@ -1649,11 +1681,17 @@ static int xilinx_scaler_probe(struct platform_device *pdev)
 	ret = xlnx_bridge_register(&scaler->bridge);
 	if (ret) {
 		dev_info(scaler->dev, "Bridge registration failed\n");
-		return ret;
+		goto err_axis_clk;
 	}
 	dev_info(scaler->dev, "xlnx drm scaler experimental driver probed\n");
 
 	return 0;
+
+err_axis_clk:
+	clk_disable_unprepare(scaler->axis_clk);
+err_ctrl_clk:
+	clk_disable_unprepare(scaler->ctrl_clk);
+	return ret;
 }
 
 static int xilinx_scaler_remove(struct platform_device *pdev)
@@ -1661,6 +1699,8 @@ static int xilinx_scaler_remove(struct platform_device *pdev)
 	struct xilinx_scaler *scaler = platform_get_drvdata(pdev);
 
 	xlnx_bridge_unregister(&scaler->bridge);
+	clk_disable_unprepare(scaler->axis_clk);
+	clk_disable_unprepare(scaler->ctrl_clk);
 	return 0;
 }
 
-- 
2.31.1

