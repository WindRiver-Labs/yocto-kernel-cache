From bed2733284f14e80959ae8d2b3e499d05f2240d8 Mon Sep 17 00:00:00 2001
From: Hariprasad Kelam <hkelam@marvell.com>
Date: Mon, 8 Mar 2021 11:12:12 +0530
Subject: [PATCH 12/17] octeontx2-af: modify index in ethtool modes mapping

commit 84601caf8eaa48c1c535a466cbf100856ace33f5 from
git@git.assembla.com:cavium/WindRiver.linux.git

Current implementation is such that , caller passes
BIT_ULL of advertised modes. This will create problem
to hold value BIT_ULL[ETHTOOL_LINK_MODE_MASK_NBITS] in
mailbox arguments. With latest changes __ETHTOOL_LINK_MODE_MASK_NBITS
value is increased to 91.

Instead of using BIT_ULL index use advertised mode
directly. Caller is also updated to pass the same.

Change-Id: Ib6d9a9dc70e906c201ec88dad8e543f42ebbc315
Signed-off-by: Hariprasad Kelam <hkelam@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/47405
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/af/cgx.c | 64 ++++++++++++-------------
 1 file changed, 32 insertions(+), 32 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/cgx.c b/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
index 81d5f5c..da950ee 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
@@ -971,100 +971,100 @@ static void otx2_map_ethtool_link_modes(u64 bitmask,
 					struct cgx_set_link_mode_args *args)
 {
 	switch (bitmask) {
-	case BIT_ULL(ETHTOOL_LINK_MODE_10baseT_Half_BIT):
+	case  ETHTOOL_LINK_MODE_10baseT_Half_BIT:
 		set_mod_args(args, 10, 1, 1, BIT_ULL(CGX_MODE_SGMII));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_10baseT_Full_BIT):
+	case  ETHTOOL_LINK_MODE_10baseT_Full_BIT:
 		set_mod_args(args, 10, 0, 1, BIT_ULL(CGX_MODE_SGMII));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_100baseT_Half_BIT):
+	case  ETHTOOL_LINK_MODE_100baseT_Half_BIT:
 		set_mod_args(args, 100, 1, 1, BIT_ULL(CGX_MODE_SGMII));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_100baseT_Full_BIT):
+	case  ETHTOOL_LINK_MODE_100baseT_Full_BIT:
 		set_mod_args(args, 100, 0, 1, BIT_ULL(CGX_MODE_SGMII));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_1000baseT_Half_BIT):
+	case  ETHTOOL_LINK_MODE_1000baseT_Half_BIT:
 		set_mod_args(args, 1000, 1, 1, BIT_ULL(CGX_MODE_SGMII));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_1000baseT_Full_BIT):
+	case  ETHTOOL_LINK_MODE_1000baseT_Full_BIT:
 		set_mod_args(args, 1000, 0, 1, BIT_ULL(CGX_MODE_SGMII));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_1000baseX_Full_BIT):
+	case  ETHTOOL_LINK_MODE_1000baseX_Full_BIT:
 		set_mod_args(args, 1000, 0, 0, BIT_ULL(CGX_MODE_1000_BASEX));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_10000baseT_Full_BIT):
+	case  ETHTOOL_LINK_MODE_10000baseT_Full_BIT:
 		set_mod_args(args, 1000, 0, 1, BIT_ULL(CGX_MODE_QSGMII));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_10000baseKX4_Full_BIT):
+	case  ETHTOOL_LINK_MODE_10000baseKX4_Full_BIT:
 		set_mod_args(args, 10000, 0, 0, BIT_ULL(CGX_MODE_10G_C2C));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_10000baseR_FEC_BIT):
+	case  ETHTOOL_LINK_MODE_10000baseR_FEC_BIT:
 		set_mod_args(args, 10000, 0, 0, BIT_ULL(CGX_MODE_10G_C2M));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_10000baseKR_Full_BIT):
+	case  ETHTOOL_LINK_MODE_10000baseKR_Full_BIT:
 		set_mod_args(args, 10000, 0, 1, BIT_ULL(CGX_MODE_10G_KR));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_20000baseMLD2_Full_BIT):
+	case  ETHTOOL_LINK_MODE_20000baseMLD2_Full_BIT:
 		set_mod_args(args, 20000, 0, 0, BIT_ULL(CGX_MODE_20G_C2C));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_10000baseCR_Full_BIT):
+	case  ETHTOOL_LINK_MODE_10000baseCR_Full_BIT:
 		set_mod_args(args, 25000, 0, 0, BIT_ULL(CGX_MODE_25G_C2C));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_25000baseSR_Full_BIT):
+	case  ETHTOOL_LINK_MODE_25000baseSR_Full_BIT:
 		set_mod_args(args, 25000, 0, 0, BIT_ULL(CGX_MODE_25G_C2M));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_20000baseKR2_Full_BIT):
+	case  ETHTOOL_LINK_MODE_20000baseKR2_Full_BIT:
 		set_mod_args(args, 25000, 0, 0, BIT_ULL(CGX_MODE_25G_2_C2C));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_25000baseCR_Full_BIT):
+	case  ETHTOOL_LINK_MODE_25000baseCR_Full_BIT:
 		set_mod_args(args, 25000, 0, 1, BIT_ULL(CGX_MODE_25G_CR));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_25000baseKR_Full_BIT):
+	case  ETHTOOL_LINK_MODE_25000baseKR_Full_BIT:
 		set_mod_args(args, 25000, 0, 1, BIT_ULL(CGX_MODE_25G_KR));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_40000baseSR4_Full_BIT):
+	case  ETHTOOL_LINK_MODE_40000baseSR4_Full_BIT:
 		set_mod_args(args, 40000, 0, 0, BIT_ULL(CGX_MODE_40G_C2C));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_40000baseLR4_Full_BIT):
+	case  ETHTOOL_LINK_MODE_40000baseLR4_Full_BIT:
 		set_mod_args(args, 40000, 0, 0, BIT_ULL(CGX_MODE_40G_C2M));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_40000baseCR4_Full_BIT):
+	case  ETHTOOL_LINK_MODE_40000baseCR4_Full_BIT:
 		set_mod_args(args, 40000, 0, 1, BIT_ULL(CGX_MODE_40G_CR4));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_40000baseKR4_Full_BIT):
+	case  ETHTOOL_LINK_MODE_40000baseKR4_Full_BIT:
 		set_mod_args(args, 40000, 0, 1, BIT_ULL(CGX_MODE_40G_KR4));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_10000baseSR_Full_BIT):
+	case  ETHTOOL_LINK_MODE_10000baseSR_Full_BIT:
 		set_mod_args(args, 40000, 0, 0, BIT_ULL(CGX_MODE_40GAUI_C2C));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_50000baseSR2_Full_BIT):
+	case  ETHTOOL_LINK_MODE_50000baseSR2_Full_BIT:
 		set_mod_args(args, 50000, 0, 0, BIT_ULL(CGX_MODE_50G_C2C));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_56000baseKR4_Full_BIT):
+	case  ETHTOOL_LINK_MODE_56000baseKR4_Full_BIT:
 		set_mod_args(args, 50000, 0, 0, BIT_ULL(CGX_MODE_50G_4_C2C));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_10000baseLR_Full_BIT):
+	case  ETHTOOL_LINK_MODE_10000baseLR_Full_BIT:
 		set_mod_args(args, 50000, 0, 0, BIT_ULL(CGX_MODE_50G_C2M));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_50000baseCR2_Full_BIT):
+	case  ETHTOOL_LINK_MODE_50000baseCR2_Full_BIT:
 		set_mod_args(args, 50000, 0, 1, BIT_ULL(CGX_MODE_50G_CR));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_50000baseKR2_Full_BIT):
+	case  ETHTOOL_LINK_MODE_50000baseKR2_Full_BIT:
 		set_mod_args(args, 50000, 0, 1, BIT_ULL(CGX_MODE_50G_KR));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_10000baseLRM_Full_BIT):
+	case  ETHTOOL_LINK_MODE_10000baseLRM_Full_BIT:
 		set_mod_args(args, 80000, 0, 0, BIT_ULL(CGX_MODE_80GAUI_C2C));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_100000baseSR4_Full_BIT):
+	case  ETHTOOL_LINK_MODE_100000baseSR4_Full_BIT:
 		set_mod_args(args, 100000, 0, 0, BIT_ULL(CGX_MODE_100G_C2C));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_100000baseLR4_ER4_Full_BIT):
+	case  ETHTOOL_LINK_MODE_100000baseLR4_ER4_Full_BIT:
 		set_mod_args(args, 100000, 0, 0, BIT_ULL(CGX_MODE_100G_C2M));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_100000baseCR4_Full_BIT):
+	case  ETHTOOL_LINK_MODE_100000baseCR4_Full_BIT:
 		set_mod_args(args, 100000, 0, 1, BIT_ULL(CGX_MODE_100G_CR4));
 		break;
-	case  BIT_ULL(ETHTOOL_LINK_MODE_100000baseKR4_Full_BIT):
+	case  ETHTOOL_LINK_MODE_100000baseKR4_Full_BIT:
 		set_mod_args(args, 100000, 0, 1, BIT_ULL(CGX_MODE_100G_KR4));
 		break;
 	default:
-- 
1.9.1

