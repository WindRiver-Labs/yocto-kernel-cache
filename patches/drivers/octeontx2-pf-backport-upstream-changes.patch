From 8ba4ffe70a9b7e49048d3d1f91d53c77859fc05d Mon Sep 17 00:00:00 2001
From: Naveen Mamindlapalli <naveenm@marvell.com>
Date: Mon, 25 Jan 2021 11:37:02 +0530
Subject: [PATCH 1219/1921] octeontx2-pf: backport upstream changes

Backport upstream changes related to following commit-id.

commit 492cf9a1ecd4
("octeontx2-pf: Add flow classification using IP protocol")

Change-Id: I3597e7c70d5c1a365a146fdaac9d187d3427e0fc
Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/44401
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/nic/otx2_flows.c  | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_flows.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_flows.c
index 4e94864ef965..46bcf0281a59 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_flows.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_flows.c
@@ -327,14 +327,14 @@ static int otx2_prepare_ipv4_flow(struct ethtool_rx_flow_spec *fsp,
 			req->features |= BIT_ULL(NPC_DIP_IPV4);
 		}
 		pkt->etype = cpu_to_be16(ETH_P_IP);
-		pmask->etype = 0xFFFFU;
+		pmask->etype = cpu_to_be16(0xFFFF);
 		req->features |= BIT_ULL(NPC_ETYPE);
 		break;
 	case TCP_V4_FLOW:
 	case UDP_V4_FLOW:
 	case SCTP_V4_FLOW:
 		pkt->etype = cpu_to_be16(ETH_P_IP);
-		pmask->etype = 0xFFFFU;
+		pmask->etype = cpu_to_be16(0xFFFF);
 		req->features |= BIT_ULL(NPC_ETYPE);
 		if (ipv4_l4_mask->ip4src) {
 			memcpy(&pkt->ip4src, &ipv4_l4_hdr->ip4src,
@@ -384,7 +384,7 @@ static int otx2_prepare_ipv4_flow(struct ethtool_rx_flow_spec *fsp,
 	case AH_V4_FLOW:
 	case ESP_V4_FLOW:
 		pkt->etype = cpu_to_be16(ETH_P_IP);
-		pmask->etype = 0xFFFFU;
+		pmask->etype = cpu_to_be16(0xFFFF);
 		req->features |= BIT_ULL(NPC_ETYPE);
 		if (ah_esp_mask->ip4src) {
 			memcpy(&pkt->ip4src, &ah_esp_hdr->ip4src,
@@ -448,14 +448,14 @@ static int otx2_prepare_ipv6_flow(struct ethtool_rx_flow_spec *fsp,
 			req->features |= BIT_ULL(NPC_DIP_IPV6);
 		}
 		pkt->etype = cpu_to_be16(ETH_P_IPV6);
-		pmask->etype = 0xFFFFU;
+		pmask->etype = cpu_to_be16(0xFFFF);
 		req->features |= BIT_ULL(NPC_ETYPE);
 		break;
 	case TCP_V6_FLOW:
 	case UDP_V6_FLOW:
 	case SCTP_V6_FLOW:
 		pkt->etype = cpu_to_be16(ETH_P_IPV6);
-		pmask->etype = 0xFFFFU;
+		pmask->etype = cpu_to_be16(0xFFFF);
 		req->features |= BIT_ULL(NPC_ETYPE);
 		if (!ipv6_addr_any((struct in6_addr *)ipv6_l4_mask->ip6src)) {
 			memcpy(&pkt->ip6src, &ipv6_l4_hdr->ip6src,
@@ -505,7 +505,7 @@ static int otx2_prepare_ipv6_flow(struct ethtool_rx_flow_spec *fsp,
 	case AH_V6_FLOW:
 	case ESP_V6_FLOW:
 		pkt->etype = cpu_to_be16(ETH_P_IPV6);
-		pmask->etype = 0xFFFFU;
+		pmask->etype = cpu_to_be16(0xFFFF);
 		req->features |= BIT_ULL(NPC_ETYPE);
 		if (!ipv6_addr_any((struct in6_addr *)ah_esp_hdr->ip6src)) {
 			memcpy(&pkt->ip6src, &ah_esp_hdr->ip6src,
-- 
2.31.1

