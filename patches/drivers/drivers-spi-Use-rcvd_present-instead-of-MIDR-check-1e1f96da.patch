From 85a5f58a16839e165ea08769c8d98d29b56b25d1 Mon Sep 17 00:00:00 2001
From: Suneel Garapati <sgarapati@marvell.com>
Date: Wed, 25 Mar 2020 19:29:32 -0700
Subject: [PATCH 0460/1921] drivers: spi: Use rcvd_present instead of MIDR
 check

To know the presence of MPIX_RCVDX register, use rcvd_present
in MPI_STS register instead of existing check with MIDR.
This helps to work across platform models like simulator.

Change-Id: I95556fad1e2276e9267e5f77012aa9409b369ea6
Signed-off-by: Suneel Garapati <sgarapati@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/27644
Reviewed-by: Suneel Garapati <sgarapati@caviumnetworks.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/spi/spi-octeontx2.c | 13 ++++++-------
 drivers/spi/spi-octeontx2.h |  1 +
 2 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/drivers/spi/spi-octeontx2.c b/drivers/spi/spi-octeontx2.c
index ce97d4326f68..da369536e9f2 100644
--- a/drivers/spi/spi-octeontx2.c
+++ b/drivers/spi/spi-octeontx2.c
@@ -119,13 +119,8 @@ static int octeontx2_spi_do_transfer(struct octeontx2_spi *p,
 	len = xfer->len;
 
 	/* Except T96 A0, use rcvdx register for x1 uni-directional mode */
-	if (!mpi_cfg.s.iomode) {
-		if (!midr_is_cpu_model_range(read_cpuid_id(),
-					     MIDR_MRVL_OCTEONTX2_96XX,
-					     MIDR_CPU_VAR_REV(0, 0),
-					     MIDR_CPU_VAR_REV(0, 0)))
-			rx_ptr = p->register_base + OCTEONTX2_SPI_RCVD(p);
-	}
+	if (!mpi_cfg.s.iomode && p->rcvd_present)
+		rx_ptr = p->register_base + OCTEONTX2_SPI_RCVD(p);
 
 	while (len > OCTEONTX2_SPI_MAX_BYTES) {
 		if (tx_buf) {
@@ -242,6 +237,7 @@ static int octeontx2_spi_probe(struct pci_dev *pdev,
 	struct device *dev = &pdev->dev;
 	struct spi_master *master;
 	struct octeontx2_spi *p;
+	union mpix_sts mpi_sts;
 	int ret = -ENOENT;
 
 	/* may need to hunt for devtree entry */
@@ -283,6 +279,9 @@ static int octeontx2_spi_probe(struct pci_dev *pdev,
 	p->regs.rcvd = 0x2800;
 	p->last_cfg = 0x0;
 
+	mpi_sts.u64 = readq(p->register_base + OCTEONTX2_SPI_STS(p));
+	p->rcvd_present = mpi_sts.u64 & 0x4 ? true : false;
+
 	/* FIXME: need a proper clocksource object for SCLK */
 	p->clk = devm_clk_get(dev, NULL);
 	if (IS_ERR(p->clk)) {
diff --git a/drivers/spi/spi-octeontx2.h b/drivers/spi/spi-octeontx2.h
index 86b7337b697b..e06e4cd6b639 100644
--- a/drivers/spi/spi-octeontx2.h
+++ b/drivers/spi/spi-octeontx2.h
@@ -25,6 +25,7 @@ struct octeontx2_spi {
 	u64 last_cfg;
 	u64 cs_enax;
 	int sys_freq;
+	bool rcvd_present;
 	struct octeontx2_spi_regs regs;
 	struct clk *clk;
 };
-- 
2.31.1

