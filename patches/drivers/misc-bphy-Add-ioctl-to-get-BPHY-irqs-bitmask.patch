From dd41e4f830f9fa095fb4b20138f32a5dda02722d Mon Sep 17 00:00:00 2001
From: Jakub Palider <jpalider@marvell.com>
Date: Mon, 8 Mar 2021 22:48:09 +0530
Subject: [PATCH 1315/1921] misc: bphy: Add ioctl to get BPHY irqs bitmask

Availability of BPHY interrupts varies between platforms.
This patch aims at providing information about supported
interrupts numbers to userspace. The information reported
to user is a bitmask with up to 64 where each bit position
corresponds to interrupt number. If bit is set this means
that interrupt is available. For example value 0x0A,
or 00001010b, indicates that irq numbers 1 and 3 are
available.
Currently the information of supported interrupts is held
by a 64 bit variable which sets an upper limit of 64 irqs.

Change-Id: I34864c8803b0a2dadac2b410ea40801d1645ec08
Signed-off-by: Jakub Palider <jpalider@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/47667
Reviewed-by: Radha Chintakuntla <radhac@marvell.com>
Reviewed-by: Naveen Mamindlapalli <Naveen.Mamindlapalli@cavium.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/misc/otx_bphy_ctr.c | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/drivers/misc/otx_bphy_ctr.c b/drivers/misc/otx_bphy_ctr.c
index 60c9ec4a1c97..3c9ce8a77261 100644
--- a/drivers/misc/otx_bphy_ctr.c
+++ b/drivers/misc/otx_bphy_ctr.c
@@ -24,6 +24,7 @@
 #define OTX_IOC_MAGIC	0xF3
 
 static unsigned long bphy_max_irq;
+static unsigned long bphy_irq_bmask;
 static struct device *otx_device;
 static struct class *otx_class;
 static struct cdev *otx_cdev;
@@ -41,6 +42,8 @@ static struct task_struct **irq_installed_tasks;
 #define OCTEONTX_REMOVE_BPHY_PSM_ERRINT		0xc2000804
 /* no params */
 #define OCTEONTX_GET_BPHY_PSM_MAX_IRQ		0xc2000805
+/* no params */
+#define OCTEONTX_GET_BPHY_PSM_IRQS_BITMASK	0xc2000806
 
 struct otx_irq_usr_data {
 	u64	isr_base;
@@ -59,6 +62,9 @@ struct otx_irq_usr_data {
 #define OTX_IOC_GET_BPHY_MAX_IRQ \
 	_IOR(OTX_IOC_MAGIC, 3, u64)
 
+#define OTX_IOC_GET_BPHY_BMASK_IRQ \
+	_IOR(OTX_IOC_MAGIC, 4, u64)
+
 static inline int __install_el3_inthandler(unsigned long irq_num,
 					   unsigned long sp,
 					   unsigned long cpu,
@@ -166,6 +172,11 @@ static long otx_dev_ioctl(struct file *f, unsigned int cmd, unsigned long arg)
 		if (copy_to_user((u64 *)arg, &irq_num, sizeof(irq_num)))
 			return -EFAULT;
 		break;
+	case OTX_IOC_GET_BPHY_BMASK_IRQ:
+		if (copy_to_user((u64 *)arg, &bphy_irq_bmask,
+				 sizeof(bphy_irq_bmask)))
+			return -EFAULT;
+		break;
 	default:
 		return -ENOTTY;
 	}
@@ -203,6 +214,10 @@ static int otx_dev_open(struct inode *inode, struct file *fp)
 {
 	struct arm_smccc_res res;
 
+	arm_smccc_smc(OCTEONTX_GET_BPHY_PSM_IRQS_BITMASK, 0,
+		      0, 0, 0, 0, 0, 0, &res);
+	bphy_irq_bmask = res.a0;
+
 	arm_smccc_smc(OCTEONTX_GET_BPHY_PSM_MAX_IRQ, 0,
 		      0, 0, 0, 0, 0, 0, &res);
 	bphy_max_irq = res.a0;
-- 
2.31.1

