From e9d3740b6ab63475af33d0dc393e14862233e3a4 Mon Sep 17 00:00:00 2001
From: Bhaskara Budiredla <bbudiredla@marvell.com>
Date: Mon, 21 Jun 2021 10:22:55 +0530
Subject: [PATCH 1608/1921] Prefix LLC TAD events with tad_ to provide more
 clarity

To provide more clarity of the LLC-TAD events they are prefixed with
tad_. Now the tad events can be measured as follows:

    perf stat -e tad_tag_rd <application>
    perf stat -e tad_dat_msh_in_any,tad_dat_msh_out_any,tad_hit_any,tad_tag_rd <application

Change-Id: Iad45aa9e151f5e27af25319e7484a7cd4570cd81
Signed-off-by: Bhaskara Budiredla <bbudiredla@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/54496
Reviewed-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
Tested-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/perf/marvell_cn10k_tad_pmu.c | 74 ++++++++++++++--------------
 1 file changed, 37 insertions(+), 37 deletions(-)

diff --git a/drivers/perf/marvell_cn10k_tad_pmu.c b/drivers/perf/marvell_cn10k_tad_pmu.c
index 897e95525a05..99878de481f0 100644
--- a/drivers/perf/marvell_cn10k_tad_pmu.c
+++ b/drivers/perf/marvell_cn10k_tad_pmu.c
@@ -177,43 +177,43 @@ static ssize_t tad_pmu_event_show(struct device *dev,
 	})[0].attr.attr)
 
 static struct attribute *tad_pmu_event_attrs[] = {
-	TAD_PMU_EVENT_ATTR(none, 0x0),
-	TAD_PMU_EVENT_ATTR(req_msh_in_any, 0x1),
-	TAD_PMU_EVENT_ATTR(req_msh_in_mn, 0x2),
-	TAD_PMU_EVENT_ATTR(req_msh_in_exlmn, 0x3),
-	TAD_PMU_EVENT_ATTR(rsp_msh_in_any, 0x4),
-	TAD_PMU_EVENT_ATTR(rsp_msh_in_mn, 0x5),
-	TAD_PMU_EVENT_ATTR(rsp_msh_in_exlmn, 0x6),
-	TAD_PMU_EVENT_ATTR(rsp_msh_in_dss, 0x7),
-	TAD_PMU_EVENT_ATTR(rsp_msh_in_retry_dss, 0x8),
-	TAD_PMU_EVENT_ATTR(dat_msh_in_any, 0x9),
-	TAD_PMU_EVENT_ATTR(dat_msh_in_dss, 0xa),
-	TAD_PMU_EVENT_ATTR(req_msh_out_any, 0xb),
-	TAD_PMU_EVENT_ATTR(req_msh_out_dss_rd, 0xc),
-	TAD_PMU_EVENT_ATTR(req_msh_out_dss_wr, 0xd),
-	TAD_PMU_EVENT_ATTR(req_msh_out_evict, 0xe),
-	TAD_PMU_EVENT_ATTR(rsp_msh_out_any, 0xf),
-	TAD_PMU_EVENT_ATTR(rsp_msh_out_retry_exlmn, 0x10),
-	TAD_PMU_EVENT_ATTR(rsp_msh_out_retry_mn, 0x11),
-	TAD_PMU_EVENT_ATTR(rsp_msh_out_exlmn, 0x12),
-	TAD_PMU_EVENT_ATTR(rsp_msh_out_mn, 0x13),
-	TAD_PMU_EVENT_ATTR(snp_msh_out_any, 0x14),
-	TAD_PMU_EVENT_ATTR(snp_msh_out_mn, 0x15),
-	TAD_PMU_EVENT_ATTR(snp_msh_out_exlmn, 0x16),
-	TAD_PMU_EVENT_ATTR(dat_msh_out_any, 0x17),
-	TAD_PMU_EVENT_ATTR(dat_msh_out_fill, 0x18),
-	TAD_PMU_EVENT_ATTR(dat_msh_out_dss, 0x19),
-	TAD_PMU_EVENT_ATTR(alloc_dtg, 0x1a),
-	TAD_PMU_EVENT_ATTR(alloc_ltg, 0x1b),
-	TAD_PMU_EVENT_ATTR(alloc_any, 0x1c),
-	TAD_PMU_EVENT_ATTR(hit_dtg, 0x1d),
-	TAD_PMU_EVENT_ATTR(hit_ltg, 0x1e),
-	TAD_PMU_EVENT_ATTR(hit_any, 0x1f),
-	TAD_PMU_EVENT_ATTR(tag_rd, 0x20),
-	TAD_PMU_EVENT_ATTR(dat_rd, 0x21),
-	TAD_PMU_EVENT_ATTR(dat_rd_byp, 0x22),
-	TAD_PMU_EVENT_ATTR(ifb_occ, 0x23),
-	TAD_PMU_EVENT_ATTR(req_occ, 0x24),
+	TAD_PMU_EVENT_ATTR(tad_none, 0x0),
+	TAD_PMU_EVENT_ATTR(tad_req_msh_in_any, 0x1),
+	TAD_PMU_EVENT_ATTR(tad_req_msh_in_mn, 0x2),
+	TAD_PMU_EVENT_ATTR(tad_req_msh_in_exlmn, 0x3),
+	TAD_PMU_EVENT_ATTR(tad_rsp_msh_in_any, 0x4),
+	TAD_PMU_EVENT_ATTR(tad_rsp_msh_in_mn, 0x5),
+	TAD_PMU_EVENT_ATTR(tad_rsp_msh_in_exlmn, 0x6),
+	TAD_PMU_EVENT_ATTR(tad_rsp_msh_in_dss, 0x7),
+	TAD_PMU_EVENT_ATTR(tad_rsp_msh_in_retry_dss, 0x8),
+	TAD_PMU_EVENT_ATTR(tad_dat_msh_in_any, 0x9),
+	TAD_PMU_EVENT_ATTR(tad_dat_msh_in_dss, 0xa),
+	TAD_PMU_EVENT_ATTR(tad_req_msh_out_any, 0xb),
+	TAD_PMU_EVENT_ATTR(tad_req_msh_out_dss_rd, 0xc),
+	TAD_PMU_EVENT_ATTR(tad_req_msh_out_dss_wr, 0xd),
+	TAD_PMU_EVENT_ATTR(tad_req_msh_out_evict, 0xe),
+	TAD_PMU_EVENT_ATTR(tad_rsp_msh_out_any, 0xf),
+	TAD_PMU_EVENT_ATTR(tad_rsp_msh_out_retry_exlmn, 0x10),
+	TAD_PMU_EVENT_ATTR(tad_rsp_msh_out_retry_mn, 0x11),
+	TAD_PMU_EVENT_ATTR(tad_rsp_msh_out_exlmn, 0x12),
+	TAD_PMU_EVENT_ATTR(tad_rsp_msh_out_mn, 0x13),
+	TAD_PMU_EVENT_ATTR(tad_snp_msh_out_any, 0x14),
+	TAD_PMU_EVENT_ATTR(tad_snp_msh_out_mn, 0x15),
+	TAD_PMU_EVENT_ATTR(tad_snp_msh_out_exlmn, 0x16),
+	TAD_PMU_EVENT_ATTR(tad_dat_msh_out_any, 0x17),
+	TAD_PMU_EVENT_ATTR(tad_dat_msh_out_fill, 0x18),
+	TAD_PMU_EVENT_ATTR(tad_dat_msh_out_dss, 0x19),
+	TAD_PMU_EVENT_ATTR(tad_alloc_dtg, 0x1a),
+	TAD_PMU_EVENT_ATTR(tad_alloc_ltg, 0x1b),
+	TAD_PMU_EVENT_ATTR(tad_alloc_any, 0x1c),
+	TAD_PMU_EVENT_ATTR(tad_hit_dtg, 0x1d),
+	TAD_PMU_EVENT_ATTR(tad_hit_ltg, 0x1e),
+	TAD_PMU_EVENT_ATTR(tad_hit_any, 0x1f),
+	TAD_PMU_EVENT_ATTR(tad_tag_rd, 0x20),
+	TAD_PMU_EVENT_ATTR(tad_dat_rd, 0x21),
+	TAD_PMU_EVENT_ATTR(tad_dat_rd_byp, 0x22),
+	TAD_PMU_EVENT_ATTR(tad_ifb_occ, 0x23),
+	TAD_PMU_EVENT_ATTR(tad_req_occ, 0x24),
 	NULL,
 };
 
-- 
2.31.1

