From 02cc0ffd5db1307140717e4d43ced9755afcaf52 Mon Sep 17 00:00:00 2001
From: Siew Chin Lim <elly.siew.chin.lim@intel.com>
Date: Thu, 26 Aug 2021 01:42:59 +0800
Subject: [PATCH 02/42] crypto: intel_fcs: support open & close service session

commit 7fc4382c6970ab7d75c2dd9170807796c217c51f from
https://github.com/altera-opensource/linux-socfpga/commits/socfpga-5.4.124-lts

Support open & close the crypto service session.

Signed-off-by: Richard Gong <richard.gong@intel.com>
Signed-off-by: Siew Chin Lim <elly.siew.chin.lim@intel.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/crypto/intel_fcs.c           | 69 ++++++++++++++++++++++++++--
 include/uapi/linux/intel_fcs-ioctl.h | 22 ++++++++-
 2 files changed, 87 insertions(+), 4 deletions(-)

diff --git a/drivers/crypto/intel_fcs.c b/drivers/crypto/intel_fcs.c
index 0e38bed29733..3005d9f81d65 100644
--- a/drivers/crypto/intel_fcs.c
+++ b/drivers/crypto/intel_fcs.c
@@ -28,7 +28,7 @@
 #define PS_BUF_SIZE		64
 #define SHA384_SIZE		48
 #define INVALID_STATUS		0xffffffff
-#define INVALID_CID		0xffffffff
+#define INVALID_ID		0xffffffff
 
 #define DEC_MIN_SZ		72
 #define DEC_MAX_SZ		32712
@@ -61,6 +61,7 @@ struct intel_fcs_priv {
 	unsigned int size;
 	unsigned int cid_low;
 	unsigned int cid_high;
+	unsigned int sid;
 };
 
 static void fcs_data_callback(struct stratix10_svc_client *client,
@@ -149,6 +150,23 @@ static void fcs_attestation_callback(struct stratix10_svc_client *client,
 	complete(&priv->completion);
 }
 
+static void fcs_crypto_sessionid_callback(struct stratix10_svc_client *client,
+					 struct stratix10_svc_cb_data *data)
+{
+	struct intel_fcs_priv *priv = client->priv;
+
+	priv->status = data->status;
+	if (data->status == BIT(SVC_STATUS_OK)) {
+		priv->status = 0;
+		priv->sid = *((unsigned int *)data->kaddr2);
+	} else if (data->status == BIT(SVC_STATUS_ERROR)) {
+		priv->status = *((unsigned int *)data->kaddr1);
+		dev_err(client->dev, "mbox_error=0x%x\n", priv->status);
+	}
+
+	complete(&priv->completion);
+}
+
 static int fcs_request_service(struct intel_fcs_priv *priv,
 			       void *msg, unsigned long timeout)
 {
@@ -1055,6 +1073,50 @@ static long fcs_ioctl(struct file *file, unsigned int cmd,
 		fcs_close_services(priv, s_buf, NULL);
 		break;
 
+	case INTEL_FCS_DEV_CRYPTO_OPEN_SESSION:
+		msg->command = COMMAND_FCS_CRYPTO_OPEN_SESSION;
+		priv->client.receive_cb = fcs_crypto_sessionid_callback;
+		ret = fcs_request_service(priv, (void *)msg,
+					  FCS_REQUEST_TIMEOUT);
+		if (ret) {
+			dev_err(dev, "failed to send the cmd=%d,ret=%d\n",
+				COMMAND_FCS_CRYPTO_OPEN_SESSION, ret);
+			return -EFAULT;
+		}
+
+		data->status = priv->status;
+		data->com_paras.s_session.sid = priv->sid;
+		if (copy_to_user((void __user *)arg, data, sizeof(*data))) {
+			dev_err(dev, "failure on copy_to_user\n");
+			ret = -EFAULT;
+		}
+		break;
+
+	case INTEL_FCS_DEV_CRYPTO_CLOSE_SESSION:
+		if (copy_from_user(data, (void __user *)arg, sizeof(*data))) {
+			dev_err(dev, "failure on copy_from_user\n");
+			return -EFAULT;
+		}
+
+		msg->command = COMMAND_FCS_CRYPTO_CLOSE_SESSION;
+		msg->arg[0] = data->com_paras.s_session.sid;
+		priv->client.receive_cb = fcs_vab_callback;
+		ret = fcs_request_service(priv, (void *)msg,
+					  FCS_REQUEST_TIMEOUT);
+		 if (ret) {
+			 dev_err(dev, "failed to send the request,ret=%d\n",
+				 ret);
+			 return -EFAULT;
+		 }
+
+		 data->status = priv->status;
+		 if (copy_to_user((void __user *)arg, data, sizeof(*data))) {
+			 dev_err(dev, "failure on copy_to_user\n");
+			 ret = -EFAULT;
+		 }
+
+		 break;
+
 	default:
 		dev_warn(dev, "shouldn't be here [0x%x]\n", cmd);
 		break;
@@ -1101,8 +1163,9 @@ static int fcs_driver_probe(struct platform_device *pdev)
 	priv->kbuf = NULL;
 	priv->size = 0;
 	priv->status = INVALID_STATUS;
-	priv->cid_low = INVALID_CID;
-	priv->cid_high = INVALID_CID;
+	priv->cid_low = INVALID_ID;
+	priv->cid_high = INVALID_ID;
+	priv->sid = INVALID_ID;
 
 	mutex_init(&priv->lock);
 	priv->chan = stratix10_svc_request_channel_byname(&priv->client,
diff --git a/include/uapi/linux/intel_fcs-ioctl.h b/include/uapi/linux/intel_fcs-ioctl.h
index 1f1aa5f0814c..52f526fe8257 100644
--- a/include/uapi/linux/intel_fcs-ioctl.h
+++ b/include/uapi/linux/intel_fcs-ioctl.h
@@ -214,6 +214,14 @@ struct fcs_rom_patch_sha384 {
 	uint32_t checksum[12];
 };
 
+/**
+ * struct fcs_crypto_service_session
+ * @sid: the crypto service session ID
+ */
+struct fcs_crypto_service_session {
+	uint32_t sid;
+};
+
 /**
  * struct intel_fcs_dev_ioct: common structure passed to Linux
  *	kernel driver for all commands.
@@ -250,6 +258,7 @@ struct intel_fcs_dev_ioctl {
 		struct fcs_attestation_certificate	certificate;
 		struct fcs_attestation_certificate_reload	c_reload;
 		struct fcs_rom_patch_sha384 sha384;
+		struct fcs_crypto_service_session	s_session;
 	} com_paras;
 };
 
@@ -295,7 +304,9 @@ enum intel_fcs_command_code {
 	INTEL_FCS_DEV_ATTESTATION_MEASUREMENT_CMD,
 	INTEL_FCS_DEV_ATTESTATION_GET_CERTIFICATE_CMD,
 	INTEL_FCS_DEV_ATTESTATION_CERTIFICATE_RELOAD_CMD,
-	INTEL_FCS_DEV_GET_ROM_PATCH_SHA384_CMD
+	INTEL_FCS_DEV_GET_ROM_PATCH_SHA384_CMD,
+	INTEL_FCS_DEV_CRYPTO_OPEN_SESSION_CMD = 0xA0,
+	INTEL_FCS_DEV_CRYPTO_CLOSE_SESSION_CMD,
 };
 
 #define INTEL_FCS_DEV_VERSION_REQUEST \
@@ -357,5 +368,14 @@ enum intel_fcs_command_code {
 #define INTEL_FCS_DEV_GET_ROM_PATCH_SHA384 \
 	_IOWR(INTEL_FCS_IOCTL, \
 	      INTEL_FCS_DEV_GET_ROM_PATCH_SHA384_CMD, struct intel_fcs_dev_ioctl)
+
+#define INTEL_FCS_DEV_CRYPTO_OPEN_SESSION \
+	_IOWR(INTEL_FCS_IOCTL, \
+	      INTEL_FCS_DEV_CRYPTO_OPEN_SESSION_CMD, struct intel_fcs_dev_ioctl)
+
+#define INTEL_FCS_DEV_CRYPTO_CLOSE_SESSION \
+	_IOWR(INTEL_FCS_IOCTL, \
+	      INTEL_FCS_DEV_CRYPTO_CLOSE_SESSION_CMD, struct intel_fcs_dev_ioctl)
+
 #endif
 
-- 
2.31.1

