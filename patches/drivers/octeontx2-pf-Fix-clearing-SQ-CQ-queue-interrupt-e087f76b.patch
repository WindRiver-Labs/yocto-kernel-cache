From 38b5675805074d1070c63e4c3edc6cdf75d0a4e5 Mon Sep 17 00:00:00 2001
From: Geetha sowjanya <gakula@marvell.com>
Date: Mon, 23 Sep 2019 15:48:54 +0530
Subject: [PATCH 0300/1921] octeontx2-pf: Fix clearing SQ/CQ queue interrupt

This patch fixes cleaning SQ/CQ queue interrupt bits and
LBK VF interface state after changing Queue length or
number of TX/RX queues using ethtool.

Change-Id: Ic0b98cc4eee22ce32c2247a8c1ffc89c3dbea6aa
Signed-off-by: Geetha sowjanya <gakula@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/16691
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.h       |  2 +
 .../marvell/octeontx2/nic/otx2_ethtool.c      | 38 +++++++++++++++++--
 .../ethernet/marvell/octeontx2/nic/otx2_pf.c  | 26 +++++++++----
 .../ethernet/marvell/octeontx2/nic/otx2_vf.c  |  9 ++---
 4 files changed, 58 insertions(+), 17 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index 9a3808fdc44f..8bdbb6a1cab3 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -604,6 +604,8 @@ void otx2vf_set_ethtool_ops(struct net_device *netdev);
 
 int otx2_open(struct net_device *netdev);
 int otx2_stop(struct net_device *netdev);
+int otx2vf_open(struct net_device *netdev);
+int otx2vf_stop(struct net_device *netdev);
 int otx2_set_real_num_queues(struct net_device *netdev,
 			     int tx_queues, int rx_queues);
 /* MCAM filter related APIs */
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
index 63c988d91d3c..ba26b99ff778 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
@@ -84,6 +84,36 @@ static const unsigned int otx2_n_dev_stats = ARRAY_SIZE(otx2_dev_stats);
 static const unsigned int otx2_n_drv_stats = ARRAY_SIZE(otx2_drv_stats);
 static const unsigned int otx2_n_queue_stats = ARRAY_SIZE(otx2_queue_stats);
 
+int __weak otx2vf_open(struct net_device *netdev)
+{
+	return 0;
+}
+
+int __weak otx2vf_stop(struct net_device *netdev)
+{
+	return 0;
+}
+
+static void otx2_dev_open(struct net_device *netdev)
+{
+	struct otx2_nic *pfvf = netdev_priv(netdev);
+
+	if (pfvf->pcifunc & RVU_PFVF_FUNC_MASK)
+		otx2vf_open(netdev);
+	else
+		otx2_open(netdev);
+}
+
+static void otx2_dev_stop(struct net_device *netdev)
+{
+	struct otx2_nic *pfvf = netdev_priv(netdev);
+
+	if (pfvf->pcifunc & RVU_PFVF_FUNC_MASK)
+		otx2vf_stop(netdev);
+	else
+		otx2_stop(netdev);
+}
+
 static void otx2_get_drvinfo(struct net_device *netdev,
 			     struct ethtool_drvinfo *info)
 {
@@ -276,7 +306,7 @@ static int otx2_set_channels(struct net_device *dev,
 		return -EINVAL;
 
 	if (if_up)
-		otx2_stop(dev);
+		otx2_dev_stop(dev);
 
 	pfvf->hw.rx_queues = channel->rx_count;
 	pfvf->hw.tx_queues = channel->tx_count;
@@ -287,7 +317,7 @@ static int otx2_set_channels(struct net_device *dev,
 		return err;
 
 	if (if_up)
-		otx2_open(dev);
+		otx2_dev_open(dev);
 
 	netdev_info(dev, "Setting num Tx rings to %d, Rx rings to %d success\n",
 		    pfvf->hw.tx_queues, pfvf->hw.rx_queues);
@@ -378,14 +408,14 @@ static int otx2_set_ringparam(struct net_device *netdev,
 		return 0;
 
 	if (if_up)
-		otx2_stop(netdev);
+		otx2_dev_stop(netdev);
 
 	/* Assigned to the nearest possible exponent. */
 	qs->sqe_cnt = tx_count;
 	qs->rqe_cnt = rx_count;
 
 	if (if_up)
-		otx2_open(netdev);
+		otx2_dev_open(netdev);
 	return 0;
 }
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index bdc3734ab58b..b5d61638b434 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -1154,9 +1154,10 @@ static irqreturn_t otx2_q_intr_handler(int irq, void *data)
 	/* CQ */
 	for (qidx = 0; qidx < pf->qset.cq_cnt; qidx++) {
 		ptr = pf->reg_base + NIX_LF_CQ_OP_INT;
-		val = atomic64_fetch_add_relaxed((qidx << 44) |
-						 NIX_CQERRINT_BITS, ptr);
+		val = atomic64_fetch_add_relaxed((qidx << 44), ptr);
 
+		otx2_write64(pf, NIX_LF_CQ_OP_INT, (qidx << 44) |
+			     (val & NIX_CQERRINT_BITS));
 		if (!(val & (NIX_CQERRINT_BITS | BIT_ULL(42))))
 			continue;
 
@@ -1178,8 +1179,10 @@ static irqreturn_t otx2_q_intr_handler(int irq, void *data)
 	/* SQ */
 	for (qidx = 0; qidx < pf->hw.tx_queues; qidx++) {
 		ptr = pf->reg_base + NIX_LF_SQ_OP_INT;
-		val = atomic64_fetch_add_relaxed((qidx << 44) | NIX_SQINT_BITS,
-						 ptr);
+		val = atomic64_fetch_add_relaxed((qidx << 44), ptr);
+		otx2_write64(pf, NIX_LF_SQ_OP_INT, (qidx << 44) |
+			     (val & NIX_SQINT_BITS));
+
 		if (!(val & (NIX_SQINT_BITS | BIT_ULL(42))))
 			continue;
 
@@ -1190,13 +1193,20 @@ static irqreturn_t otx2_q_intr_handler(int irq, void *data)
 			if (val & BIT_ULL(NIX_SQINT_LMT_ERR))
 				dev_err(pf->dev, "SQ%lld: LMT store error",
 					qidx);
-			if (val & BIT_ULL(NIX_SQINT_MNQ_ERR))
-				dev_err(pf->dev, "SQ%lld: Meta-descriptor enqueue error",
-					qidx);
-			if (val & BIT_ULL(NIX_SQINT_SEND_ERR))
+			if (val & BIT_ULL(NIX_SQINT_MNQ_ERR)) {
+				dev_err(pf->dev, "SQ%lld: Meta-descriptor enqueue error NIX_LF_MNQ_ERR_DGB:0x%llx\n",
+					qidx,
+					otx2_read64(pf, NIX_LF_MNQ_ERR_DBG));
+				otx2_write64(pf, NIX_LF_MNQ_ERR_DBG,
+					     BIT_ULL(44));
+			}
+			if (val & BIT_ULL(NIX_SQINT_SEND_ERR)) {
 				dev_err(pf->dev, "SQ%lld: Send error, NIX_LF_SEND_ERR_DBG 0x%llx",
 					qidx,
 					otx2_read64(pf, NIX_LF_SEND_ERR_DBG));
+				otx2_write64(pf, NIX_LF_SEND_ERR_DBG,
+					     BIT_ULL(44));
+			}
 			if (val & BIT_ULL(NIX_SQINT_SQB_ALLOC_FAIL))
 				dev_err(pf->dev, "SQ%lld: SQB allocation failed",
 					qidx);
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
index 322d047d306d..2317bfe5a605 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
@@ -38,9 +38,6 @@ enum {
 	RVU_VF_INT_VEC_MBOX = 0x0,
 };
 
-static int otx2vf_open(struct net_device *netdev);
-static int otx2vf_stop(struct net_device *netdev);
-
 static int otx2vf_change_mtu(struct net_device *netdev, int new_mtu)
 {
 	bool if_up = netif_running(netdev);
@@ -369,7 +366,7 @@ static int otx2vf_vfaf_mbox_init(struct otx2_nic *vf)
 	return err;
 }
 
-static int otx2vf_open(struct net_device *netdev)
+int otx2vf_open(struct net_device *netdev)
 {
 	struct otx2_nic *vf;
 	int err;
@@ -388,11 +385,13 @@ static int otx2vf_open(struct net_device *netdev)
 
 	return 0;
 }
+EXPORT_SYMBOL(otx2vf_open);
 
-static int otx2vf_stop(struct net_device *netdev)
+int otx2vf_stop(struct net_device *netdev)
 {
 	return otx2_stop(netdev);
 }
+EXPORT_SYMBOL(otx2vf_stop);
 
 static netdev_tx_t otx2vf_xmit(struct sk_buff *skb, struct net_device *netdev)
 {
-- 
2.31.1

