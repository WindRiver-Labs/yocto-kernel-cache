From d36cfb1ce502802e0f6217bbfd6eac8801344b08 Mon Sep 17 00:00:00 2001
From: Vishal Sagar <vishal.sagar@xilinx.com>
Date: Sat, 13 Oct 2018 12:02:41 +0530
Subject: [PATCH 0174/1852] dmaengine: xilinx_frmbuf: Add early callback
 support to Framebuffer Driver

commit d9223e33e8ab09e2d233e5f6e7cedfd0223bc0a7 from
https://github.com/Xilinx/linux-xlnx.git

This patch adds support for the callback per descriptor to be called
after the staging phase itself rather than waiting for the descriptor
to transition to the active stage and done list.
This behavior is enabled by an API which lets dma engine client decide
whether the callback needs to called as usual or earlier after staging
state.

Signed-off-by: Vishal Sagar <vishal.sagar@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/dma/xilinx/xilinx_frmbuf.c | 62 ++++++++++++++++++++++++++++++
 include/linux/dma/xilinx_frmbuf.h  | 38 ++++++++++++++++++
 2 files changed, 100 insertions(+)

diff --git a/drivers/dma/xilinx/xilinx_frmbuf.c b/drivers/dma/xilinx/xilinx_frmbuf.c
index 26f4b2efbacb..c7cba248feec 100644
--- a/drivers/dma/xilinx/xilinx_frmbuf.c
+++ b/drivers/dma/xilinx/xilinx_frmbuf.c
@@ -136,12 +136,14 @@ struct xilinx_frmbuf_desc_hw {
  * @hw: Hardware descriptor
  * @node: Node in the channel descriptors list
  * @fid: Field ID of buffer
+ * @earlycb: Whether the callback should be called when in staged state
  */
 struct xilinx_frmbuf_tx_descriptor {
 	struct dma_async_tx_descriptor async_tx;
 	struct xilinx_frmbuf_desc_hw hw;
 	struct list_head node;
 	u32 fid;
+	bool earlycb;
 };
 
 /**
@@ -792,6 +794,52 @@ int xilinx_xdma_set_fid(struct dma_chan *chan,
 }
 EXPORT_SYMBOL(xilinx_xdma_set_fid);
 
+int xilinx_xdma_get_earlycb(struct dma_chan *chan,
+			    struct dma_async_tx_descriptor *async_tx,
+			    bool *enable)
+{
+	struct xilinx_frmbuf_device *xdev;
+	struct xilinx_frmbuf_tx_descriptor *desc;
+
+	xdev = frmbuf_find_dev(chan);
+	if (IS_ERR(xdev))
+		return PTR_ERR(xdev);
+
+	if (!async_tx || !enable)
+		return -EINVAL;
+
+	desc = to_dma_tx_descriptor(async_tx);
+	if (!desc)
+		return -EINVAL;
+
+	*enable = desc->earlycb;
+	return 0;
+}
+EXPORT_SYMBOL(xilinx_xdma_get_earlycb);
+
+int xilinx_xdma_set_earlycb(struct dma_chan *chan,
+			    struct dma_async_tx_descriptor *async_tx,
+			    bool enable)
+{
+	struct xilinx_frmbuf_device *xdev;
+	struct xilinx_frmbuf_tx_descriptor *desc;
+
+	if (!async_tx)
+		return -EINVAL;
+
+	xdev = frmbuf_find_dev(chan);
+	if (IS_ERR(xdev))
+		return PTR_ERR(xdev);
+
+	desc = to_dma_tx_descriptor(async_tx);
+	if (!desc)
+		return -EINVAL;
+
+	desc->earlycb = enable;
+	return 0;
+}
+EXPORT_SYMBOL(xilinx_xdma_set_earlycb);
+
 /**
  * of_dma_xilinx_xlate - Translation function
  * @dma_spec: Pointer to DMA specifier as found in the device tree
@@ -1097,6 +1145,9 @@ static irqreturn_t xilinx_frmbuf_irq_handler(int irq, void *data)
 {
 	struct xilinx_frmbuf_chan *chan = data;
 	u32 status;
+	dma_async_tx_callback callback = NULL;
+	void *callback_param;
+	struct xilinx_frmbuf_tx_descriptor *desc;
 
 	status = frmbuf_read(chan, XILINX_FRMBUF_ISR_OFFSET);
 	if (!(status & XILINX_FRMBUF_ISR_ALL_IRQ_MASK))
@@ -1105,6 +1156,17 @@ static irqreturn_t xilinx_frmbuf_irq_handler(int irq, void *data)
 	frmbuf_write(chan, XILINX_FRMBUF_ISR_OFFSET,
 		     status & XILINX_FRMBUF_ISR_ALL_IRQ_MASK);
 
+	/* Check if callback function needs to be called early */
+	desc = chan->staged_desc;
+	if (desc && desc->earlycb) {
+		callback = desc->async_tx.callback;
+		callback_param = desc->async_tx.callback_param;
+		if (callback) {
+			callback(callback_param);
+			desc->async_tx.callback = NULL;
+		}
+	}
+
 	if (status & XILINX_FRMBUF_ISR_AP_READY_IRQ) {
 		spin_lock(&chan->lock);
 		chan->idle = true;
diff --git a/include/linux/dma/xilinx_frmbuf.h b/include/linux/dma/xilinx_frmbuf.h
index 6b44e6f963f3..7aca4b86d554 100644
--- a/include/linux/dma/xilinx_frmbuf.h
+++ b/include/linux/dma/xilinx_frmbuf.h
@@ -124,6 +124,30 @@ int xilinx_xdma_get_fid(struct dma_chan *chan,
 int xilinx_xdma_set_fid(struct dma_chan *chan,
 			struct dma_async_tx_descriptor *async_tx, u32 fid);
 
+/**
+ * xilinx_xdma_get_earlycb - Get info if early callback has been enabled.
+ *
+ * @chan: dma channel instance
+ * @async_tx: descriptor whose parent structure contains fid.
+ * @enable: Output param - Early callback enabled
+ *
+ * Return: 0 on success, -EINVAL in case of invalid chan
+ */
+int xilinx_xdma_get_earlycb(struct dma_chan *chan,
+			    struct dma_async_tx_descriptor *async_tx,
+			    bool *enable);
+
+/**
+ * xilinx_xdma_set_earlycb - Enable/Disable early callback
+ * @chan: dma channel instance
+ * @async_tx: dma async tx descriptor for the buffer
+ * @enable: Flag to enable or disable early callback for descriptor.
+ *
+ * Return: 0 on success, -EINVAL in case of invalid chan
+ */
+int xilinx_xdma_set_earlycb(struct dma_chan *chan,
+			    struct dma_async_tx_descriptor *async_tx,
+			    bool enable);
 #else
 static inline void xilinx_xdma_set_mode(struct dma_chan *chan,
 					enum operation_mode mode)
@@ -161,6 +185,20 @@ static inline int xilinx_xdma_set_fid(struct dma_chan *chan,
 {
 	return -ENODEV;
 }
+
+static inline int xilinx_xdma_get_earlycb(struct dma_chan *chan,
+					  struct dma_async_tx_descriptor *atx,
+					  bool *enable)
+{
+	return -ENODEV;
+}
+
+static inline int xilinx_xdma_set_earlycb(struct dma_chan *chan,
+					  struct dma_async_tx_descriptor *atx,
+					  bool enable)
+{
+	return -ENODEV;
+}
 #endif
 
 #endif /*__XILINX_FRMBUF_DMA_H*/
-- 
2.31.1

