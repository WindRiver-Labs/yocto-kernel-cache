From e7d2797196f5a196d66851f6684cdc7d7b36056f Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Mon, 6 Apr 2020 12:53:52 +0530
Subject: [PATCH 0008/1921] net: thunderx: Do a PCS reset upon SGMII link
 toggle

When physical link toggles with BGX mode being SGMII, BGX to Serdes link
needs to be reset for it function normally otherwise packet IO won't work.

This patch does the PCS reset to get IO functioning again When the traffic
is running, if we unplug the Ethernet cable from SGMII port and plug it
again, it become malfunction.

Change-Id: Ic5eaddd3b583f43e9568a6da532e638f4eb61116
Signed-off-by: Prakash Brahmajyosyula <bprakash@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/10407
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../ethernet/cavium/thunder/nicvf_ethtool.c   | 36 ++++++++++---------
 1 file changed, 19 insertions(+), 17 deletions(-)

diff --git a/drivers/net/ethernet/cavium/thunder/nicvf_ethtool.c b/drivers/net/ethernet/cavium/thunder/nicvf_ethtool.c
index 5e0b16bb95a0..31f560a254f0 100644
--- a/drivers/net/ethernet/cavium/thunder/nicvf_ethtool.c
+++ b/drivers/net/ethernet/cavium/thunder/nicvf_ethtool.c
@@ -514,25 +514,40 @@ static int nicvf_set_ringparam(struct net_device *netdev,
 static int nicvf_get_rss_hash_opts(struct nicvf *nic,
 				   struct ethtool_rxnfc *info)
 {
+	u64 rss_cfg = nicvf_reg_read(nic, NIC_VNIC_RSS_CFG);
+
 	info->data = 0;
 
+	if (!(rss_cfg & BIT_ULL(RSS_HASH_IP)))
+		return 0;
+
+	info->data = RXH_IP_SRC | RXH_IP_DST;
+
 	switch (info->flow_type) {
 	case TCP_V4_FLOW:
 	case TCP_V6_FLOW:
+		if (rss_cfg & BIT_ULL(RSS_HASH_TCP))
+			info->data |= RXH_L4_B_0_1 | RXH_L4_B_2_3;
+		break;
 	case UDP_V4_FLOW:
 	case UDP_V6_FLOW:
+		if (rss_cfg & BIT_ULL(RSS_HASH_UDP))
+			info->data |= RXH_L4_B_0_1 | RXH_L4_B_2_3;
+		break;
 	case SCTP_V4_FLOW:
 	case SCTP_V6_FLOW:
-		info->data |= RXH_L4_B_0_1 | RXH_L4_B_2_3;
-		/* Fall through */
+	case AH_ESP_V4_FLOW:
+	case AH_V4_FLOW:
+	case ESP_V4_FLOW:
 	case IPV4_FLOW:
+	case AH_ESP_V6_FLOW:
+	case AH_V6_FLOW:
+	case ESP_V6_FLOW:
 	case IPV6_FLOW:
-		info->data |= RXH_IP_SRC | RXH_IP_DST;
 		break;
 	default:
 		return -EINVAL;
 	}
-
 	return 0;
 }
 
@@ -598,19 +613,6 @@ static int nicvf_set_rss_hash_opts(struct nicvf *nic,
 			return -EINVAL;
 		}
 		break;
-	case SCTP_V4_FLOW:
-	case SCTP_V6_FLOW:
-		switch (info->data & (RXH_L4_B_0_1 | RXH_L4_B_2_3)) {
-		case 0:
-			rss_cfg &= ~(1ULL << RSS_HASH_L4ETC);
-			break;
-		case (RXH_L4_B_0_1 | RXH_L4_B_2_3):
-			rss_cfg |= (1ULL << RSS_HASH_L4ETC);
-			break;
-		default:
-			return -EINVAL;
-		}
-		break;
 	case IPV4_FLOW:
 	case IPV6_FLOW:
 		rss_cfg = RSS_HASH_IP;
-- 
2.31.1

