From aaa1e471103c462b2ec423f56671b213750ef6c3 Mon Sep 17 00:00:00 2001
From: Geetha sowjanya <gakula@marvell.com>
Date: Wed, 6 Nov 2019 17:39:36 +0530
Subject: [PATCH 0324/1921] octeontx2-pf: Remove ARM64 and LSE_ATOMICS
 dependency

Generic arm64 atomic APIs for "ldadd" and "ldeor" instructions can't be
used if CONFIG_LSE_ATOMIC is disabled.
Hence, using asm instructions to remove dependency on kernel config.

Change-Id: I40fd44b6246b3fad7479bc3cd3115c93331f80b6
Signed-off-by: Geetha sowjanya <gakula@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/18269
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/Kconfig    |  3 +-
 .../net/ethernet/marvell/octeontx2/af/ptp.c   |  4 ++
 .../ethernet/marvell/octeontx2/af/rvu_sso.c   |  5 ++-
 .../ethernet/marvell/octeontx2/af/rvu_tim.c   |  4 ++
 .../marvell/octeontx2/nic/otx2_common.c       | 20 ++++-----
 .../marvell/octeontx2/nic/otx2_common.h       | 45 ++++++++++++++++---
 .../ethernet/marvell/octeontx2/nic/otx2_pf.c  |  7 ++-
 .../marvell/octeontx2/nic/otx2_smqvf.c        |  6 ---
 .../marvell/octeontx2/nic/otx2_txrx.c         |  6 ---
 9 files changed, 63 insertions(+), 37 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/Kconfig b/drivers/net/ethernet/marvell/octeontx2/Kconfig
index 95b2d2541e95..e808fe9e1043 100644
--- a/drivers/net/ethernet/marvell/octeontx2/Kconfig
+++ b/drivers/net/ethernet/marvell/octeontx2/Kconfig
@@ -9,7 +9,6 @@ config OCTEONTX2_MBOX
 config OCTEONTX2_AF
 	tristate "Marvell OcteonTX2 RVU Admin Function driver"
 	select OCTEONTX2_MBOX
-	depends on (64BIT && COMPILE_TEST) || ARM64
 	depends on PCI
 	help
 	  This driver supports Marvell's OcteonTX2 Resource Virtualization
@@ -29,7 +28,7 @@ config NDC_DIS_DYNAMIC_CACHING
 config OCTEONTX2_PF
 	tristate "Marvell OcteonTX2 NIC Physical Function driver"
 	select OCTEONTX2_MBOX
-	depends on PCI && ARM64 && ARM64_LSE_ATOMICS
+	depends on PCI
 	help
 	  This driver supports Marvell's OcteonTX2 Resource Virtualization
 	  Unit's physical function NIC driver.
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/ptp.c b/drivers/net/ethernet/marvell/octeontx2/af/ptp.c
index c85ee22b3d2b..8d1a0ec7ad9f 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/ptp.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/ptp.c
@@ -131,7 +131,11 @@ int ptp_adjfine(struct ptp *ptp, long scaled_ppm)
 
 static inline u64 get_tsc(bool is_pmu)
 {
+#if defined(CONFIG_ARM64)
 	return is_pmu ? read_sysreg(pmccntr_el0) : read_sysreg(cntvct_el0);
+#else
+	return 0;
+#endif
 }
 
 int ptp_get_clock(struct ptp *ptp, bool is_pmu, u64 *clk, u64 *tsc)
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_sso.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_sso.c
index 663fb2ce2865..dead90cb2f28 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_sso.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_sso.c
@@ -27,8 +27,9 @@
 #else
 #define rvu_sso_store_pair(val0, val1, addr)				\
 	do {								\
-		*(uint64_t *)addr = val0;			\
-		*(uint64_t *)(((uint8_t *)addr) + 8) = val1;	\
+		u64 *addr1 = (void *)addr;				\
+		*addr1 = val0;						\
+		*(u64 *)(((u8 *)addr1) + 8) = val1;			\
 	} while (0)
 #endif
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c
index 5c7e219c6656..b7d5410ef211 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c
@@ -24,7 +24,9 @@ static inline u64 get_tenns_tsc(void)
 {
 	u64 tsc;
 
+#if defined(CONFIG_ARM64)
 	asm volatile("mrs %0, cntvct_el0" : "=r" (tsc));
+#endif
 	return tsc;
 }
 
@@ -32,7 +34,9 @@ static inline u64 get_tenns_clk(void)
 {
 	u64 tsc;
 
+#if defined(CONFIG_ARM64)
 	asm volatile("mrs %0, cntfrq_el0" : "=r" (tsc));
+#endif
 	return tsc;
 }
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
index 0145dcf068e7..e91a2ffc9c09 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
@@ -1318,26 +1318,26 @@ static inline void otx2_nix_rq_op_stats(struct queue_stats *stats,
 					struct otx2_nic *pfvf, int qidx)
 {
 	u64 incr = (u64)qidx << 32;
-	atomic64_t *ptr;
+	u64 *ptr;
 
-	ptr = (__force atomic64_t *)otx2_get_regaddr(pfvf, NIX_LF_RQ_OP_OCTS);
-	stats->bytes = atomic64_fetch_add_relaxed(incr, ptr);
+	ptr = (u64 *)otx2_get_regaddr(pfvf, NIX_LF_RQ_OP_OCTS);
+	stats->bytes = otx2_atomic64_add(incr, ptr);
 
-	ptr = (__force atomic64_t *)otx2_get_regaddr(pfvf, NIX_LF_RQ_OP_PKTS);
-	stats->pkts = atomic64_fetch_add_relaxed(incr, ptr);
+	ptr = (u64 *)otx2_get_regaddr(pfvf, NIX_LF_RQ_OP_PKTS);
+	stats->pkts = otx2_atomic64_add(incr, ptr);
 }
 
 static inline void otx2_nix_sq_op_stats(struct queue_stats *stats,
 					struct otx2_nic *pfvf, int qidx)
 {
 	u64 incr = (u64)qidx << 32;
-	atomic64_t *ptr;
+	u64 *ptr;
 
-	ptr = (__force atomic64_t *)otx2_get_regaddr(pfvf, NIX_LF_SQ_OP_OCTS);
-	stats->bytes = atomic64_fetch_add_relaxed(incr, ptr);
+	ptr = (u64 *)otx2_get_regaddr(pfvf, NIX_LF_SQ_OP_OCTS);
+	stats->bytes = otx2_atomic64_add(incr, ptr);
 
-	ptr = (__force atomic64_t *)otx2_get_regaddr(pfvf, NIX_LF_SQ_OP_PKTS);
-	stats->pkts = atomic64_fetch_add_relaxed(incr, ptr);
+	ptr = (u64 *)otx2_get_regaddr(pfvf, NIX_LF_SQ_OP_PKTS);
+	stats->pkts = otx2_atomic64_add(incr, ptr);
 }
 
 /* Mbox message handlers */
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index 6cb8ee69aa1b..61c78fc85f4f 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -13,6 +13,7 @@
 
 #include <linux/pci.h>
 #include <linux/ptp_clock_kernel.h>
+#include <linux/timecounter.h>
 
 #include <mbox.h>
 #include "otx2_reg.h"
@@ -449,10 +450,11 @@ static inline void otx2_mbox_unlock(struct mbox *mbox)
 #define otx2_low(high, low)    (low)
 #endif
 
+#if defined(CONFIG_ARM64)
 static inline void otx2_write128(u64 lo, u64 hi, void __iomem *addr)
 {
-	asm volatile("stp %x[x0], %x[x1], [%x[p1],#0]!"
-		::[x0]"r"(lo), [x1]"r"(hi), [p1]"r"(addr));
+	__asm__ volatile("stp %x[x0], %x[x1], [%x[p1],#0]!"
+			 ::[x0]"r"(lo), [x1]"r"(hi), [p1]"r"(addr));
 }
 
 static inline __uint128_t otx2_read128(const void __iomem *addr)
@@ -460,22 +462,51 @@ static inline __uint128_t otx2_read128(const void __iomem *addr)
 	__uint128_t *__addr = (__force __uint128_t *)addr;
 	u64 h, l;
 
-	asm volatile("ldp %x[x0], %x[x1], %x[p1]"
-		: [x0]"=r"(l), [x1]"=r"(h)
-		: [p1]"Ump"(*__addr));
+	__asm__ volatile("ldp %x[x0], %x[x1], %x[p1]"
+			 : [x0]"=r"(l), [x1]"=r"(h)
+			 : [p1]"Ump"(*__addr));
 
 	return (__uint128_t)le64_to_cpu(otx2_low(h, l)) |
 		(((__uint128_t)le64_to_cpu(otx2_high(h, l))) << 64);
 }
 
+static inline u64 otx2_atomic64_add(u64 incr, u64 *ptr)
+{
+	u64 result;
+
+	__asm__ volatile(".cpu   generic+lse\n"
+			 "ldadd %x[i], %x[r], [%[b]]"
+			 : [r]"=r"(result), "+m"(*ptr)
+			 : [i]"r"(incr), [b]"r"(ptr)
+			 : "memory");
+	return result;
+}
+
+static inline u64 otx2_lmt_flush(uint64_t addr)
+{
+	u64 result = 0;
+
+	__asm__ volatile(".cpu  generic+lse\n"
+			 "ldeor xzr,%x[rf],[%[rs]]"
+			 : [rf]"=r"(result)
+			 : [rs]"r"(addr));
+	return result;
+}
+#else
+#define otx2_write128(lo, hi, addr)
+#define otx2_read128(addr)			({ 0; })
+#define otx2_atomic64_add(incr, ptr)		({ 0; })
+#define otx2_lmt_flush(addr)			({ 0; })
+#endif
+
 /* Alloc pointer from pool/aura */
 static inline u64 otx2_aura_allocptr(struct otx2_nic *pfvf, int aura)
 {
-	atomic64_t *ptr = (__force atomic64_t *)otx2_get_regaddr(pfvf,
+	u64 *ptr = (u64 *)otx2_get_regaddr(pfvf,
 			   NPA_LF_AURA_OP_ALLOCX(0));
 	u64 incr = (u64)aura | BIT_ULL(63);
 
-	return atomic64_fetch_add_relaxed(incr, ptr);
+	return otx2_atomic64_add(incr, ptr);
 }
 
 /* Free pointer to a pool/aura */
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index a425ebcbd4b8..af0f05896372 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -1171,14 +1171,13 @@ EXPORT_SYMBOL(otx2_set_real_num_queues);
 static irqreturn_t otx2_q_intr_handler(int irq, void *data)
 {
 	struct otx2_nic *pf = data;
-	atomic64_t *ptr;
+	u64 val, *ptr;
 	u64 qidx = 0;
-	u64 val;
 
 	/* CQ */
 	for (qidx = 0; qidx < pf->qset.cq_cnt; qidx++) {
 		ptr = otx2_get_regaddr(pf, NIX_LF_CQ_OP_INT);
-		val = atomic64_fetch_add_relaxed((qidx << 44), ptr);
+		val = otx2_atomic64_add((qidx << 44), ptr);
 
 		otx2_write64(pf, NIX_LF_CQ_OP_INT, (qidx << 44) |
 			     (val & NIX_CQERRINT_BITS));
@@ -1203,7 +1202,7 @@ static irqreturn_t otx2_q_intr_handler(int irq, void *data)
 	/* SQ */
 	for (qidx = 0; qidx < pf->hw.tx_queues; qidx++) {
 		ptr = otx2_get_regaddr(pf, NIX_LF_SQ_OP_INT);
-		val = atomic64_fetch_add_relaxed((qidx << 44), ptr);
+		val = otx2_atomic64_add((qidx << 44), ptr);
 		otx2_write64(pf, NIX_LF_SQ_OP_INT, (qidx << 44) |
 			     (val & NIX_SQINT_BITS));
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_smqvf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_smqvf.c
index 9ebe6650a8dd..4f5f73f621d4 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_smqvf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_smqvf.c
@@ -42,12 +42,6 @@ static bool is_otx2_smqvf(struct otx2_nic *vf)
 	return false;
 }
 
-/* Flush SQE written to LMT to SQB */
-static u64 otx2_lmt_flush(uint64_t addr)
-{
-	return atomic64_fetch_xor_relaxed(0, (atomic64_t *)addr);
-}
-
 static void otx2_sqe_flush(struct otx2_snd_queue *sq, int size)
 {
 	u64 status;
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
index 9513381d7e5f..753931a24c29 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
@@ -34,12 +34,6 @@ static inline struct nix_cqe_hdr_s *otx2_get_next_cqe(struct otx2_cq_queue *cq)
 	return cqe_hdr;
 }
 
-/* Flush SQE written to LMT to SQB */
-static inline u64 otx2_lmt_flush(uint64_t addr)
-{
-	return atomic64_fetch_xor_relaxed(0, (atomic64_t *)addr);
-}
-
 static inline unsigned int frag_num(unsigned int i)
 {
 #ifdef __BIG_ENDIAN
-- 
2.31.1

