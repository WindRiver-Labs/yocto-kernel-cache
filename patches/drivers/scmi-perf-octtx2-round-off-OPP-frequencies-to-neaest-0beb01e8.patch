From 524244e239f8ecd3dcf22c26b5543507076f35cc Mon Sep 17 00:00:00 2001
From: Sujeet Baranwal <sbaranwal@marvell.com>
Date: Thu, 3 Oct 2019 13:01:48 -0700
Subject: [PATCH 1359/1921] scmi: perf: octtx2: round off OPP frequencies to
 neaest 100

Calculated frequencies based on the perf value and multiplier leads
to values which are not integral multiple of 100. octx2 chipsets
needs the frequencies to be integral multiple of 100.

Signed-off-by: Sujeet Baranwal <sbaranwal@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/16841

Signed-off-by: Wojciech Bartczak <wbartczak@marvell.com>
Change-Id: I8fd14bd88a6c2d83d9d2f6a4c5fd7613baf4078d
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/48455
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Chandrakala Chavva <cchavva@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/firmware/arm_scmi/perf.c | 25 ++++++++++++++++++++++++-
 1 file changed, 24 insertions(+), 1 deletion(-)

diff --git a/drivers/firmware/arm_scmi/perf.c b/drivers/firmware/arm_scmi/perf.c
index 3c8ae7cc35de..d6d400288c63 100644
--- a/drivers/firmware/arm_scmi/perf.c
+++ b/drivers/firmware/arm_scmi/perf.c
@@ -355,6 +355,23 @@ static int scmi_dev_domain_id(struct device *dev)
 	return clkspec.args[0];
 }
 
+static uint32_t roundoff_to_nearest_100(uint32_t freq)
+{
+	uint32_t quotient, remainder;
+	uint32_t freq_mhz;
+
+	freq_mhz = (freq / 1000000);
+	quotient = freq_mhz / 100;
+	remainder = freq_mhz % 100;
+
+	if (remainder >= 50)
+		freq_mhz = quotient * 100 + 100;
+	else
+		freq_mhz = quotient * 100;
+
+	return freq_mhz * 1000000;
+}
+
 static int scmi_dvfs_device_opps_add(const struct scmi_handle *handle,
 				     struct device *dev)
 {
@@ -373,6 +390,12 @@ static int scmi_dvfs_device_opps_add(const struct scmi_handle *handle,
 	for (opp = dom->opp, idx = 0; idx < dom->opp_count; idx++, opp++) {
 		freq = opp->perf * dom->mult_factor;
 
+		/*
+		 * marvell specific: need to round off to nearest hundered
+		 * if the calcuated frequency is not a multiple of 100 in MHz
+		 */
+		freq = roundoff_to_nearest_100(freq);
+
 		ret = dev_pm_opp_add(dev, freq, 0);
 		if (ret) {
 			dev_warn(dev, "failed to add opp %luHz\n", freq);
@@ -422,7 +445,7 @@ static int scmi_dvfs_freq_get(const struct scmi_handle *handle, u32 domain,
 
 	ret = scmi_perf_level_get(handle, domain, &level, poll);
 	if (!ret)
-		*freq = level * dom->mult_factor;
+		*freq = roundoff_to_nearest_100(level * dom->mult_factor);
 
 	return ret;
 }
-- 
2.31.1

