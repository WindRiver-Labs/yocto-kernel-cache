From 47a37ca5e2d7920ebaa69b1d1f4c727fc9d470fd Mon Sep 17 00:00:00 2001
From: Wojciech Bartczak <wbartczak@marvell.com>
Date: Wed, 16 Jun 2021 13:06:15 -0700
Subject: [PATCH 1628/1921] drivers: soc: Adds common Marvell OcteonTX header
 for SMC calls

This patch unifies handling of SMC call check code
for OcteonTX and CN10K platforms.
Previously drivers have used different approach to check
compatibilit with the ATF istance running on secure side.
Now common code is available.
OcteonTX2 and CN10K shares the same UUID for ATF services.

Signed-off-by: Wojciech Bartczak <wbartczak@marvell.com>
Change-Id: I918d447157182e357fc8c137b5b75bda02bf1c94
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/55644
Reviewed-by: Chandrakala Chavva <cchavva@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
Tested-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/soc/marvell/cn10k-rpram.c           | 26 ++----------
 drivers/soc/marvell/cn10ka-swup/mrvl_swup.c |  7 ++++
 drivers/soc/marvell/marvell_mac_mgmt.c      | 35 ++--------------
 drivers/soc/marvell/phy_diag.c              | 24 ++---------
 include/soc/marvell/octeontx/octeontx_smc.h | 45 +++++++++++++++++++++
 5 files changed, 62 insertions(+), 75 deletions(-)
 create mode 100644 include/soc/marvell/octeontx/octeontx_smc.h

diff --git a/drivers/soc/marvell/cn10k-rpram.c b/drivers/soc/marvell/cn10k-rpram.c
index 0407e1fe837d..f00350e54b4b 100644
--- a/drivers/soc/marvell/cn10k-rpram.c
+++ b/drivers/soc/marvell/cn10k-rpram.c
@@ -10,9 +10,10 @@
 #include <linux/debugfs.h>
 #include <linux/module.h>
 #include <linux/uaccess.h>
-#include <linux/arm-smccc.h>
 #include <linux/of.h>
 #include <linux/of_fdt.h>
+#include <linux/arm-smccc.h>
+#include <soc/marvell/octeontx/octeontx_smc.h>
 
 /* Minimum size in MB, 0 means region is disabled
  * 16 MB is the minimum size when it is eanbled.
@@ -41,27 +42,6 @@ static u64 current_rpram_base;
 static struct dentry *preserve_mem_root;
 static const size_t len = PAGE_SIZE;
 
-/* This is expected CN10k response for SVC UID command */
-static const int octeontx_svc_uuid[] = {
-	0x6ff498cf,
-	0x5a4e9cfa,
-	0x2f2a3aa4,
-	0x5945b105,
-};
-
-static int check_marvell_soc_cn10k(void)
-{
-	struct arm_smccc_res res;
-
-	/* Is the other side the CN10k? */
-	arm_smccc_smc(ARM_SMC_SVC_UID, 0, 0, 0, 0, 0, 0, 0, &res);
-	if (res.a0 != octeontx_svc_uuid[0] || res.a1 != octeontx_svc_uuid[1] ||
-	    res.a2 != octeontx_svc_uuid[2] || res.a3 != octeontx_svc_uuid[3])
-		return -EPERM;
-
-	return 0;
-}
-
 static ssize_t cn10k_rpram_info_read(struct file *f, char __user *user_buf,
 		size_t count, loff_t *off)
 {
@@ -166,7 +146,7 @@ static int __init cn10k_rpram_init(void)
 	struct device_node *parent, *node;
 	int ret;
 
-	ret = check_marvell_soc_cn10k();
+	ret = octeontx_soc_check_smc();
 	if (ret) {
 		pr_info("%s: UIID SVC doesn't match Marvell CN10k.\n",
 			module_name(THIS_MODULE));
diff --git a/drivers/soc/marvell/cn10ka-swup/mrvl_swup.c b/drivers/soc/marvell/cn10ka-swup/mrvl_swup.c
index fb260dca24e8..bcab02d7b9dc 100644
--- a/drivers/soc/marvell/cn10ka-swup/mrvl_swup.c
+++ b/drivers/soc/marvell/cn10ka-swup/mrvl_swup.c
@@ -22,6 +22,7 @@
 #include <linux/dmapool.h>
 #include <linux/device.h>
 
+#include <soc/marvell/octeontx/octeontx_smc.h>
 #include "mrvl_swup.h"
 
 /*Debugfs interface root */;
@@ -315,6 +316,12 @@ static int __init mrvl_swup_init(void)
 {
 	int i, ret;
 
+	ret = octeontx_soc_check_smc();
+	if (ret) {
+		pr_err("SMC signature doesn't match OcteonTX. Failed to create device\n");
+		return ret;
+	}
+
 	dev_set_name(&dev, "mrvl_swup_dev");
 	ret = device_register(&dev);
 
diff --git a/drivers/soc/marvell/marvell_mac_mgmt.c b/drivers/soc/marvell/marvell_mac_mgmt.c
index 47028a94866a..9465ebae42f3 100644
--- a/drivers/soc/marvell/marvell_mac_mgmt.c
+++ b/drivers/soc/marvell/marvell_mac_mgmt.c
@@ -5,6 +5,7 @@
  */
 
 #include <linux/arm-smccc.h>
+#include <soc/marvell/octeontx/octeontx_smc.h>
 #include <linux/debugfs.h>
 #include <linux/fs.h>
 #include <linux/module.h>
@@ -28,19 +29,9 @@ struct mac_info {
 	} s;
 };
 
-/* Data and defines for SMC call */
-#define ARM_SMC_SVC_UID			0xc200ff01
 /* SMC call number used to set MAC address */
 #define PLAT_OCTEONTX_MAC_MGMT_SET_ADDR	0xc2000e10
 
-/* This is expected CN10k response for SVC UID command */
-static const int octeontx_svc_uuid[] = {
-	0x6ff498cf,
-	0x5a4e9cfa,
-	0x2f2a3aa4,
-	0x5945b105,
-};
-
 /** Set MAC address given by user
  *
  * The call passes MAC address information to ATF for further processing.
@@ -66,26 +57,6 @@ static int mac_mgmt_set_addr(struct mac_info *minfo)
 	return 0;
 }
 
-/** Check software compatibility of ATF
- *
- * The call verifies ATF instance running on the system.
- *
- * @return 0 for success, error code otherwise
- *
- */
-static int mac_mgmt_check_smc(void)
-{
-	struct arm_smccc_res res;
-
-	/* Is the other side the CN10k? */
-	arm_smccc_smc(ARM_SMC_SVC_UID, 0, 0, 0, 0, 0, 0, 0, &res);
-	if (res.a0 != octeontx_svc_uuid[0] || res.a1 != octeontx_svc_uuid[1] ||
-	    res.a2 != octeontx_svc_uuid[2] || res.a3 != octeontx_svc_uuid[3])
-		return -EPERM;
-
-	return 0;
-}
-
 /** Parse user input in text for to MAC information structure
  *
  * @param buffer - ASCII string containing user's input
@@ -249,7 +220,7 @@ static int __init mac_mgmt_init(void)
 {
 	int ret;
 
-	ret = mac_mgmt_check_smc();
+	ret = octeontx_soc_check_smc();
 	if (ret) {
 		pr_info("%s: UIID SVC doesn't match Marvell CN10k.\n",
 			module_name(THIS_MODULE));
@@ -278,4 +249,4 @@ module_exit(mac_mgmt_exit);
 
 MODULE_AUTHOR("Wojciech Bartczak <wbartczak@marvell.com>");
 MODULE_DESCRIPTION("MAC address management for Marvell CN10K");
-MODULE_LICENSE("GPL v2");
+MODULE_LICENSE("GPL");
diff --git a/drivers/soc/marvell/phy_diag.c b/drivers/soc/marvell/phy_diag.c
index 1df06bdf4e91..5498221f5d38 100644
--- a/drivers/soc/marvell/phy_diag.c
+++ b/drivers/soc/marvell/phy_diag.c
@@ -13,8 +13,8 @@
 #include <linux/string.h>
 #include <linux/time.h>
 #include <linux/uaccess.h>
+#include <soc/marvell/octeontx/octeontx_smc.h>
 
-#define ARM_SMC_SVC_UID			0xc200ff01
 
 #define PLAT_OCTEONTX_PHY_DBG_PRBS	0xc2000e00
 #define PLAT_OCTEONTX_PHY_LOOPBACK	0xc2000e01
@@ -59,14 +59,6 @@ static inline int _conv_arr ## _str2enum(const char *str)		\
 
 struct dentry *phy_dbgfs_root;
 
-/* This is expected OcteonTX response for SVC UID command */
-static const int octeontx_svc_uuid[] = {
-	0x6ff498cf,
-	0x5a4e9cfa,
-	0x2f2a3aa4,
-	0x5945b105,
-};
-
 #define CMD_SZ 64
 char cmd_buf[CMD_SZ];
 
@@ -642,17 +634,9 @@ static int phy_dbg_setup_debugfs(void)
 
 static int __init phy_dbg_init(void)
 {
-	struct arm_smccc_res res;
-
-	/*
-	 * Compare response for standard SVC_UID commandi with OcteonTX UUID.
-	 * Continue only if it is OcteonTX.
-	 */
-	arm_smccc_smc(ARM_SMC_SVC_UID, 0, 0, 0, 0, 0, 0, 0, &res);
-	if (res.a0 != octeontx_svc_uuid[0] || res.a1 != octeontx_svc_uuid[1] ||
-	    res.a2 != octeontx_svc_uuid[2] || res.a3 != octeontx_svc_uuid[3]) {
-		pr_info("UIID SVC doesn't match OcteonTX. No serdes cmds.\n");
-		return -1;
+	if (octeontx_soc_check_smc()) {
+		pr_err("SMC signature doesn't match OcteonTX\n");
+		return -EPERM;
 	}
 
 	return phy_dbg_setup_debugfs();
diff --git a/include/soc/marvell/octeontx/octeontx_smc.h b/include/soc/marvell/octeontx/octeontx_smc.h
new file mode 100644
index 000000000000..2e5b7bdff899
--- /dev/null
+++ b/include/soc/marvell/octeontx/octeontx_smc.h
@@ -0,0 +1,45 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+/*
+ * Copyright (C) 2021 Marvell
+ *
+ */
+
+#ifndef _SOC_MRVL_OCTEONTX_SMC_H
+#define _SOC_MRVL_OCTEONTX_SMC_H
+
+#include <linux/errno.h>
+#include <linux/arm-smccc.h>
+
+/* Data and defines for SMC call */
+#define OCTEONTX_ARM_SMC_SVC_UID			0xc200ff01
+
+/* This is expected OCTEONTX response for SVC UID command */
+/** Check software version and compatibility of ATF
+ *
+ * The call verifies ATF instance running on the system.
+ *
+ * @return 0 for success, error code otherwise
+ *
+ */
+static inline int octeontx_soc_check_smc(void)
+{
+	const int octeontx_svc_uuid[] = {
+		0x6ff498cf,
+		0x5a4e9cfa,
+		0x2f2a3aa4,
+		0x5945b105,
+	};
+
+	struct arm_smccc_res res;
+
+	/* Is it OCTEONTX on the other side of SMC monitor? */
+	arm_smccc_smc(OCTEONTX_ARM_SMC_SVC_UID, 0, 0, 0, 0, 0, 0, 0, &res);
+	if (res.a0 != octeontx_svc_uuid[0] || res.a1 != octeontx_svc_uuid[1] ||
+	    res.a2 != octeontx_svc_uuid[2] || res.a3 != octeontx_svc_uuid[3])
+		return -EPERM;
+
+	return 0;
+}
+
+#endif /* _SOC_MRVL_OCTEONTX_SMC_H */
-- 
2.31.1

