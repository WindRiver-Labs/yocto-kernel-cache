From d3426dd699e1a1e3a18388e3e86eb077a6f73ab6 Mon Sep 17 00:00:00 2001
From: Stanislaw Kardach <skardach@marvell.com>
Date: Sat, 25 May 2019 14:17:01 -0400
Subject: [PATCH 210/767] octeontx2-af: fix TIM block address usage

commit 6e530cb5c8597d38df82ac4c851737ceb6c36e13 from
git@git.assembla.com:cavium/WindRiver.linux.git

Invalid block address identifier was used across whole TIM block driver
which resulted in invalid retrieval of LF mapping (SSOW instead of TIM).

Change-Id: I09c33a6183cf3d437cc53fa7da537af8b702082f
Signed-off-by: Stanislaw Kardach <skardach@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/9955
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/af/rvu_tim.c   | 26 +++++++++++--------
 1 file changed, 15 insertions(+), 11 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c
index cbb45d09d5b8..31620f22d4df 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c
@@ -59,7 +59,7 @@ int rvu_lf_lookup_tim_errata(struct rvu *rvu, struct rvu_block *block,
 	int i, blkaddr;
 	u64 val;
 
-	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_TIM, 0);
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_TIM, pcifunc);
 	if (blkaddr < 0)
 		return TIM_AF_LF_INVALID;
 
@@ -81,11 +81,11 @@ int rvu_mbox_handler_tim_lf_alloc(struct rvu *rvu,
 	int lf, blkaddr;
 	u64 regval;
 
-	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_TIM, 0);
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_TIM, pcifunc);
 	if (blkaddr < 0)
 		return TIM_AF_LF_INVALID;
 
-	lf = rvu_get_lf(rvu, &rvu->hw->block[BLKTYPE_TIM], pcifunc, req->ring);
+	lf = rvu_get_lf(rvu, &rvu->hw->block[blkaddr], pcifunc, req->ring);
 	if (lf < 0)
 		return TIM_AF_LF_INVALID;
 
@@ -103,9 +103,13 @@ int rvu_mbox_handler_tim_lf_free(struct rvu *rvu,
 				 struct msg_rsp *rsp)
 {
 	u16 pcifunc = req->hdr.pcifunc;
-	int lf;
+	int lf, blkaddr;
 
-	lf = rvu_get_lf(rvu, &rvu->hw->block[BLKTYPE_TIM], pcifunc, req->ring);
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_TIM, pcifunc);
+	if (blkaddr < 0)
+		return TIM_AF_LF_INVALID;
+
+	lf = rvu_get_lf(rvu, &rvu->hw->block[blkaddr], pcifunc, req->ring);
 	if (lf < 0)
 		return TIM_AF_LF_INVALID;
 
@@ -121,11 +125,11 @@ int rvu_mbox_handler_tim_config_ring(struct rvu *rvu,
 	u32 intervalmin;
 	u64 regval;
 
-	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_TIM, 0);
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_TIM, pcifunc);
 	if (blkaddr < 0)
 		return TIM_AF_LF_INVALID;
 
-	lf = rvu_get_lf(rvu, &rvu->hw->block[BLKTYPE_TIM], pcifunc, req->ring);
+	lf = rvu_get_lf(rvu, &rvu->hw->block[blkaddr], pcifunc, req->ring);
 	if (lf < 0)
 		return TIM_AF_LF_INVALID;
 
@@ -218,11 +222,11 @@ int rvu_mbox_handler_tim_enable_ring(struct rvu *rvu,
 	int lf, blkaddr;
 	u64 regval;
 
-	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_TIM, 0);
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_TIM, pcifunc);
 	if (blkaddr < 0)
 		return TIM_AF_LF_INVALID;
 
-	lf = rvu_get_lf(rvu, &rvu->hw->block[BLKTYPE_TIM], pcifunc, req->ring);
+	lf = rvu_get_lf(rvu, &rvu->hw->block[blkaddr], pcifunc, req->ring);
 	if (lf < 0)
 		return TIM_AF_LF_INVALID;
 
@@ -250,11 +254,11 @@ int rvu_mbox_handler_tim_disable_ring(struct rvu *rvu,
 	int lf, blkaddr;
 	u64 regval;
 
-	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_TIM, 0);
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_TIM, pcifunc);
 	if (blkaddr < 0)
 		return TIM_AF_LF_INVALID;
 
-	lf = rvu_get_lf(rvu, &rvu->hw->block[BLKTYPE_TIM], pcifunc, req->ring);
+	lf = rvu_get_lf(rvu, &rvu->hw->block[blkaddr], pcifunc, req->ring);
 	if (lf < 0)
 		return TIM_AF_LF_INVALID;
 
-- 
2.31.1

