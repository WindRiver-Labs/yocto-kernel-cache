From 935f3bb091b9621954a6e69e0a277e408aa2e831 Mon Sep 17 00:00:00 2001
From: Venkateshwar Rao Gannavarapu <venkateshwar.rao.gannavarapu@xilinx.com>
Date: Thu, 20 Aug 2020 14:35:46 -0700
Subject: [PATCH 1526/1852] drm: xlnx: sdi: Add GT and picxo cores reset
 through gpio

commit a1aec75c110271ff0734ccefd6c74a001aa3993d from
https://github.com/Xilinx/linux-xlnx.git

GT and PICXO cores reset will be controlled by gpio.

Signed-off-by: Venkateshwar Rao Gannavarapu <venkateshwar.rao.gannavarapu@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/gpu/drm/xlnx/xlnx_sdi.c | 39 +++++++++++++++++++++++++++++++++
 1 file changed, 39 insertions(+)

diff --git a/drivers/gpu/drm/xlnx/xlnx_sdi.c b/drivers/gpu/drm/xlnx/xlnx_sdi.c
index e9fecb3f2bad..a3ee3feab474 100644
--- a/drivers/gpu/drm/xlnx/xlnx_sdi.c
+++ b/drivers/gpu/drm/xlnx/xlnx_sdi.c
@@ -14,6 +14,7 @@
 #include <linux/clk.h>
 #include <linux/component.h>
 #include <linux/device.h>
+#include <linux/gpio/consumer.h>
 #include <linux/of_device.h>
 #include <linux/of_graph.h>
 #include <linux/phy/phy.h>
@@ -134,6 +135,8 @@ enum payload_line_2 {
  * @encoder: DRM encoder structure
  * @connector: DRM connector structure
  * @dev: device structure
+ * @gt_rst_gpio: GPIO handle to reset GT phy
+ * @picxo_rst_gpio: GPIO handle to reset picxo core
  * @base: Base address of SDI subsystem
  * @mode_flags: SDI operation mode related flags
  * @wait_event: wait event
@@ -179,6 +182,8 @@ struct xlnx_sdi {
 	struct drm_encoder encoder;
 	struct drm_connector connector;
 	struct device *dev;
+	struct gpio_desc *gt_rst_gpio;
+	struct gpio_desc *picxo_rst_gpio;
 	void __iomem *base;
 	u32 mode_flags;
 	wait_queue_head_t wait_event;
@@ -257,6 +262,20 @@ static void xlnx_sdi_en_bridge(struct xlnx_sdi *sdi)
 	xlnx_sdi_writel(sdi->base, XSDI_TX_RST_CTRL, data);
 }
 
+/**
+ * xlnx_sdi_gt_picxo_reset - Reset cores through gpio
+ * @sdi: Pointer to SDI Tx structure
+ *
+ * This function resets the GT phy and picxo cores.
+ */
+static void xlnx_sdi_gt_picxo_reset(struct xlnx_sdi *sdi)
+{
+	gpiod_set_value(sdi->gt_rst_gpio, 0);
+	gpiod_set_value(sdi->gt_rst_gpio, 1);
+	gpiod_set_value(sdi->picxo_rst_gpio, 0);
+	gpiod_set_value(sdi->picxo_rst_gpio, 1);
+}
+
 /**
  * xlnx_sdi_irq_handler - SDI Tx interrupt
  * @irq:	irq number
@@ -1090,6 +1109,26 @@ static int xlnx_sdi_probe(struct platform_device *pdev)
 		goto err_disable_sditx_clk;
 	}
 
+	sdi->gt_rst_gpio = devm_gpiod_get(&pdev->dev, "phy-reset",
+					  GPIOD_OUT_HIGH);
+	if (IS_ERR(sdi->gt_rst_gpio)) {
+		ret = PTR_ERR(sdi->gt_rst_gpio);
+		if (ret != -EPROBE_DEFER)
+			dev_err(&pdev->dev, "Unable to get phy gpio\n");
+		goto err_disable_vidin_clk;
+	}
+
+	sdi->picxo_rst_gpio = devm_gpiod_get_optional(&pdev->dev, "picxo-reset",
+						      GPIOD_OUT_HIGH);
+	if (IS_ERR(sdi->picxo_rst_gpio)) {
+		ret = PTR_ERR(sdi->picxo_rst_gpio);
+		if (ret != -EPROBE_DEFER)
+			dev_err(&pdev->dev, "Unable to get picxo gpio\n");
+		goto err_disable_vidin_clk;
+	}
+
+	xlnx_sdi_gt_picxo_reset(sdi);
+
 	/* in case all "port" nodes are grouped under a "ports" node */
 	ports = of_get_child_by_name(sdi->dev->of_node, "ports");
 	if (!ports) {
-- 
2.31.1

