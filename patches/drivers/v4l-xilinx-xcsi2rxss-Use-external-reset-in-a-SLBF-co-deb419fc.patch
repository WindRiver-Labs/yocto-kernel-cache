From 8d0f55df79cdc10614dc78910e8531b3920a31f4 Mon Sep 17 00:00:00 2001
From: "Subhransu S. Prusty" <subhransu.sekhar.prusty@xilinx.com>
Date: Thu, 2 May 2019 01:54:22 -0700
Subject: [PATCH 0631/1851] v4l: xilinx: xcsi2rxss: Use external reset in a
 SLBF condition

commit 2598907c744fe00e5add942b97119a9a0f14818c from
https://github.com/Xilinx/linux-xlnx.git

The IP document recommends to use external reset, video_resetn, for a
stream line buffer full condition. Without this re-running the
pipeline will continue to result in stream line buffer full condition
as the FIFO is not cleared with IP soft reset.

So add external reset support using gpio and use it as optional
feature.

Signed-off-by: Subhransu S. Prusty <subhransu.sekhar.prusty@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 .../media/platform/xilinx/xilinx-csi2rxss.c   | 47 +++++++++++++++++--
 1 file changed, 42 insertions(+), 5 deletions(-)

diff --git a/drivers/media/platform/xilinx/xilinx-csi2rxss.c b/drivers/media/platform/xilinx/xilinx-csi2rxss.c
index 030543f5f8b9..5e2a241a8069 100644
--- a/drivers/media/platform/xilinx/xilinx-csi2rxss.c
+++ b/drivers/media/platform/xilinx/xilinx-csi2rxss.c
@@ -21,6 +21,7 @@
 #include <linux/compiler.h>
 #include <linux/delay.h>
 #include <linux/device.h>
+#include <linux/gpio/consumer.h>
 #include <linux/interrupt.h>
 #include <linux/io.h>
 #include <linux/kernel.h>
@@ -452,6 +453,7 @@ struct xcsi2rxss_event {
  * @lite_aclk: AXI4-Lite interface clock
  * @video_aclk: Video clock
  * @dphy_clk_200M: 200MHz DPHY clock
+ * @rst_gpio: video_aresetn
  */
 struct xcsi2rxss_core {
 	struct device *dev;
@@ -475,6 +477,7 @@ struct xcsi2rxss_core {
 	struct clk *lite_aclk;
 	struct clk *video_aclk;
 	struct clk *dphy_clk_200M;
+	struct gpio_desc *rst_gpio;
 };
 
 /**
@@ -770,6 +773,12 @@ static int xcsi2rxss_reset(struct xcsi2rxss_core *core)
 	return 0;
 }
 
+static void xcsi2rxss_stop_stream(struct xcsi2rxss_state *xcsi2rxss)
+{
+	xcsi2rxss_interrupts_enable(&xcsi2rxss->core, false);
+	xcsi2rxss_enable(&xcsi2rxss->core, false);
+}
+
 /**
  * xcsi2rxss_irq_handler - Interrupt handler for CSI-2
  * @irq: IRQ number
@@ -818,6 +827,14 @@ static irqreturn_t xcsi2rxss_irq_handler(int irq, void *dev_id)
 
 	if (status & XCSI_ISR_SLBF_MASK) {
 		dev_alert(core->dev, "Stream Line Buffer Full!\n");
+		if (core->rst_gpio) {
+			gpiod_set_value(core->rst_gpio, 1);
+			/* minimum 40 dphy_clk_200M cycles */
+			ndelay(250);
+			gpiod_set_value(core->rst_gpio, 0);
+		}
+
+		xcsi2rxss_stop_stream(state);
 
 		memset(&state->event, 0, sizeof(state->event));
 
@@ -1215,11 +1232,6 @@ static int xcsi2rxss_start_stream(struct xcsi2rxss_state *xcsi2rxss)
 	return 0;
 }
 
-static void xcsi2rxss_stop_stream(struct xcsi2rxss_state *xcsi2rxss)
-{
-	xcsi2rxss_interrupts_enable(&xcsi2rxss->core, false);
-	xcsi2rxss_enable(&xcsi2rxss->core, false);
-}
 
 /**
  * xcsi2rxss_s_stream - It is used to start/stop the streaming.
@@ -1255,6 +1267,14 @@ static int xcsi2rxss_s_stream(struct v4l2_subdev *sd, int enable)
 		}
 	} else {
 		if (xcsi2rxss->streaming) {
+			struct gpio_desc *rst = xcsi2rxss->core.rst_gpio;
+
+			if (rst) {
+				gpiod_set_value_cansleep(rst, 1);
+				usleep_range(1, 2);
+				gpiod_set_value_cansleep(rst, 0);
+			}
+
 			xcsi2rxss_stop_stream(xcsi2rxss);
 			xcsi2rxss->streaming = false;
 		}
@@ -1761,6 +1781,15 @@ static int xcsi2rxss_parse_of(struct xcsi2rxss_state *xcsi2rxss)
 		return ret;
 	}
 
+	/* Reset GPIO */
+	core->rst_gpio = devm_gpiod_get_optional(core->dev, "reset",
+						 GPIOD_OUT_HIGH);
+	if (IS_ERR(core->rst_gpio)) {
+		if (PTR_ERR(core->rst_gpio) != -EPROBE_DEFER)
+			dev_err(core->dev, "Reset GPIO not setup in DT");
+		return PTR_ERR(core->rst_gpio);
+	}
+
 	return 0;
 }
 
@@ -1843,6 +1872,14 @@ static int xcsi2rxss_probe(struct platform_device *pdev)
 	/*
 	 * Reset and initialize the core.
 	 */
+
+	if (xcsi2rxss->core.rst_gpio) {
+		gpiod_set_value_cansleep(xcsi2rxss->core.rst_gpio, 1);
+		/* minimum of 40 dphy_clk_200M cycles */
+		usleep_range(1, 2);
+		gpiod_set_value_cansleep(xcsi2rxss->core.rst_gpio, 0);
+	}
+
 	xcsi2rxss_reset(&xcsi2rxss->core);
 
 	xcsi2rxss->core.events =  (struct xcsi2rxss_event *)&xcsi2rxss_events;
-- 
2.31.1

