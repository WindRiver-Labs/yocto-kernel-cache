From 0a998a231ea045b03e1163fb49566e69c6b348aa Mon Sep 17 00:00:00 2001
From: Radha Mohan Chintakuntla <radhac@marvell.com>
Date: Mon, 13 Jul 2020 10:35:44 -0700
Subject: [PATCH 747/767] octeontx2-dpi: Export the DPI Queue config API

commit b6c72f0dd5f23f56530c7757055f7c215576e248 from
git@git.assembla.com:cavium/WindRiver.linux.git

This patch exports the DPI Queue config API so that kernel drivers can
configure the DPI queues. Existing way of userspace configuring through
sysfs still in place for compatibility.

Change-Id: I9717beaf0b939377a0d298efcbb1f6dcc247008c
Signed-off-by: Abhijit Ayarekar <aayarekar@marvell.com>
Signed-off-by: Radha Mohan Chintakuntla <radhac@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/31835
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Satananda Burla <sburla@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Abhijit Ayarekar <aayarekar@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/49029
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/soc/marvell/octeontx2-dpi/dpi.c | 67 ++++++++++++++++++-------
 drivers/soc/marvell/octeontx2-dpi/dpi.h |  8 +++
 2 files changed, 56 insertions(+), 19 deletions(-)

diff --git a/drivers/soc/marvell/octeontx2-dpi/dpi.c b/drivers/soc/marvell/octeontx2-dpi/dpi.c
index ca95f37976a2..78b52004eda8 100644
--- a/drivers/soc/marvell/octeontx2-dpi/dpi.c
+++ b/drivers/soc/marvell/octeontx2-dpi/dpi.c
@@ -419,6 +419,53 @@ static ssize_t dpi_show_config(struct device *dev,
 	return strlen(buf);
 }
 
+static int queue_config(struct dpipf *dpi, struct dpipf_vf *dpivf,
+						union dpi_mbox_message_t *msg)
+{
+	switch (msg->s.cmd) {
+	case DPI_QUEUE_OPEN:
+		dpivf->vf_config.aura = msg->s.aura;
+		dpivf->vf_config.csize = msg->s.csize;
+		dpivf->vf_config.sso_pf_func = msg->s.sso_pf_func;
+		dpivf->vf_config.npa_pf_func = msg->s.npa_pf_func;
+		dpi_queue_init(dpi, dpivf, msg->s.vfid);
+		dpivf->setup_done = true;
+		break;
+	case DPI_QUEUE_CLOSE:
+		dpivf->vf_config.aura = 0;
+		dpivf->vf_config.csize = 0;
+		dpivf->vf_config.sso_pf_func = 0;
+		dpivf->vf_config.npa_pf_func = 0;
+		dpi_queue_fini(dpi, dpivf, msg->s.vfid);
+		dpivf->setup_done = false;
+		break;
+	default:
+		return -1;
+	}
+	return 0;
+}
+
+static int dpi_queue_config(struct pci_dev *pfdev,
+			    union dpi_mbox_message_t *msg)
+{
+	struct device *dev = &pfdev->dev;
+	struct dpipf *dpi = pci_get_drvdata(pfdev);
+	struct dpipf_vf *dpivf;
+
+	if (msg->s.vfid > DPI_MAX_VFS) {
+		dev_err(dev, "Invalid vfid:%d\n", msg->s.vfid);
+		return -1;
+	}
+	dpivf = &dpi->vf[msg->s.vfid];
+
+	return queue_config(dpi, dpivf, msg);
+}
+
+struct otx2_dpipf_com_s otx2_dpipf_com  = {
+	.queue_config = dpi_queue_config
+};
+EXPORT_SYMBOL(otx2_dpipf_com);
+
 static ssize_t dpi_write_config(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t count)
 {
@@ -434,26 +481,8 @@ static ssize_t dpi_write_config(struct device *dev,
 	}
 	dpivf = &dpi->vf[mbox_msg.s.vfid];
 
-	switch (mbox_msg.s.cmd) {
-	case DPI_QUEUE_OPEN:
-		dpivf->vf_config.aura = mbox_msg.s.aura;
-		dpivf->vf_config.csize = mbox_msg.s.csize;
-		dpivf->vf_config.sso_pf_func = mbox_msg.s.sso_pf_func;
-		dpivf->vf_config.npa_pf_func = mbox_msg.s.npa_pf_func;
-		dpi_queue_init(dpi, dpivf, mbox_msg.s.vfid);
-		dpivf->setup_done = true;
-		break;
-	case DPI_QUEUE_CLOSE:
-		dpivf->vf_config.aura = 0;
-		dpivf->vf_config.csize = 0;
-		dpivf->vf_config.sso_pf_func = 0;
-		dpivf->vf_config.npa_pf_func = 0;
-		dpi_queue_fini(dpi, dpivf, mbox_msg.s.vfid);
-		dpivf->setup_done = false;
-		break;
-	default:
+	if (queue_config(dpi, dpivf, &mbox_msg) < 0)
 		return -1;
-	}
 
 	return sizeof(mbox_msg);
 }
diff --git a/drivers/soc/marvell/octeontx2-dpi/dpi.h b/drivers/soc/marvell/octeontx2-dpi/dpi.h
index 2026979d732a..6a359fe25ecc 100644
--- a/drivers/soc/marvell/octeontx2-dpi/dpi.h
+++ b/drivers/soc/marvell/octeontx2-dpi/dpi.h
@@ -252,4 +252,12 @@ union dpi_mbox_message_t {
 		uint64_t npa_pf_func    :16;
 	} s;
 };
+
+struct otx2_dpipf_com_s {
+	int (*queue_config)(struct pci_dev *pfdev,
+			    union dpi_mbox_message_t *req);
+};
+
+extern struct otx2_dpipf_com_s otx2_dpipf_com;
+
 #endif
-- 
2.31.1

