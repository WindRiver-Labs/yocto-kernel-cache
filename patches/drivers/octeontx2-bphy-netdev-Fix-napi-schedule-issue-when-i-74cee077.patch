From 95331126a3a180756719536aaa99def1db624a7a Mon Sep 17 00:00:00 2001
From: Naveen Mamindlapalli <naveenm@marvell.com>
Date: Fri, 22 Jan 2021 18:43:56 +0530
Subject: [PATCH 1225/1921] octeontx2-bphy-netdev: Fix napi schedule issue when
 intf is down

When the low-level link state of an interface is changed to LINK
present using OTX2_RFOE_IOCTL_LINK_EVENT ioctl, the logic clears
the INTF_DOWN flag which represents the admin interface state.
This is causing an issue where a packet is received by RFOE MHAB,
triggers interrupt and the interrupt handler tries to schedule
NAPI to process packet queue on the first interface (LMAC instance)
which is initialized by netdev->open() routine. If an interface is
not initialized and ioctl clearing driver interface DOWN state,
the napi_schedule will be ignored by the stack. Fixed the issue
by not toggling link admin state when low level link state is
changed using OTX2_RFOE_IOCTL_LINK_EVENT ioctl.

Change-Id: Ie4dcb7e5ea67d5eb661aa6028f9c497921f481d1
Fixes: 42c9bb7b9e49 ("Fix napi schedule issue when intf is down")
Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/44801
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../marvell/octeontx2/bphy/otx2_bphy_main.c   | 28 +++++++++++--------
 1 file changed, 16 insertions(+), 12 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_bphy_main.c b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_bphy_main.c
index b7e6c5ad0764..9e8f4d033a56 100644
--- a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_bphy_main.c
+++ b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_bphy_main.c
@@ -390,16 +390,18 @@ static long otx2_bphy_cdev_ioctl(struct file *filp, unsigned int cmd,
 		if (priv->link_state != cfg.link_state) {
 			if (cfg.link_state == LINK_STATE_DOWN) {
 				netdev_info(netdev, "Link DOWN\n");
-				netif_carrier_off(netdev);
-				netif_stop_queue(netdev);
-				set_bit(RFOE_INTF_DOWN, &priv->state);
 				priv->link_state = 0;
+				if (netif_running(netdev)) {
+					netif_carrier_off(netdev);
+					netif_stop_queue(netdev);
+				}
 			} else {
 				netdev_info(netdev, "Link UP\n");
-				netif_carrier_on(netdev);
-				netif_start_queue(netdev);
-				clear_bit(RFOE_INTF_DOWN, &priv->state);
 				priv->link_state = 1;
+				if (netif_running(netdev)) {
+					netif_carrier_on(netdev);
+					netif_start_queue(netdev);
+				}
 			}
 		}
 		ret = 0;
@@ -441,16 +443,18 @@ static long otx2_bphy_cdev_ioctl(struct file *filp, unsigned int cmd,
 		if (priv->link_state != cfg.link_state) {
 			if (cfg.link_state == LINK_STATE_DOWN) {
 				netdev_info(netdev, "Link DOWN\n");
-				netif_carrier_off(netdev);
-				netif_stop_queue(netdev);
-				set_bit(CPRI_INTF_DOWN, &priv->state);
 				priv->link_state = 0;
+				if (netif_running(netdev)) {
+					netif_carrier_off(netdev);
+					netif_stop_queue(netdev);
+				}
 			} else {
 				netdev_info(netdev, "Link UP\n");
-				netif_carrier_on(netdev);
-				netif_start_queue(netdev);
-				clear_bit(CPRI_INTF_DOWN, &priv->state);
 				priv->link_state = 1;
+				if (netif_running(netdev)) {
+					netif_carrier_on(netdev);
+					netif_start_queue(netdev);
+				}
 			}
 		}
 		ret = 0;
-- 
2.31.1

