From 0e20425fd14f3b3447318657f89b2c8c5297e657 Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Mon, 30 Mar 2020 17:29:56 -0700
Subject: [PATCH 1299/1852] misc: xilinx_flex: Fix the lock definitions

commit 0957758636c6fe69385117b4393dfa0b4b2e9a76 from
https://github.com/Xilinx/linux-xlnx.git

First, it's defined as 'mutex' in struct while used by 'lock'. The build
failed because of name mismatch.

drivers/misc/xilinx_flex_pm.c:601:20: error: 'struct xflex_dev_info' has no member named 'mutex'
  601 |  mutex_init(&flexpm->mutex);
        |                    ^~

Then the lock scope was not correct, as it was never locked but unlocked
on exit. Based on description, hold the lock in the beginning of sysfs
entry point, then unlock before return.

While at it, add the description for 'mutex' in struct.

Signed-off-by: Hyun Kwon <hyun.kwon@xilinx.com>
Reported-by: Florian Klink <flokli@flokli.de>
Cc: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/misc/xilinx_flex_pm.c | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/drivers/misc/xilinx_flex_pm.c b/drivers/misc/xilinx_flex_pm.c
index e7684d105dbb..30dd61be1e0a 100644
--- a/drivers/misc/xilinx_flex_pm.c
+++ b/drivers/misc/xilinx_flex_pm.c
@@ -72,6 +72,7 @@
  * @funnel: Iomapped funnel register base address
  * @counterid_lpd: LPD counter id
  * @counterid_fpd: FPD counter id
+ * @mutex: avoid parallel access to device
  */
 struct xflex_dev_info {
 	struct device *dev;
@@ -174,6 +175,8 @@ static int xflex_sysfs_cmd(struct device *dev, const char *buf,
 	if (!eemi_ops->ioctl)
 		return -ENOTSUPP;
 
+	mutex_lock(&flexpm->mutex);
+
 	switch (cmd) {
 	case XFLEX_GET_COUNTER_LPD_WRRSP:
 		reg = flexpm->counterid_lpd | FPM_WRRSP_L | FPM_VAL;
@@ -350,10 +353,11 @@ static int xflex_sysfs_cmd(struct device *dev, const char *buf,
 		break;
 	}
 
+	mutex_unlock(&flexpm->mutex);
 	return rdval;
 
 exit_unlock:
-	mutex_unlock(&flexpm->lock);
+	mutex_unlock(&flexpm->mutex);
 	return ret;
 }
 
@@ -601,7 +605,7 @@ static int xflex_probe(struct platform_device *pdev)
 	if (IS_ERR(flexpm->funnel))
 		return PTR_ERR(flexpm->funnel);
 
-	mutex_init(&flexpm->lock);
+	mutex_init(&flexpm->mutex);
 	writel(FPM_UNLOCK, flexpm->funnel + FPM_LAR_OFFSET);
 	writel(FPM_UNLOCK, flexpm->baselpd + FPM_LAR_OFFSET);
 
-- 
2.31.1

