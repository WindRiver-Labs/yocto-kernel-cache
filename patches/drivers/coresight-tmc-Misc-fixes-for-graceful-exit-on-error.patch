From 7740819f7d7fdbc4df441c579c1f0844920449f7 Mon Sep 17 00:00:00 2001
From: Linu Cherian <lcherian@marvell.com>
Date: Fri, 31 Jan 2020 11:18:45 +0530
Subject: [PATCH 478/767] coresight: tmc: Misc fixes for graceful exit on error

commit fbeec3f3dbc03d77089a868bad1e8faca3e0d613 from
git@git.assembla.com:cavium/WindRiver.linux.git

- Avoid redundant hrtimer_init called for every timer setup

- Ensure necessary free/unregister APIs are called for secure
  trace buffer as well whenever we free the non secure counter part

- Ensure we do necessary error checks during buffer read
  in CS_MODE_READ_PREVBOOT mode.

Change-Id: I87217c140815b08e124e98d5da96e4b203bb0391
Signed-off-by: Linu Cherian <lcherian@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/22626
Reviewed-on: https://sj1git1.cavium.com/22965
[Kevin: Drop the parts in the coresight-tmc-etr.c]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/hwtracing/coresight/coresight-tmc-etr.c | 15 +++++++++++++--
 drivers/hwtracing/coresight/coresight-tmc.c     |  7 ++++---
 drivers/hwtracing/coresight/coresight-tmc.h     |  1 +
 3 files changed, 18 insertions(+), 5 deletions(-)

diff --git a/drivers/hwtracing/coresight/coresight-tmc-etr.c b/drivers/hwtracing/coresight/coresight-tmc-etr.c
index c7f48947d174..d234cb7a753a 100644
--- a/drivers/hwtracing/coresight/coresight-tmc-etr.c
+++ b/drivers/hwtracing/coresight/coresight-tmc-etr.c
@@ -261,6 +261,16 @@ static enum hrtimer_restart tmc_etr_timer_handler_global(struct hrtimer *t)
 	return HRTIMER_RESTART;
 }
 
+/* Timer init API common for both global and per core mode */
+void tmc_etr_timer_init(struct tmc_drvdata *drvdata)
+{
+	struct hrtimer *timer;
+
+	timer = is_etm_sync_mode_sw_global() ?
+		tmc_etr_tsync_global_timer() : &drvdata->timer;
+	hrtimer_init(timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+}
+
 /* Timer setup API common for both global and per core mode
  *
  * Global mode: Timer gets started only if its not active already.
@@ -291,7 +301,6 @@ static void tmc_etr_timer_setup(void *data)
 
 	timer = mode_global ?
 		tmc_etr_tsync_global_timer() : &drvdata->timer;
-	hrtimer_init(timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
 	timer->function = mode_global ?
 		tmc_etr_timer_handler_global : tmc_etr_timer_handler_percore;
 	dev_dbg(drvdata->dev, "Starting sync timer, mode:%s period:%lld ns\n",
@@ -1966,7 +1975,9 @@ int tmc_read_prepare_etr(struct tmc_drvdata *drvdata)
 
 	if (drvdata->mode == CS_MODE_READ_PREVBOOT) {
 		/* Initialize drvdata for reading trace data from last boot */
-		tmc_enable_etr_sink_sysfs(drvdata->csdev);
+		ret = tmc_enable_etr_sink_sysfs(drvdata->csdev);
+		if (ret)
+			return ret;
 		/* Update the buffer offset, len */
 		tmc_etr_sync_sysfs_buf(drvdata);
 		return 0;
diff --git a/drivers/hwtracing/coresight/coresight-tmc.c b/drivers/hwtracing/coresight/coresight-tmc.c
index e63dfcd7134f..645782911cc5 100644
--- a/drivers/hwtracing/coresight/coresight-tmc.c
+++ b/drivers/hwtracing/coresight/coresight-tmc.c
@@ -459,9 +459,10 @@ static int tmc_probe(struct amba_device *adev, const struct amba_id *id)
 	/* Update the smp target cpu */
 	drvdata->rc_cpu = is_etm_sync_mode_sw_global() ? SYNC_GLOBAL_CORE :
 		drvdata->cpu;
-	/* Used for SW sync insertion(global mode) */
-	if (!is_etm_sync_mode_hw())
-		tmc_etr_add_cpumap(drvdata);
+	if (!is_etm_sync_mode_hw()) {
+		tmc_etr_add_cpumap(drvdata); /* Used for global sync mode */
+		tmc_etr_timer_init(drvdata);
+	}
 
 	devid = readl_relaxed(drvdata->base + CORESIGHT_DEVID);
 	drvdata->config_type = BMVAL(devid, 6, 7);
diff --git a/drivers/hwtracing/coresight/coresight-tmc.h b/drivers/hwtracing/coresight/coresight-tmc.h
index 50b94b5b8231..fd3d3462082c 100644
--- a/drivers/hwtracing/coresight/coresight-tmc.h
+++ b/drivers/hwtracing/coresight/coresight-tmc.h
@@ -325,6 +325,7 @@ ssize_t tmc_etb_get_sysfs_trace(struct tmc_drvdata *drvdata,
 /* ETR functions */
 int tmc_read_prepare_etr(struct tmc_drvdata *drvdata);
 int tmc_read_unprepare_etr(struct tmc_drvdata *drvdata);
+void tmc_etr_timer_init(struct tmc_drvdata *drvdata);
 void tmc_etr_add_cpumap(struct tmc_drvdata *drvdata);
 extern const struct coresight_ops tmc_etr_cs_ops;
 ssize_t tmc_etr_get_sysfs_trace(struct tmc_drvdata *drvdata,
-- 
2.31.1

