From a7d4c78acd34f64a84bfd0bf15db883504fb4ae5 Mon Sep 17 00:00:00 2001
From: Richard Gong <richard.gong@intel.com>
Date: Tue, 22 Jun 2021 12:25:26 -0500
Subject: [PATCH 10/42] crypto: intel_fcs: update for getting service key info

commit f90976aa31507c641f7c903657fceefa83fcbf72 from
https://github.com/altera-opensource/linux-socfpga/commits/socfpga-5.4.124-lts

Update to support getting service key info.

Signed-off-by: Richard Gong <richard.gong@intel.com>
Signed-off-by: Siew Chin Lim <elly.siew.chin.lim@intel.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/crypto/intel_fcs.c           | 58 ++++++++++++++++++++++++++++
 include/uapi/linux/intel_fcs-ioctl.h |  5 +++
 2 files changed, 63 insertions(+)

diff --git a/drivers/crypto/intel_fcs.c b/drivers/crypto/intel_fcs.c
index ee13ec17aeb0..52a6ea866131 100644
--- a/drivers/crypto/intel_fcs.c
+++ b/drivers/crypto/intel_fcs.c
@@ -42,6 +42,7 @@
 #define CERTIFICATE_RSP_MAX_SZ	4096
 
 #define CRYPTO_EXPORTED_KEY_OBJECT_MAX_SZ 364
+#define CRYPTO_GET_KEY_INFO_MAX_SZ 144
 
 #define SIGMA_SESSION_ID_ONE	0x1
 #define SIGMA_UNKNOWN_SESSION	0xffffffff
@@ -1279,6 +1280,63 @@ static long fcs_ioctl(struct file *file, unsigned int cmd,
 
 		 break;
 
+	case INTEL_FCS_DEV_CRYPTO_GET_KEY_INFO:
+		 if (copy_from_user(data, (void __user *)arg, sizeof(*data))) {
+			 dev_err(dev, "failure on copy_from_user\n");
+			 return -EFAULT;
+		 }
+
+		 if (data->com_paras.k_object.obj_data_sz > CRYPTO_GET_KEY_INFO_MAX_SZ) {
+			 dev_err(dev, "Invalid key object size %d\n",
+				 data->com_paras.k_object.obj_data_sz);
+			 return -EFAULT;
+		 }
+
+		 d_buf = stratix10_svc_allocate_memory(priv->chan,
+				 CRYPTO_GET_KEY_INFO_MAX_SZ);
+		 if (!d_buf) {
+			 dev_err(dev, "failed allocate key object buf\n");
+			 return -ENOMEM;
+		 }
+
+		 msg->command = COMMAND_FCS_CRYPTO_GET_KEY_INFO;
+		 msg->payload = NULL;
+		 msg->payload_length = 0;
+		 msg->payload_output = d_buf;
+		 msg->payload_length_output = CRYPTO_GET_KEY_INFO_MAX_SZ;
+		 msg->arg[0] = data->com_paras.k_object.sid;
+		 msg->arg[1] = data->com_paras.k_object.kid;
+		 priv->client.receive_cb = fcs_attestation_callback;
+
+		 ret = fcs_request_service(priv, (void *)msg,
+					   FCS_REQUEST_TIMEOUT);
+		 if (!ret && !priv->status) {
+			 if (priv->size > CRYPTO_GET_KEY_INFO_MAX_SZ) {
+				 dev_err(dev, "returned size %d is incorrect\n",
+					 priv->size);
+				 fcs_close_services(priv, NULL, d_buf);
+				 return -EFAULT;
+			 }
+
+			 memcpy(data->com_paras.k_object.obj_data,
+				priv->kbuf, priv->size);
+			 data->com_paras.k_object.obj_data_sz = priv->size;
+		 } else {
+			 data->com_paras.k_object.obj_data = NULL;
+			 data->com_paras.k_object.obj_data_sz = 0;
+		 }
+
+		 data->status = priv->status;
+
+		 if (copy_to_user((void __user *)arg, data, sizeof(*data))) {
+			 dev_err(dev, "failure on copy_to_user\n");
+			 fcs_close_services(priv, NULL, d_buf);
+			 ret = -EFAULT;
+		 }
+
+		 fcs_close_services(priv, NULL, d_buf);
+		 break;
+
 	default:
 		dev_warn(dev, "shouldn't be here [0x%x]\n", cmd);
 		break;
diff --git a/include/uapi/linux/intel_fcs-ioctl.h b/include/uapi/linux/intel_fcs-ioctl.h
index 963dda198b9a..4994c77a15d5 100644
--- a/include/uapi/linux/intel_fcs-ioctl.h
+++ b/include/uapi/linux/intel_fcs-ioctl.h
@@ -331,6 +331,7 @@ enum intel_fcs_command_code {
 	INTEL_FCS_DEV_CRYPTO_IMPORT_KEY_CMD,
 	INTEL_FCS_DEV_CRYPTO_EXPORT_KEY_CMD,
 	INTEL_FCS_DEV_CRYPTO_REMOVE_KEY_CMD,
+	INTEL_FCS_DEV_CRYPTO_GET_KEY_INFO_CMD,
 };
 
 #define INTEL_FCS_DEV_VERSION_REQUEST \
@@ -413,5 +414,9 @@ enum intel_fcs_command_code {
 	_IOWR(INTEL_FCS_IOCTL, \
 	      INTEL_FCS_DEV_CRYPTO_REMOVE_KEY_CMD, struct intel_fcs_dev_ioctl)
 
+#define INTEL_FCS_DEV_CRYPTO_GET_KEY_INFO \
+	_IOWR(INTEL_FCS_IOCTL, \
+	      INTEL_FCS_DEV_CRYPTO_GET_KEY_INFO_CMD, struct intel_fcs_dev_ioctl)
+
 #endif
 
-- 
2.31.1

