From 4e45d273b9bc27ca064b8162853fe29f51a4c9e8 Mon Sep 17 00:00:00 2001
From: Hariprasad Kelam <hkelam@marvell.com>
Date: Mon, 8 Mar 2021 14:25:59 +0530
Subject: [PATCH 11/17] octeontx2-af: code clean up for Physical link setttings

commit 9a2687b8474f104598d5ccac8c154c6b5e638565 from
git@git.assembla.com:cavium/WindRiver.linux.git

This patch cleaup changes like removing inline qualifier

Change-Id: If2901d0de3c67f3628a2a214b32c94ad59c1d382
Signed-off-by: Hariprasad Kelam <hkelam@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/47404
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/af/cgx.c    | 57 +++++++++++-----------
 drivers/net/ethernet/marvell/octeontx2/af/cgx.h    |  4 +-
 drivers/net/ethernet/marvell/octeontx2/af/mbox.h   | 36 +++++++-------
 .../net/ethernet/marvell/octeontx2/af/rvu_cgx.c    | 36 +++++++-------
 4 files changed, 67 insertions(+), 66 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/cgx.c b/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
index c653a10..81d5f5c 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
@@ -918,7 +918,7 @@ static inline void cgx_link_usertable_init(void)
 	cgx_lmactype_string[LMAC_MODE_USXGMII] = "USXGMII";
 }
 
-static inline int cgx_link_usertable_index_map(int speed)
+static int cgx_link_usertable_index_map(int speed)
 {
 	switch (speed) {
 	case SPEED_10:
@@ -954,7 +954,9 @@ static inline int cgx_link_usertable_index_map(int speed)
 static void set_mod_args(struct cgx_set_link_mode_args *args,
 			 u32 speed, u8 duplex, u8 autoneg, u64 mode)
 {
-	/* firmware requires this value in the reverse format */
+	/* Fill default values incase of user did not pass
+	 * valid parameters
+	 */
 	if (args->duplex == DUPLEX_UNKNOWN)
 		args->duplex = duplex;
 	if (args->speed == SPEED_UNKNOWN)
@@ -1255,6 +1257,31 @@ int cgx_get_fwdata_base(u64 *base)
 	return err;
 }
 
+int cgx_set_link_mode(void *cgxd, struct cgx_set_link_mode_args args,
+		      int cgx_id, int lmac_id)
+{
+	struct cgx *cgx = cgxd;
+	u64 req = 0, resp;
+
+	if (!cgx)
+		return -ENODEV;
+
+	if (args.mode)
+		otx2_map_ethtool_link_modes(args.mode, &args);
+	if (!args.speed && args.duplex && !args.an)
+		return -EINVAL;
+
+	req = FIELD_SET(CMDREG_ID, CGX_CMD_MODE_CHANGE, req);
+	req = FIELD_SET(CMDMODECHANGE_SPEED,
+			cgx_link_usertable_index_map(args.speed), req);
+	req = FIELD_SET(CMDMODECHANGE_DUPLEX, args.duplex, req);
+	req = FIELD_SET(CMDMODECHANGE_AN, args.an, req);
+	req = FIELD_SET(CMDMODECHANGE_PORT, args.ports, req);
+	req = FIELD_SET(CMDMODECHANGE_FLAGS, args.mode, req);
+
+	return cgx_fwi_cmd_generic(req, &resp, cgx, lmac_id);
+}
+
 int cgx_set_fec(u64 fec, int cgx_id, int lmac_id)
 {
 	u64 req = 0, resp;
@@ -1317,32 +1344,6 @@ int cgx_get_phy_mod_type(void *cgxd, int lmac_id)
 	return err;
 }
 
-int cgx_set_link_mode(void *cgxd, struct cgx_set_link_mode_args args,
-		      int cgx_id, int lmac_id)
-{
-	struct cgx *cgx = cgxd;
-	u64 req = 0, resp;
-	int err = 0;
-
-	if (!cgx)
-		return -ENODEV;
-
-	if (args.mode)
-		otx2_map_ethtool_link_modes(args.mode, &args);
-	if (!args.speed && args.duplex && !args.an)
-		return -EINVAL;
-
-	req = FIELD_SET(CMDREG_ID, CGX_CMD_MODE_CHANGE, req);
-	req = FIELD_SET(CMDMODECHANGE_SPEED,
-			cgx_link_usertable_index_map(args.speed), req);
-	req = FIELD_SET(CMDMODECHANGE_DUPLEX, args.duplex, req);
-	req = FIELD_SET(CMDMODECHANGE_AN, args.an, req);
-	req = FIELD_SET(CMDMODECHANGE_PORT, args.ports, req);
-	req = FIELD_SET(CMDMODECHANGE_FLAGS, args.mode, req);
-	err = cgx_fwi_cmd_generic(req, &resp, cgx, lmac_id);
-	return err;
-}
-
 static int cgx_fwi_link_change(struct cgx *cgx, int lmac_id, bool enable)
 {
 	u64 req = 0;
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/cgx.h b/drivers/net/ethernet/marvell/octeontx2/af/cgx.h
index 1a0766b..2bc8c6a 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/cgx.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/cgx.h
@@ -161,8 +161,6 @@ int cgx_get_link_info(void *cgxd, int lmac_id,
 		      struct cgx_link_user_info *linfo);
 int cgx_lmac_linkup_start(void *cgxd);
 int cgx_get_fwdata_base(u64 *base);
-int cgx_set_link_mode(void *cgxd, struct cgx_set_link_mode_args args,
-		      int cgx_id, int lmac_id);
 int cgx_lmac_get_pause_frm_status(void *cgxd, int lmac_id,
 				  u8 *tx_pause, u8 *rx_pause);
 int cgx_lmac_enadis_pause_frm(void *cgxd, int lmac_id,
@@ -178,5 +176,7 @@ int cgx_lmac_enadis_pause_frm(void *cgxd, int lmac_id,
 int cgx_set_fec(u64 fec, int cgx_id, int lmac_id);
 int cgx_get_fec_stats(void *cgxd, int lmac_id, struct cgx_fec_stats_rsp *rsp);
 int cgx_get_phy_fec_stats(void *cgxd, int lmac_id);
+int cgx_set_link_mode(void *cgxd, struct cgx_set_link_mode_args args,
+		      int cgx_id, int lmac_id);
 
 #endif /* CGX_H */
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
index 8254f35..4998c8a 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
@@ -586,6 +586,25 @@ struct cgx_fw_data {
 	struct cgx_lmac_fwdata_s fwdata;
 };
 
+struct cgx_set_link_mode_args {
+	u32 speed;
+	u8 duplex;
+	u8 an;
+	u8 ports;
+	u64 mode;
+};
+
+struct cgx_set_link_mode_req {
+#define AUTONEG_UNKNOWN		0xff
+	struct mbox_msghdr hdr;
+	struct cgx_set_link_mode_args args;
+};
+
+struct cgx_set_link_mode_rsp {
+	struct mbox_msghdr hdr;
+	int status;
+};
+
 struct cgx_set_link_state_msg {
 	struct mbox_msghdr hdr;
 	u8 enable; /* '1' for link up, '0' for link down */
@@ -609,24 +628,7 @@ struct npc_set_pkind {
 	u8 dir;
 	u8 pkind; /* valid only in case custom flag */
 };
-struct cgx_set_link_mode_args {
-	u32 speed;
-	u8 duplex;
-	u8 an;
-	u8 ports;
-	u64 mode;
-};
-
-struct cgx_set_link_mode_req {
-#define AUTONEG_UNKNOWN		0xff
-	struct mbox_msghdr hdr;
-	struct cgx_set_link_mode_args args;
-};
 
-struct cgx_set_link_mode_rsp {
-	struct mbox_msghdr hdr;
-	int status;
-};
 /* NPA mbox message formats */
 
 /* NPA mailbox error codes
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
index 9220431..7ea3c83 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
@@ -951,6 +951,23 @@ int rvu_mbox_handler_cgx_get_aux_link_info(struct rvu *rvu, struct msg_req *req,
 	return 0;
 }
 
+int rvu_mbox_handler_cgx_set_link_mode(struct rvu *rvu,
+				       struct cgx_set_link_mode_req *req,
+				       struct cgx_set_link_mode_rsp *rsp)
+{
+	int pf = rvu_get_pf(req->hdr.pcifunc);
+	u8 cgx_idx, lmac;
+	void *cgxd;
+
+	if (!is_cgx_config_permitted(rvu, req->hdr.pcifunc))
+		return -EPERM;
+
+	rvu_get_cgx_lmac_id(rvu->pf2cgxlmac_map[pf], &cgx_idx, &lmac);
+	cgxd = rvu_cgx_pdata(cgx_idx, rvu);
+	rsp->status = cgx_set_link_mode(cgxd, req->args, cgx_idx, lmac);
+	return 0;
+}
+
 int rvu_mbox_handler_cgx_set_link_state(struct rvu *rvu,
 					struct cgx_set_link_state_msg *req,
 					struct msg_rsp *rsp)
@@ -1044,25 +1061,6 @@ int rvu_cgx_nix_cuml_stats(struct rvu *rvu, void *cgxd, int lmac_id,
 	return 0;
 }
 
-int rvu_mbox_handler_cgx_set_link_mode(struct rvu *rvu,
-				       struct cgx_set_link_mode_req *req,
-				       struct cgx_set_link_mode_rsp *rsp)
-{
-	int pf = rvu_get_pf(req->hdr.pcifunc);
-	u8 cgx_idx, lmac;
-	void *cgxd;
-
-	if (!is_cgx_config_permitted(rvu, req->hdr.pcifunc))
-		return -EPERM;
-
-	rvu_get_cgx_lmac_id(rvu->pf2cgxlmac_map[pf], &cgx_idx, &lmac);
-
-	cgxd = rvu_cgx_pdata(cgx_idx, rvu);
-
-	rsp->status =  cgx_set_link_mode(cgxd, req->args, cgx_idx, lmac);
-	return 0;
-}
-
 /* Dont allow cgx mapped VFs to overwrite PKIND config
  * incase of special PKINDs are configured like (HIGIG/EDSA)
  */
-- 
1.9.1

