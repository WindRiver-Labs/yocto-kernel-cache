From 19316cce7fe26f447098fa9fed26794421b59793 Mon Sep 17 00:00:00 2001
From: Naveen Mamindlapalli <naveenm@marvell.com>
Date: Wed, 22 Jul 2020 13:02:07 +0530
Subject: [PATCH 0581/1921] octeontx2-bphy-netdev: Enable MSIXEN bit in IOCTL
 handler

This patch enables the MSIX_CAP_HDR MSIXEN bit in the IOCTL
handler that is used by the ODP BPHY code to configure the BPHY
netdev interfaces, otherwise the MSIXEN bit would be cleared
when the ODP BPHY code tries to initialize the BPHY module
before calling the IOCTL.

Change-Id: I48fe5931e9c2e8e25c9e18d68b72170bcd08bf5d
Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/32484
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../marvell/octeontx2/bphy/otx2_bphy_main.c   | 32 +++++++++++++------
 1 file changed, 23 insertions(+), 9 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_bphy_main.c b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_bphy_main.c
index 9846a11c234c..17bf19f196ef 100644
--- a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_bphy_main.c
+++ b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_bphy_main.c
@@ -85,6 +85,15 @@ static irqreturn_t otx2_bphy_intr_handler(int irq, void *dev_id)
 	return IRQ_HANDLED;
 }
 
+static inline void msix_enable_ctrl(struct pci_dev *dev)
+{
+	u16 control;
+
+	pci_read_config_word(dev, dev->msix_cap + PCI_MSIX_FLAGS, &control);
+	control |= PCI_MSIX_FLAGS_ENABLE;
+	pci_write_config_word(dev, dev->msix_cap + PCI_MSIX_FLAGS, control);
+}
+
 static long otx2_bphy_cdev_ioctl(struct file *filp, unsigned int cmd,
 				 unsigned long arg)
 {
@@ -102,6 +111,7 @@ static long otx2_bphy_cdev_ioctl(struct file *filp, unsigned int cmd,
 	case OTX2_RFOE_IOCTL_ODP_INTF_CFG:
 	{
 		struct bphy_netdev_comm_intf_cfg *intf_cfg;
+		struct pci_dev *bphy_pdev;
 		int idx;
 
 		if (cdev->odp_intf_cfg) {
@@ -140,6 +150,19 @@ static long otx2_bphy_cdev_ioctl(struct file *filp, unsigned int cmd,
 			goto out;
 		}
 
+		/* The MSIXEN bit is getting cleared when ODP BPHY driver
+		 * resets BPHY. So enabling it back in IOCTL.
+		 */
+		bphy_pdev = pci_get_device(OTX2_BPHY_PCI_VENDOR_ID,
+					   OTX2_BPHY_PCI_DEVICE_ID, NULL);
+		if (!bphy_pdev) {
+			dev_err(cdev->dev, "Couldn't find BPHY PCI device %x\n",
+				OTX2_BPHY_PCI_DEVICE_ID);
+			ret = -ENODEV;
+			goto out;
+		}
+		msix_enable_ctrl(bphy_pdev);
+
 		/* Enable CPRI ETH UL INT */
 		for (idx = 0; idx < OTX2_BPHY_CPRI_MAX_MHAB; idx++) {
 			if (intf_cfg[idx].if_type == IF_TYPE_CPRI)
@@ -418,15 +441,6 @@ static const struct file_operations otx2_bphy_cdev_fops = {
 	.release	= otx2_bphy_cdev_release,
 };
 
-static inline void msix_enable_ctrl(struct pci_dev *dev)
-{
-	u16 control;
-
-	pci_read_config_word(dev, dev->msix_cap + PCI_MSIX_FLAGS, &control);
-	control |= PCI_MSIX_FLAGS_ENABLE;
-	pci_write_config_word(dev, dev->msix_cap + PCI_MSIX_FLAGS, control);
-}
-
 static int otx2_bphy_probe(struct platform_device *pdev)
 {
 	struct otx2_bphy_cdev_priv *cdev_priv;
-- 
2.31.1

