From 1ce4b81bee0717efb78d0f61f32d8d6c2eeaf469 Mon Sep 17 00:00:00 2001
From: Baha Mesleh <baha.mesleh@nokia.com>
Date: Mon, 22 Nov 2021 19:54:03 +0530
Subject: [PATCH] octeontx2-bphy-netdev: fix possibility of processing the mbt
 multiple times

commit 25d092a20e82483c45552637e346d7b1baf7fbc0 from
git@git.assembla.com:cavium/WindRiver.linux.git

The mbt ring is the same for each rx packet type across LMACs in a RFOE,
and the mbt sw pointers are maintained per LMAC, which causes problem when
the napi poll routine is scheduled for different LMACs in the same RFOE at
different circumstances. This patch maintains mbt sw pointers in rfoe common
structure which is shared by all LMACs in a RFOE mhab.

Change-Id: I0b4f6d000be06508cddf5c6d54ab658735f11d16
Signed-off-by: Baha Mesleh <baha.mesleh@nokia.com>
Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/65971
Reviewed-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
Tested-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 .../marvell/octeontx2/bphy/otx2_rfoe.c        | 24 +++++++++++--------
 .../marvell/octeontx2/bphy/otx2_rfoe.h        |  3 ++-
 2 files changed, 16 insertions(+), 11 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
index 8a021d302108..a0c0352615b6 100644
--- a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
+++ b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
@@ -624,6 +624,8 @@ static int otx2_rfoe_process_rx_flow(struct otx2_rfoe_ndev_priv *priv,
 	struct rx_ft_cfg *ft_cfg;
 	u64 mbt_cfg;
 	u16 nxt_buf;
+	int *mbt_last_idx = &priv->rfoe_common->rx_mbt_last_idx[pkt_type];
+	u16 *prv_nxt_buf = &priv->rfoe_common->nxt_buf[pkt_type];
 
 	ft_cfg = &priv->rx_ft_cfg[pkt_type];
 
@@ -639,33 +641,35 @@ static int otx2_rfoe_process_rx_flow(struct otx2_rfoe_ndev_priv *priv,
 	nxt_buf = (mbt_cfg >> 32) & 0xffff;
 
 	/* no mbt entries to process */
-	if ((ft_cfg->mbt_last_idx % ft_cfg->num_bufs) == nxt_buf) {
+	if (nxt_buf == *prv_nxt_buf) {
 		netif_dbg(priv, rx_status, priv->netdev,
 			  "no rx packets to process, rfoe=%d pkt_type=%d mbt_idx=%d nxt_buf=%d mbt_buf_sw_head=%d\n",
 			  priv->rfoe_num, pkt_type, ft_cfg->mbt_idx, nxt_buf,
-			  ft_cfg->mbt_last_idx);
+			  *mbt_last_idx);
 		return 0;
 	}
 
+	*prv_nxt_buf = nxt_buf;
+
 	/* get count of pkts to process, check ring wrap condition */
-	if (ft_cfg->mbt_last_idx > nxt_buf) {
-		count = ft_cfg->num_bufs - ft_cfg->mbt_last_idx;
+	if (*mbt_last_idx > nxt_buf) {
+		count = ft_cfg->num_bufs - *mbt_last_idx;
 		count += nxt_buf;
 	} else {
-		count = nxt_buf - ft_cfg->mbt_last_idx;
+		count = nxt_buf - *mbt_last_idx;
 	}
 
 	netif_dbg(priv, rx_status, priv->netdev,
 		  "rfoe=%d pkt_type=%d mbt_idx=%d nxt_buf=%d mbt_buf_sw_head=%d count=%d\n",
 		  priv->rfoe_num, pkt_type, ft_cfg->mbt_idx, nxt_buf,
-		  ft_cfg->mbt_last_idx, count);
+		  *mbt_last_idx, count);
 
 	while (likely((processed_pkts < budget) && (processed_pkts < count))) {
-		otx2_rfoe_process_rx_pkt(priv, ft_cfg, ft_cfg->mbt_last_idx);
+		otx2_rfoe_process_rx_pkt(priv, ft_cfg, *mbt_last_idx);
 
-		ft_cfg->mbt_last_idx++;
-		if (ft_cfg->mbt_last_idx == ft_cfg->num_bufs)
-			ft_cfg->mbt_last_idx = 0;
+		(*mbt_last_idx)++;
+		if (*mbt_last_idx == ft_cfg->num_bufs)
+			*mbt_last_idx = 0;
 
 		processed_pkts++;
 	}
diff --git a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.h b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.h
index 4e5df6584cfd..7837c80bfb90 100644
--- a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.h
+++ b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.h
@@ -133,7 +133,6 @@ struct rx_ft_cfg {
 	void __iomem			*jdt_virt_addr;
 	u8				jd_rd_offset;	/* jd rd offset */
 	u8				pkt_offset;
-	int				mbt_last_idx;	/* sw head */
 	struct napi_struct		napi;
 	struct otx2_rfoe_ndev_priv	*priv;
 };
@@ -164,6 +163,8 @@ struct tx_job_queue_cfg {
 /* rfoe common (for all lmac's) */
 struct rfoe_common_cfg {
 	struct tx_job_queue_cfg		tx_oth_job_cfg;
+	int				rx_mbt_last_idx[PACKET_TYPE_MAX];
+	u16				nxt_buf[PACKET_TYPE_MAX];
 	u8				refcnt;
 	u8				rx_vlan_fwd_refcnt[VLAN_N_VID];
 };
-- 
2.31.1

