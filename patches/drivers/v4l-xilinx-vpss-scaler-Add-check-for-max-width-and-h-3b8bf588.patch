From 7cc32994a870ad08b56180aebce8295bab02a5d1 Mon Sep 17 00:00:00 2001
From: Vishal Sagar <vishal.sagar@xilinx.com>
Date: Fri, 21 Sep 2018 15:53:54 +0530
Subject: [PATCH 0428/1851] v4l: xilinx-vpss-scaler: Add check for max width
 and height

commit 84d5523e5ae46a7039134d9bab6a3f310c9623d1 from
https://github.com/Xilinx/linux-xlnx.git

Patch adds support to get maximum width and height from dt property.
If the parameters are not present then the IP sets the max size of
8192x4320. It then uses this value to clamp width and height instead of
fixed default value while setting format.

It also corrects the minimum width and height parameters.

Signed-off-by: Vishal Sagar <vishal.sagar@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 .../platform/xilinx/xilinx-vpss-scaler.c      | 34 ++++++++++++++-----
 1 file changed, 26 insertions(+), 8 deletions(-)

diff --git a/drivers/media/platform/xilinx/xilinx-vpss-scaler.c b/drivers/media/platform/xilinx/xilinx-vpss-scaler.c
index eb736290f847..394d11343d65 100644
--- a/drivers/media/platform/xilinx/xilinx-vpss-scaler.c
+++ b/drivers/media/platform/xilinx/xilinx-vpss-scaler.c
@@ -24,10 +24,10 @@
 #include <media/v4l2-subdev.h>
 #include "xilinx-vip.h"
 
-#define XSCALER_MIN_WIDTH		(32)
-#define XSCALER_MAX_WIDTH		(3840)
-#define XSCALER_MIN_HEIGHT		(32)
-#define XSCALER_MAX_HEIGHT		(2160)
+#define XSCALER_MIN_WIDTH		(64)
+#define XSCALER_MAX_WIDTH		(8192)
+#define XSCALER_MIN_HEIGHT		(64)
+#define XSCALER_MAX_HEIGHT		(4320)
 #define XSCALER_MAX_PHASES		(64)
 
 /* Modify to defaults incase it is not configured from application */
@@ -1462,9 +1462,9 @@ static int xscaler_set_format(struct v4l2_subdev *subdev,
 	*format = fmt->format;
 
 	format->width = clamp_t(unsigned int, fmt->format.width,
-				XSCALER_MIN_WIDTH, XSCALER_MAX_WIDTH);
+				XSCALER_MIN_WIDTH, xscaler->max_pixels);
 	format->height = clamp_t(unsigned int, fmt->format.height,
-				XSCALER_MIN_HEIGHT, XSCALER_MAX_HEIGHT);
+				 XSCALER_MIN_HEIGHT, xscaler->max_lines);
 	fmt->format = *format;
 	return 0;
 }
@@ -1538,6 +1538,26 @@ static int xscaler_parse_of(struct xscaler_device *xscaler)
 	int ret;
 	u32 port_id, dt_ppc;
 
+	ret = of_property_read_u32(node, "xlnx,max-height",
+				   &xscaler->max_lines);
+	if (ret < 0) {
+		xscaler->max_lines = XSCALER_MAX_HEIGHT;
+	} else if (xscaler->max_lines > XSCALER_MAX_HEIGHT ||
+		   xscaler->max_lines < XSCALER_MIN_HEIGHT) {
+		dev_err(dev, "Invalid height in dt");
+		return -EINVAL;
+	}
+
+	ret = of_property_read_u32(node, "xlnx,max-width",
+				   &xscaler->max_pixels);
+	if (ret < 0) {
+		xscaler->max_pixels = XSCALER_MAX_WIDTH;
+	} else if (xscaler->max_pixels > XSCALER_MAX_WIDTH ||
+		   xscaler->max_pixels < XSCALER_MIN_WIDTH) {
+		dev_err(dev, "Invalid width in dt");
+		return -EINVAL;
+	}
+
 	ports = of_get_child_by_name(node, "ports");
 	if (!ports)
 		ports = node;
@@ -1661,8 +1681,6 @@ static int xscaler_probe(struct platform_device *pdev)
 
 	/* Initialize coefficient parameters */
 	xscaler->max_num_phases = XSCALER_MAX_PHASES;
-	xscaler->max_lines = XSCALER_MAX_HEIGHT;
-	xscaler->max_pixels = XSCALER_MAX_WIDTH;
 
 	ret = xvip_init_resources(&xscaler->xvip);
 	if (ret < 0)
-- 
2.31.1

