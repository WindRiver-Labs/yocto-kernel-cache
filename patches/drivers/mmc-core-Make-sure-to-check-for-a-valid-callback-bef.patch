From edea440dd4f55222d601fc301db43e1866824379 Mon Sep 17 00:00:00 2001
From: George Cherian <george.cherian@marvell.com>
Date: Wed, 31 Mar 2021 15:41:46 +0530
Subject: [PATCH 1340/1921] mmc: core: Make sure to check for a valid callback
 before calling

In case the host doesn't implement the req_cleanup_pending or
req_completion_poll then we might endup calling a NULL function pointer.
Add the sanity checks before making the call.

This change fixes following 2 issues

1.  while dumping the crash log to mmc pstore

[  419.680066] Unable to handle kernel NULL pointer dereference at
virtual address 0000000000000000
[  419.693213] Mem abort info:
[  419.699519]   ESR = 0x86000007
[  419.706641]   EC = 0x21: IABT (current EL), IL = 32 bits
[  419.716159]   SET = 0, FnV = 0
[  419.722227]   EA = 0, S1PTW = 0
[  419.729080] user pgtable: 64k pages, 48-bit VAs,
pgdp=000000000ce94a00
[  419.739479] [0000000000000000] pgd=000000000ce30003,
pud=000000000ce30003, pmd=000000000d8f0003, pte=0000000000000000
[  419.757970] Internal error: Oops: 86000007 [#1] PREEMPT SMP
[  419.766691] Modules linked in: ipv6
[  419.774717] CPU: 3 PID: 292 Comm: bash Not tainted 5.4.105 #1
[  419.784038] Hardware name: Marvell CNF105NXX board (DT)
[  419.792988] pstate: 60400089 (nZCv daIf +PAN -UAO)
[  419.801223] pc : 0x0
[  419.807225] lr : mmc_wait_for_oops_req+0x20/0x64
[  419.815128] sp : ffff80001328f9a0
[  419.821556] x29: ffff80001328f9a0 x28: 00000000000027c3
[  419.831381] x27: 000000000000000e x26: 0000000000002800
[  419.841453] x25: ffff8000110539d8 x24: ffff800010ca6610
[  419.851711] x23: ffff000004bbb800 x22: ffff00000b7f7800
[  419.861901] x21: ffff000004bbb800 x20: ffff80001328f9f8
[  419.872141] x19: ffff00000ab23000 x18: 0000000000000030
[  419.882338] x17: 0000000000000000 x16: 0000000000000000
[  419.890351] x15: ffff000004bbbc78 x14: ffffffffffffffff
[  419.899462] x13: ffff80009328fa8a x12: ffff80001328fa92
[  419.908450] x11: 6e6172752064657a x10: 0000000000000024
[  419.917137] x9 : 6e75203a6e656764 x8 : 6f6e203a74696d69
[  419.926073] x7 : ffff0000fcef0000 x6 : ffff00000b8027c2
[  419.935075] x5 : 0000000000000000 x4 : 0000000000000000
[  419.943930] x3 : ffff80001328fa78 x2 : 0000000000000003
[  419.952736] x1 : 0000000000000000 x0 : ffff00000ab23000
[  419.961542] Call trace:
[  419.966627]  0x0
[  419.972216]  mmc_part_switch.isra.0+0xa8/0x110
[  419.980388]  mmc_oops_pstore_write+0x190/0x1b0
[  419.988270]  pstore_dump+0x1a8/0x2a0
[  419.995126]  kmsg_dump+0x9c/0x10c
[  420.002098]  panic+0x190/0x360
[  420.009511]  sysrq_handle_crash+0x18/0x20
[  420.018119]  __handle_sysrq+0x88/0x180
[  420.026375]  write_sysrq_trigger+0x8c/0xb0
[  420.034413]  proc_reg_write+0x6c/0xb4
[  420.042573]  __vfs_write+0x18/0x40
[  420.050479]  vfs_write+0xdc/0x1cc
[  420.058211]  ksys_write+0x68/0xf0
[  420.065246]  __arm64_sys_write+0x18/0x20
[  420.073745]  el0_svc_handler+0x80/0x1c0
[  420.082119]  el0_svc+0x8/0x1bc
[  420.088964] Code: bad PC value

2. while mounting the pstore

[  407.732350] Unable to handle kernel NULL pointer dereference at
virtual address 0000000000000000
[  407.748197] Mem abort info:
[  407.753161]   ESR = 0x86000007
[  407.759683]   EC = 0x21: IABT (current EL), IL = 32 bits
[  407.768088]   SET = 0, FnV = 0
[  407.773196]   EA = 0, S1PTW = 0
[  407.779948] user pgtable: 64k pages, 48-bit VAs,
pgdp=000000000cc85200
[  407.785144] [0000000000000000] pgd=000000000d720003,
pud=000000000d720003, pmd=000000000d740003, pte=0000000000000000
[  407.801207] Internal error: Oops: 86000007 [#1] PREEMPT SMP
[  407.811962] Modules linked in: ipv6
[  407.821939] CPU: 1 PID: 315 Comm: mount Not tainted 5.4.105 #1
[  407.834444] Hardware name: Marvell CNF105NXX board (DT)
[  407.836633] pstate: 40400009 (nZcv daif +PAN -UAO)
[  407.838331] pc : 0x0
[  407.860321] lr : mmc_wait_for_oops_req+0x20/0x64

ess407.865158] sp : ffff8000133afab0M
age from syslogd@marvell at Jan  1 00:06:41 ...
 kernel:[  407.801207] Internal error: [  407.870125] x29:
ffff8000133afab0 x28: ffff00000a84dc00
Oops: 86000007 [#1] PREEMPT SMP[  407.885118] x27: 0000000000000000 x26:
ffff8000110acd98

[  407.897421] x25: 0000000000000000 x24: 0000000000002800
[  407.909265] x23: ffff000007a4ca00 x22: ffff00000a84dc00
[  407.921744] x21: ffff00000a84dc00 x20: ffff8000133afb08
[  407.933529] x19: ffff000004c65000 x18: 0000000000000000
[  407.945096] x17: 0000000000000000 x16: 0000000000000000
[  407.956960] x15: ffffffffffffffff x14: 0000000000000000
[  407.968549] x13: 0000000000003186 x12: 0000000000000000
[  407.979825] x11: ffffffdfffe36800 x10: 000000000000e77e
[  407.991268] x9 : 0000000000000000 x8 : ffff00000da04000
[  408.002851] x7 : 0000000000000000 x6 : 000000000000003f
[  408.014058] x5 : 0000000000000040 x4 : 0000000000000000
[  408.025374] x3 : ffff8000133afb88 x2 : 0000000000000003
[  408.036364] x1 : 0000000000000000 x0 : ffff000004c65000
[  408.047467] Call trace:
[  408.053814]  0x0
[  408.060436]  mmc_part_switch.isra.0+0xa8/0x110
[  408.070721]  mmc_oops_pstore_read+0x210/0x270
[  408.080824]  pstore_get_backend_records+0xbc/0x1b0
[  408.091314]  pstore_get_records+0x4c/0x70
[  408.100700]  pstore_fill_super+0xcc/0xf0
[  408.110964]  mount_single+0xc8/0xf0
[  408.120686]  pstore_mount+0x18/0x20
[  408.130264]  legacy_get_tree+0x2c/0x5c
[  408.140573]  vfs_get_tree+0x24/0xe4
[  408.148988]  do_mount+0x610/0xaac
[  408.157177]  ksys_mount+0x8c/0xf0
[  408.165411]  __arm64_sys_mount+0x1c/0x30
[  408.174526]  el0_svc_handler+0x80/0x1c0
[  408.182780]  el0_svc+0x8/0x1bc
[  408.189664] Code: bad PC value
[  408.196628] ---[ end trace b393efaee36073d3 ]---
Segmentation fault

Change-Id: I6325c5a98928fbbe10b884d518205beb34c8014b
Signed-off-by: George Cherian <george.cherian@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/49001
Reviewed-by: Bhaskara Budiredla <bbudiredla@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/mmc/core/mmc_oops.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/drivers/mmc/core/mmc_oops.c b/drivers/mmc/core/mmc_oops.c
index 195d755a75aa..4531a2adf4fa 100644
--- a/drivers/mmc/core/mmc_oops.c
+++ b/drivers/mmc/core/mmc_oops.c
@@ -244,6 +244,7 @@ static struct mmc_oops_context oops_cxt = {
 int mmc_oops_card_set(struct mmc_card *card)
 {
 	struct mmc_oops_context *cxt = &oops_cxt;
+	struct mmc_host *host = card->host;
 
 	if (strcmp(mmc_hostname(card->host), mmcdev) || mmc_partnum == -1)
 		return 0;
@@ -251,6 +252,9 @@ int mmc_oops_card_set(struct mmc_card *card)
 	if (!mmc_card_mmc(card) && !mmc_card_sd(card))
 		return -ENODEV;
 
+	if (!host->ops->req_cleanup_pending || !host->ops->req_completion_poll)
+		return -ENODEV;
+
 	cxt->blk_offset = mmc_blk_get_start(card, mmc_partnum);
 	if (!cxt->blk_offset)
 		return -EINVAL;
-- 
2.31.1

