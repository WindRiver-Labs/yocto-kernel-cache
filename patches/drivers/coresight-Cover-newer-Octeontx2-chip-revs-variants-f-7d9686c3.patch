From 51a65a0ae49707af039aedfab395e05851d5d397 Mon Sep 17 00:00:00 2001
From: Linu Cherian <lcherian@marvell.com>
Date: Tue, 17 Mar 2020 11:55:57 +0530
Subject: [PATCH 0677/1921] coresight: Cover newer Octeontx2 chip revs/variants
 for relevant quirks

- Extend CSETR_QUIRK_BUFFSIZE_8BX to all chip variants
  and revsions.
- Extend the below quirks to 96xx C1
  * CSETR_QUIRK_RESET_CTL_REG
  * CSETR_QUIRK_NO_STOP_FLUSH
  * CSETM_QUIRK_SW_SYNC

Along with this, update the ETM driver option list to
reflect enabled ETM quirks for the sake of consistency.

Change-Id: I986a7a7d2e38f293f8d34dd6166e90dab1127201
Signed-off-by: Linu Cherian <lcherian@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/25414
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Bharat Bhushan <bbhushan2@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/32252
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../hwtracing/coresight/coresight-quirks.c    | 31 ++++++++++---------
 1 file changed, 17 insertions(+), 14 deletions(-)

diff --git a/drivers/hwtracing/coresight/coresight-quirks.c b/drivers/hwtracing/coresight/coresight-quirks.c
index cad1b46e2f13..debef67a592e 100644
--- a/drivers/hwtracing/coresight/coresight-quirks.c
+++ b/drivers/hwtracing/coresight/coresight-quirks.c
@@ -11,40 +11,30 @@ u32 coresight_get_etr_quirks(unsigned int id)
 	if (midr_is_cpu_model_range(read_cpuid_id(),
 				     MIDR_MRVL_OCTEONTX2_96XX,
 				     MIDR_CPU_VAR_REV(0, 0),
-				     MIDR_CPU_VAR_REV(3, 0)) ||
+				     MIDR_CPU_VAR_REV(3, 1)) ||
 	    midr_is_cpu_model_range(read_cpuid_id(),
 				     MIDR_MRVL_OCTEONTX2_95XX,
 				     MIDR_CPU_VAR_REV(0, 0),
 				     MIDR_CPU_VAR_REV(2, 0)))
-		options |= CSETR_QUIRK_BUFFSIZE_8BX |
-			CSETR_QUIRK_RESET_CTL_REG |
+		options |= CSETR_QUIRK_RESET_CTL_REG |
 			CSETR_QUIRK_NO_STOP_FLUSH;
 
 	/* Common across all Chip variants and revisions */
 	if (id == OCTEONTX_CN9XXX_ETR)
 		options |= CSETR_QUIRK_SECURE_BUFF |
+			CSETR_QUIRK_BUFFSIZE_8BX |
 			CSETR_QUIRK_FORCE_64B_DBA_RW;
 
 	return options;
 }
 
-u32 coresight_get_etm_quirks(unsigned int id)
-{
-	u32 options = 0; /* reset */
-
-	if (id == OCTEONTX_CN9XXX_ETM)
-		options |= CSETM_QUIRK_TREAT_ETMv43;
-
-	return options;
-}
-
 bool is_etm_has_hw_sync(void)
 {
 	/* Check if hardware supports sync insertion */
 	if (midr_is_cpu_model_range(read_cpuid_id(),
 				     MIDR_MRVL_OCTEONTX2_96XX,
 				     MIDR_CPU_VAR_REV(0, 0),
-				     MIDR_CPU_VAR_REV(3, 0)) ||
+				     MIDR_CPU_VAR_REV(3, 1)) ||
 	    midr_is_cpu_model_range(read_cpuid_id(),
 				     MIDR_MRVL_OCTEONTX2_95XX,
 				     MIDR_CPU_VAR_REV(0, 0),
@@ -54,6 +44,19 @@ bool is_etm_has_hw_sync(void)
 		return true;
 }
 
+u32 coresight_get_etm_quirks(unsigned int id)
+{
+	u32 options = 0; /* reset */
+
+	if (id == OCTEONTX_CN9XXX_ETM)
+		options |= CSETM_QUIRK_TREAT_ETMv43;
+
+	if (!is_etm_has_hw_sync())
+		options |= CSETM_QUIRK_SW_SYNC;
+
+	return options;
+}
+
 /* APIs for choosing the sync insertion mode */
 static int coresight_get_etm_sync_mode(void)
 {
-- 
2.31.1

