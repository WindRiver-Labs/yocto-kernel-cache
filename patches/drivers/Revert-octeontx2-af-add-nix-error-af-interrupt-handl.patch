From 5ad0d97071dd9cca629b0aa568c70591b134b510 Mon Sep 17 00:00:00 2001
From: George Cherian <george.cherian@marvell.com>
Date: Fri, 22 Jan 2021 10:21:10 +0530
Subject: [PATCH 1228/1921] Revert "octeontx2-af: add nix error af interrupt
 handlers"

This reverts commit 3ff6caa4dd417ecd7eb9b57a07b2c3e1a44eb69b.

Change-Id: I0032e2ab5f108c89e07757573ec8e2e54ec59037
Signed-off-by: George Cherian <george.cherian@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/44940
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/rvu.c   |   6 +-
 .../net/ethernet/marvell/octeontx2/af/rvu.h   |   2 -
 .../ethernet/marvell/octeontx2/af/rvu_nix.c   | 235 ------------------
 .../marvell/octeontx2/af/rvu_struct.h         |  10 -
 4 files changed, 1 insertion(+), 252 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
index d64edb32500d..2238baa8022f 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
@@ -2878,7 +2878,6 @@ static void rvu_unregister_interrupts(struct rvu *rvu)
 	int irq;
 
 	rvu_npa_unregister_interrupts(rvu);
-	rvu_nix_unregister_interrupts(rvu);
 	rvu_sso_unregister_interrupts(rvu);
 	rvu_cpt_unregister_interrupts(rvu);
 	rvu_ree_unregister_interrupts(rvu);
@@ -3095,10 +3094,6 @@ static int rvu_register_interrupts(struct rvu *rvu)
 	if (ret)
 		goto fail;
 
-	ret = rvu_nix_register_interrupts(rvu);
-	if (ret)
-		goto fail;
-
 	ret = rvu_sso_register_interrupts(rvu);
 	if (ret)
 		goto fail;
@@ -3393,6 +3388,7 @@ static int rvu_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 		goto err_flr;
 
 	rvu_setup_rvum_blk_revid(rvu);
+
 	err = rvu_policy_init(rvu);
 	if (err)
 		goto err_irq;
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
index 52db807b4298..6f80012a6863 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
@@ -760,8 +760,6 @@ void rvu_nix_freemem(struct rvu *rvu);
 int rvu_get_nixlf_count(struct rvu *rvu);
 void rvu_nix_lf_teardown(struct rvu *rvu, u16 pcifunc, int blkaddr, int npalf);
 int nix_get_nixlf(struct rvu *rvu, u16 pcifunc, int *nixlf, int *nix_blkaddr);
-int rvu_nix_register_interrupts(struct rvu *rvu);
-void rvu_nix_unregister_interrupts(struct rvu *rvu);
 void rvu_nix_reset_mac(struct rvu_pfvf *pfvf, int pcifunc);
 bool rvu_nix_is_ptp_tx_enabled(struct rvu *rvu, u16 pcifunc);
 int nix_update_bcast_mce_list(struct rvu *rvu, u16 pcifunc, bool add);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
index cef1853400cf..c0b2d79bdbff 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
@@ -4332,241 +4332,6 @@ int rvu_mbox_handler_nix_set_vlan_tpid(struct rvu *rvu,
 	return 0;
 }
 
-static irqreturn_t rvu_nix_af_rvu_intr_handler(int irq, void *rvu_irq)
-{
-	struct nix_hw *nix_hw = (struct nix_hw *)rvu_irq;
-	struct rvu *rvu = nix_hw->rvu;
-	int blkaddr = nix_hw->blkaddr;
-	u64 intr;
-
-	intr = rvu_read64(rvu, blkaddr, NIX_AF_RVU_INT);
-
-	if (intr & BIT_ULL(0))
-		dev_err_ratelimited(rvu->dev, "NIX: Unmapped slot error\n");
-
-	/* Clear interrupts */
-	rvu_write64(rvu, blkaddr, NIX_AF_RVU_INT, intr);
-	return IRQ_HANDLED;
-}
-
-static irqreturn_t rvu_nix_af_err_intr_handler(int irq, void *rvu_irq)
-{
-	struct nix_hw *nix_hw = (struct nix_hw *)rvu_irq;
-	struct rvu *rvu = nix_hw->rvu;
-	int blkaddr = nix_hw->blkaddr;
-	u64 intr;
-
-	intr = rvu_read64(rvu, blkaddr, NIX_AF_ERR_INT);
-
-	if (intr & BIT_ULL(14))
-		dev_err_ratelimited(rvu->dev,
-				    "NIX: Memory fault on NIX_AQ_INST_S read\n");
-
-	if (intr & BIT_ULL(13))
-		dev_err_ratelimited(rvu->dev,
-				    "NIX: Memory fault on NIX_AQ_RES_S write\n");
-
-	if (intr & BIT_ULL(12))
-		dev_err_ratelimited(rvu->dev, "NIX: AQ doorbell error\n");
-
-	if (intr & BIT_ULL(6))
-		dev_err_ratelimited(rvu->dev, "NIX: Rx on unmapped PF_FUNC\n");
-
-	if (intr & BIT_ULL(5))
-		dev_err_ratelimited(rvu->dev,
-				    "NIX: Rx multicast replication error\n");
-
-	if (intr & BIT_ULL(4))
-		dev_err_ratelimited(rvu->dev,
-				    "NIX: Memory fault on NIX_RX_MCE_S read\n");
-
-	if (intr & BIT_ULL(3))
-		dev_err_ratelimited(rvu->dev,
-				    "NIX: Memory fault on multicast WQE read\n");
-
-	if (intr & BIT_ULL(2))
-		dev_err_ratelimited(rvu->dev,
-				    "NIX: Memory fault on mirror WQE read\n");
-
-	if (intr & BIT_ULL(1))
-		dev_err_ratelimited(rvu->dev,
-				    "NIX: Memory fault on mirror pkt write\n");
-
-	if (intr & BIT_ULL(0))
-		dev_err_ratelimited(rvu->dev,
-				    "NIX: Memory fault on multicast pkt write\n");
-
-	/* Clear interrupts */
-	rvu_write64(rvu, blkaddr, NIX_AF_ERR_INT, intr);
-	return IRQ_HANDLED;
-}
-
-static irqreturn_t rvu_nix_af_ras_intr_handler(int irq, void *rvu_irq)
-{
-	struct nix_hw *nix_hw = (struct nix_hw *)rvu_irq;
-	struct rvu *rvu = nix_hw->rvu;
-	int blkaddr = nix_hw->blkaddr;
-	u64 intr;
-
-	intr = rvu_read64(rvu, blkaddr, NIX_AF_RAS);
-
-	if (intr & BIT_ULL(34))
-		dev_err_ratelimited(rvu->dev, "NIX: Poisoned data on NIX_AQ_INST_S read\n");
-
-	if (intr & BIT_ULL(33))
-		dev_err_ratelimited(rvu->dev, "NIX: Poisoned data on NIX_AQ_RES_S write\n");
-
-	if (intr & BIT_ULL(32))
-		dev_err_ratelimited(rvu->dev, "NIX: Poisoned data on HW context read\n");
-
-	if (intr & BIT_ULL(4))
-		dev_err_ratelimited(rvu->dev,
-				    "NIX: Poisoned data on packet read from mirror buffer\n");
-
-	if (intr & BIT_ULL(3))
-		dev_err_ratelimited(rvu->dev,
-				    "NIX: Poisoned data on packet read from multicast buffer\n");
-
-	if (intr & BIT_ULL(2))
-		dev_err_ratelimited(rvu->dev,
-				    "NIX: Poisoned data on WQE read from mirror buffer\n");
-
-	if (intr & BIT_ULL(1))
-		dev_err_ratelimited(rvu->dev,
-				    "NIX: Poisoned data on WQE read from multicast buffer\n");
-
-	if (intr & BIT_ULL(0))
-		dev_err_ratelimited(rvu->dev, "NIX: Poisoned data on NIX_RX_MCE_S read\n");
-
-	/* Clear interrupts */
-	rvu_write64(rvu, blkaddr, NIX_AF_RAS, intr);
-	return IRQ_HANDLED;
-}
-
-static bool rvu_nix_af_request_irq(struct rvu *rvu, struct nix_hw *nix_hw,
-				   int offset, const char *name,
-				   irq_handler_t fn)
-{
-	int rc;
-
-	WARN_ON(rvu->irq_allocated[offset]);
-	rvu->irq_allocated[offset] = false;
-	sprintf(&rvu->irq_name[offset * NAME_SIZE], name);
-	rc = request_irq(pci_irq_vector(rvu->pdev, offset), fn, 0,
-			 &rvu->irq_name[offset * NAME_SIZE], nix_hw);
-	if (rc)
-		dev_warn(rvu->dev, "Failed to register %s irq\n", name);
-	else
-		rvu->irq_allocated[offset] = true;
-
-	return rvu->irq_allocated[offset];
-}
-
-static int rvu_nix_blk_register_interrupts(struct rvu *rvu,
-					   struct nix_hw *nix_hw)
-{
-	int blkaddr, base;
-	bool rc;
-
-	blkaddr = nix_hw->blkaddr;
-
-	/* Get NIX AF MSIX vectors offset. */
-	base = rvu_read64(rvu, blkaddr, NIX_PRIV_AF_INT_CFG) & 0x3ff;
-	if (!base) {
-		dev_warn(rvu->dev,
-			 "Failed to get NIX%d NIX_AF_INT vector offsets\n",
-			 blkaddr - BLKADDR_NIX0);
-		return 0;
-	}
-	/* Register and enable NIX_AF_RVU_INT interrupt */
-	rc = rvu_nix_af_request_irq(rvu, nix_hw, base +  NIX_AF_INT_VEC_RVU,
-				    "NIX_AF_RVU_INT",
-				    rvu_nix_af_rvu_intr_handler);
-	if (!rc)
-		goto err;
-	rvu_write64(rvu, blkaddr, NIX_AF_RVU_INT_ENA_W1S, ~0ULL);
-
-	/* Register and enable NIX_AF_ERR_INT interrupt */
-	rc = rvu_nix_af_request_irq(rvu, nix_hw, base + NIX_AF_INT_VEC_AF_ERR,
-				    "NIX_AF_ERR_INT",
-				    rvu_nix_af_err_intr_handler);
-	if (!rc)
-		goto err;
-	rvu_write64(rvu, blkaddr, NIX_AF_ERR_INT_ENA_W1S, ~0ULL);
-
-	/* Register and enable NIX_AF_RAS interrupt */
-	rc = rvu_nix_af_request_irq(rvu, nix_hw, base + NIX_AF_INT_VEC_POISON,
-				    "NIX_AF_RAS",
-				    rvu_nix_af_ras_intr_handler);
-	if (!rc)
-		goto err;
-	rvu_write64(rvu, blkaddr, NIX_AF_RAS_ENA_W1S, ~0ULL);
-
-	return 0;
-err:
-	rvu_nix_unregister_interrupts(rvu);
-	return -1;
-}
-
-int rvu_nix_register_interrupts(struct rvu *rvu)
-{
-	struct nix_hw *nix_hw;
-	int blkaddr = 0;
-
-	blkaddr = rvu_get_next_nix_blkaddr(rvu, blkaddr);
-	while (blkaddr) {
-		nix_hw = get_nix_hw(rvu->hw, blkaddr);
-		if (nix_hw)
-			rvu_nix_blk_register_interrupts(rvu, nix_hw);
-		blkaddr = rvu_get_next_nix_blkaddr(rvu, blkaddr);
-	}
-
-	return 0;
-}
-
-static void rvu_nix_blk_unregister_interrupts(struct rvu *rvu,
-					      struct nix_hw *nix_hw)
-{
-	int blkaddr, offs, i;
-
-	blkaddr = nix_hw->blkaddr;
-
-	offs = rvu_read64(rvu, blkaddr, NIX_PRIV_AF_INT_CFG) & 0x3ff;
-	if (!offs)
-		return;
-
-	rvu_write64(rvu, blkaddr, NIX_AF_RVU_INT_ENA_W1C, ~0ULL);
-	rvu_write64(rvu, blkaddr, NIX_AF_ERR_INT_ENA_W1C, ~0ULL);
-	rvu_write64(rvu, blkaddr, NIX_AF_RAS_ENA_W1C, ~0ULL);
-
-	if (rvu->irq_allocated[offs + NIX_AF_INT_VEC_RVU]) {
-		free_irq(pci_irq_vector(rvu->pdev, offs + NIX_AF_INT_VEC_RVU),
-			 nix_hw);
-		rvu->irq_allocated[offs + NIX_AF_INT_VEC_RVU] = false;
-	}
-
-	for (i = NIX_AF_INT_VEC_AF_ERR; i < NIX_AF_INT_VEC_CNT; i++)
-		if (rvu->irq_allocated[offs + i]) {
-			free_irq(pci_irq_vector(rvu->pdev, offs + i), nix_hw);
-			rvu->irq_allocated[offs + i] = false;
-		}
-}
-
-void rvu_nix_unregister_interrupts(struct rvu *rvu)
-{
-	struct nix_hw *nix_hw;
-	int blkaddr = 0;
-
-	blkaddr = rvu_get_next_nix_blkaddr(rvu, blkaddr);
-	while (blkaddr) {
-		nix_hw = get_nix_hw(rvu->hw, blkaddr);
-		if (!nix_hw)
-			continue;
-		rvu_nix_blk_unregister_interrupts(rvu, nix_hw);
-		blkaddr = rvu_get_next_nix_blkaddr(rvu, blkaddr);
-	}
-}
-
 int rvu_mbox_handler_nix_inline_ipsec_cfg(struct rvu *rvu,
 					  struct nix_inline_ipsec_cfg *req,
 					  struct msg_rsp *rsp)
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h
index df661885cf46..43fa57b44eaa 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h
@@ -78,16 +78,6 @@ enum npa_af_int_vec_e {
 	NPA_AF_INT_VEC_CNT	= 0x5,
 };
 
-/* NIX Admin function Interrupt Vector Enumeration */
-enum nix_af_int_vec_e {
-	NIX_AF_INT_VEC_RVU	= 0x0,
-	NIX_AF_INT_VEC_GEN	= 0x1,
-	NIX_AF_INT_VEC_AQ_DONE	= 0x2,
-	NIX_AF_INT_VEC_AF_ERR	= 0x3,
-	NIX_AF_INT_VEC_POISON	= 0x4,
-	NIX_AF_INT_VEC_CNT	= 0x5,
-};
-
 /* SSO Admin function Interrupt Vector Enumeration */
 enum sso_af_int_vec_e {
 	SSO_AF_INT_VEC_ERR0 = 0x0,
-- 
2.31.1

