From 2c318d352b86584ab01de5ad9724c3d6f37675ce Mon Sep 17 00:00:00 2001
From: Maruthi Srinivas Bayyavarapu <maruthi.srinivas.bayyavarapu@xilinx.com>
Date: Thu, 28 Feb 2019 05:46:21 -0800
Subject: [PATCH 0525/1851] ASoC: xlnx: move mm2s/s2mm configuration to
 functions

commit 6ea1071de7056a06bde750e11ee2c21f2bd8488f from
https://github.com/Xilinx/linux-xlnx.git

Configuration of MM2S and S2MM is moved to respective functions.
Used 'dev' instead of &pdev->dev.

Signed-off-by: Maruthi Srinivas Bayyavarapu <maruthi.srinivas.bayyavarapu@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 sound/soc/xilinx/xlnx_formatter_pcm.c | 185 ++++++++++++++------------
 1 file changed, 102 insertions(+), 83 deletions(-)

diff --git a/sound/soc/xilinx/xlnx_formatter_pcm.c b/sound/soc/xilinx/xlnx_formatter_pcm.c
index b4a9fa1bf1ba..6b17d2854573 100644
--- a/sound/soc/xilinx/xlnx_formatter_pcm.c
+++ b/sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -583,6 +583,90 @@ static struct snd_soc_component_driver xlnx_asoc_component = {
 	.pcm_new = xlnx_formatter_pcm_new,
 };
 
+static int configure_mm2s(struct xlnx_pcm_drv_data *aud_drv_data,
+			  struct platform_device *pdev)
+{
+	int ret;
+	struct device *dev = &pdev->dev;
+
+	aud_drv_data->mm2s_irq = platform_get_irq_byname(pdev,
+							 "irq_mm2s");
+	if (aud_drv_data->mm2s_irq < 0)
+		return aud_drv_data->mm2s_irq;
+	ret = devm_request_irq(dev, aud_drv_data->mm2s_irq,
+			       xlnx_mm2s_irq_handler, 0,
+			       "xlnx_formatter_pcm_mm2s_irq",
+			       dev);
+	if (ret) {
+		dev_err(dev, "xlnx audio mm2s irq request failed\n");
+		return ret;
+	}
+	ret = xlnx_formatter_pcm_reset(aud_drv_data->mmio +
+				       XLNX_MM2S_OFFSET);
+	if (ret) {
+		dev_err(dev, "audio formatter reset failed\n");
+		return ret;
+	}
+	xlnx_formatter_disable_irqs(aud_drv_data->mmio +
+				    XLNX_MM2S_OFFSET,
+				    SNDRV_PCM_STREAM_PLAYBACK);
+
+	aud_drv_data->nodes[XLNX_PLAYBACK] =
+		of_parse_phandle(dev->of_node, "xlnx,tx", 0);
+	if (!aud_drv_data->nodes[XLNX_PLAYBACK])
+		dev_err(dev, "tx node not found\n");
+	else
+		dev_info(dev,
+			 "sound card device will use DAI link: %s\n",
+			 (aud_drv_data->nodes[XLNX_PLAYBACK])->name);
+	of_node_put(aud_drv_data->nodes[XLNX_PLAYBACK]);
+
+	aud_drv_data->mm2s_presence = true;
+	return 0;
+}
+
+static int configure_s2mm(struct xlnx_pcm_drv_data *aud_drv_data,
+			  struct platform_device *pdev)
+{
+	int ret;
+	struct device *dev = &pdev->dev;
+
+	aud_drv_data->s2mm_irq = platform_get_irq_byname(pdev,
+							 "irq_s2mm");
+	if (aud_drv_data->s2mm_irq < 0)
+		return aud_drv_data->s2mm_irq;
+	ret = devm_request_irq(dev, aud_drv_data->s2mm_irq,
+			       xlnx_s2mm_irq_handler, 0,
+			       "xlnx_formatter_pcm_s2mm_irq",
+			       dev);
+	if (ret) {
+		dev_err(dev, "xlnx audio s2mm irq request failed\n");
+		return ret;
+	}
+	ret = xlnx_formatter_pcm_reset(aud_drv_data->mmio +
+				       XLNX_S2MM_OFFSET);
+	if (ret) {
+		dev_err(dev, "audio formatter reset failed\n");
+		return ret;
+	}
+	xlnx_formatter_disable_irqs(aud_drv_data->mmio +
+				    XLNX_S2MM_OFFSET,
+				    SNDRV_PCM_STREAM_CAPTURE);
+
+	aud_drv_data->nodes[XLNX_CAPTURE] =
+		of_parse_phandle(dev->of_node, "xlnx,rx", 0);
+	if (!aud_drv_data->nodes[XLNX_CAPTURE])
+		dev_err(dev, "rx node not found\n");
+	else
+		dev_info(dev,
+			 "sound card device will use DAI link: %s\n",
+			 (aud_drv_data->nodes[XLNX_CAPTURE])->name);
+	of_node_put(aud_drv_data->nodes[XLNX_CAPTURE]);
+
+	aud_drv_data->s2mm_presence = true;
+	return 0;
+}
+
 static int xlnx_formatter_pcm_probe(struct platform_device *pdev)
 {
 	int ret;
@@ -592,118 +676,54 @@ static int xlnx_formatter_pcm_probe(struct platform_device *pdev)
 	struct resource *res;
 	struct device *dev = &pdev->dev;
 
-	aud_drv_data = devm_kzalloc(&pdev->dev,
-				    sizeof(*aud_drv_data), GFP_KERNEL);
+	aud_drv_data = devm_kzalloc(dev, sizeof(*aud_drv_data), GFP_KERNEL);
 	if (!aud_drv_data)
 		return -ENOMEM;
 
-	aud_drv_data->axi_clk = devm_clk_get(&pdev->dev, "s_axi_lite_aclk");
+	aud_drv_data->axi_clk = devm_clk_get(dev, "s_axi_lite_aclk");
 	if (IS_ERR(aud_drv_data->axi_clk)) {
 		ret = PTR_ERR(aud_drv_data->axi_clk);
-		dev_err(&pdev->dev, "failed to get s_axi_lite_aclk(%d)\n", ret);
+		dev_err(dev, "failed to get s_axi_lite_aclk(%d)\n", ret);
 		return ret;
 	}
 	ret = clk_prepare_enable(aud_drv_data->axi_clk);
 	if (ret) {
-		dev_err(&pdev->dev,
-			"failed to enable s_axi_lite_aclk(%d)\n", ret);
+		dev_err(dev, "failed to enable s_axi_lite_aclk(%d)\n", ret);
 		return ret;
 	}
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!res) {
-		dev_err(&pdev->dev,
-			"audio formatter node:addr to resource failed\n");
+		dev_err(dev, "audio formatter node:addr to resource failed\n");
 		ret = -ENXIO;
 		goto clk_err;
 	}
-	aud_drv_data->mmio = devm_ioremap_resource(&pdev->dev, res);
+	aud_drv_data->mmio = devm_ioremap_resource(dev, res);
 	if (IS_ERR(aud_drv_data->mmio)) {
-		dev_err(&pdev->dev, "audio formatter ioremap failed\n");
+		dev_err(dev, "audio formatter ioremap failed\n");
 		ret = PTR_ERR(aud_drv_data->mmio);
 		goto clk_err;
 	}
 
 	val = readl(aud_drv_data->mmio + XLNX_AUD_CORE_CONFIG);
 	if (val & AUD_CFG_MM2S_MASK) {
-		aud_drv_data->mm2s_presence = true;
-		aud_drv_data->mm2s_irq = platform_get_irq_byname(pdev,
-								 "irq_mm2s");
-		if (aud_drv_data->mm2s_irq < 0) {
-			ret = aud_drv_data->mm2s_irq;
+		ret = configure_mm2s(aud_drv_data, pdev);
+		if (ret)
 			goto clk_err;
-		}
-		ret = devm_request_irq(&pdev->dev, aud_drv_data->mm2s_irq,
-				       xlnx_mm2s_irq_handler, 0,
-				       "xlnx_formatter_pcm_mm2s_irq",
-				       &pdev->dev);
-		if (ret) {
-			dev_err(&pdev->dev, "xlnx audio mm2s irq request failed\n");
-			goto clk_err;
-		}
-		ret = xlnx_formatter_pcm_reset(aud_drv_data->mmio +
-					       XLNX_MM2S_OFFSET);
-		if (ret) {
-			dev_err(&pdev->dev, "audio formatter reset failed\n");
-			goto clk_err;
-		}
-		xlnx_formatter_disable_irqs(aud_drv_data->mmio +
-					    XLNX_MM2S_OFFSET,
-					    SNDRV_PCM_STREAM_PLAYBACK);
-
-		aud_drv_data->nodes[XLNX_PLAYBACK] =
-			of_parse_phandle(dev->of_node, "xlnx,tx", 0);
-		if (!aud_drv_data->nodes[XLNX_PLAYBACK])
-			dev_err(&pdev->dev, "tx node not found\n");
-		else
-			dev_info(&pdev->dev,
-				 "sound card device will use DAI link: %s\n",
-				 (aud_drv_data->nodes[XLNX_PLAYBACK])->name);
-		of_node_put(aud_drv_data->nodes[XLNX_PLAYBACK]);
 	}
+
 	if (val & AUD_CFG_S2MM_MASK) {
-		aud_drv_data->s2mm_presence = true;
-		aud_drv_data->s2mm_irq = platform_get_irq_byname(pdev,
-								 "irq_s2mm");
-		if (aud_drv_data->s2mm_irq < 0) {
-			ret = aud_drv_data->s2mm_irq;
-			goto clk_err;
-		}
-		ret = devm_request_irq(&pdev->dev, aud_drv_data->s2mm_irq,
-				       xlnx_s2mm_irq_handler, 0,
-				       "xlnx_formatter_pcm_s2mm_irq",
-				       &pdev->dev);
-		if (ret) {
-			dev_err(&pdev->dev, "xlnx audio s2mm irq request failed\n");
-			goto clk_err;
-		}
-		ret = xlnx_formatter_pcm_reset(aud_drv_data->mmio +
-					       XLNX_S2MM_OFFSET);
-		if (ret) {
-			dev_err(&pdev->dev, "audio formatter reset failed\n");
+		ret = configure_s2mm(aud_drv_data, pdev);
+		if (ret)
 			goto clk_err;
-		}
-		xlnx_formatter_disable_irqs(aud_drv_data->mmio +
-					    XLNX_S2MM_OFFSET,
-					    SNDRV_PCM_STREAM_CAPTURE);
-
-		aud_drv_data->nodes[XLNX_CAPTURE] =
-			of_parse_phandle(dev->of_node, "xlnx,rx", 0);
-		if (!aud_drv_data->nodes[XLNX_CAPTURE])
-			dev_err(&pdev->dev, "rx node not found\n");
-		else
-			dev_info(&pdev->dev,
-				 "sound card device will use DAI link: %s\n",
-				 (aud_drv_data->nodes[XLNX_CAPTURE])->name);
-		of_node_put(aud_drv_data->nodes[XLNX_CAPTURE]);
 	}
 
-	dev_set_drvdata(&pdev->dev, aud_drv_data);
+	dev_set_drvdata(dev, aud_drv_data);
 
-	ret = devm_snd_soc_register_component(&pdev->dev, &xlnx_asoc_component,
+	ret = devm_snd_soc_register_component(dev, &xlnx_asoc_component,
 					      NULL, 0);
 	if (ret) {
-		dev_err(&pdev->dev, "pcm platform device register failed\n");
+		dev_err(dev, "pcm platform device register failed\n");
 		goto clk_err;
 	}
 
@@ -711,16 +731,15 @@ static int xlnx_formatter_pcm_probe(struct platform_device *pdev)
 	if (aud_drv_data->nodes[XLNX_PLAYBACK] ||
 	    aud_drv_data->nodes[XLNX_CAPTURE])
 		aud_drv_data->pdev =
-			platform_device_register_resndata(&pdev->dev,
-							  "xlnx_snd_card",
+			platform_device_register_resndata(dev, "xlnx_snd_card",
 							  PLATFORM_DEVID_AUTO,
 							  NULL, 0,
 							  &aud_drv_data->nodes,
 							  pdata_size);
 	if (!aud_drv_data->pdev)
-		dev_err(&pdev->dev, "sound card device creation failed\n");
+		dev_err(dev, "sound card device creation failed\n");
 
-	dev_info(&pdev->dev, "pcm platform device registered\n");
+	dev_info(dev, "pcm platform device registered\n");
 	return 0;
 
 clk_err:
-- 
2.31.1

