From 82a6648e3f8b46791dacc38c5d2af28f64e55db8 Mon Sep 17 00:00:00 2001
From: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date: Wed, 3 Apr 2019 13:01:44 -0700
Subject: [PATCH 0595/1852] v4l: xilinx: scd: Merge the V4L2 support in the
 main SCD driver

commit 5dd5ec9a4ad5b43fc8625edac6e030efc31b5555 from
https://github.com/Xilinx/linux-xlnx.git

There's no need to create a separate platform_driver and platform_device
for the V4L2 support. Call the xilinx-scenechange-channel initialization
function directly from the main driver. This allows removing duplicating
fields, as well as unneeded code.

Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Signed-off-by: Satish Kumar Nagireddy <satish.nagireddy.nagireddy@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 .../xilinx/xilinx-scenechange-channel.c       | 100 +++++++-----------
 .../platform/xilinx/xilinx-scenechange.c      |  92 +++++-----------
 .../platform/xilinx/xilinx-scenechange.h      |  13 ++-
 3 files changed, 70 insertions(+), 135 deletions(-)

diff --git a/drivers/media/platform/xilinx/xilinx-scenechange-channel.c b/drivers/media/platform/xilinx/xilinx-scenechange-channel.c
index d40060ab5321..9f2100eff0a6 100644
--- a/drivers/media/platform/xilinx/xilinx-scenechange-channel.c
+++ b/drivers/media/platform/xilinx/xilinx-scenechange-channel.c
@@ -157,12 +157,10 @@ static int xscd_chan_get_vid_fmt(u32 media_bus_fmt, bool memory_based)
 /**
  * xscd_chan_configure_params - Program parameters to HW registers
  * @chan: Driver specific channel struct pointer
- * @shared_data: Shared data
  * @chan_offset: Register offset for a channel
  */
-void xscd_chan_configure_params(struct xscd_chan *chan,
-				struct xscd_shared_data *shared_data,
-				u32 chan_offset)
+static void xscd_chan_configure_params(struct xscd_chan *chan,
+				       u32 chan_offset)
 {
 	u32 vid_fmt, stride;
 
@@ -170,7 +168,7 @@ void xscd_chan_configure_params(struct xscd_chan *chan,
 		   chan->format.width);
 
 	/* Stride is required only for memory based IP, not for streaming IP */
-	if (shared_data->memory_based) {
+	if (chan->xscd->shared_data.memory_based) {
 		stride = roundup(chan->format.width, XSCD_BYTE_ALIGN);
 		xscd_write(chan->iomem, XSCD_STRIDE_OFFSET + chan_offset,
 			   stride);
@@ -181,7 +179,7 @@ void xscd_chan_configure_params(struct xscd_chan *chan,
 
 	/* Hardware video format */
 	vid_fmt = xscd_chan_get_vid_fmt(chan->format.code,
-					shared_data->memory_based);
+					chan->xscd->shared_data.memory_based);
 	xscd_write(chan->iomem, XSCD_VID_FMT_OFFSET + chan_offset, vid_fmt);
 
 	/*
@@ -204,14 +202,14 @@ static int xscd_s_stream(struct v4l2_subdev *subdev, int enable)
 	u32 chan_offset;
 
 	/* TODO: Re-organise shared data in a better way */
-	shared_data = (struct xscd_shared_data *)chan->dev->parent->driver_data;
+	shared_data = &chan->xscd->shared_data;
 	chan->dmachan.en = enable;
 
 	spin_lock_irqsave(&chan->dmachan.lock, flags);
 
 	if (shared_data->memory_based) {
 		chan_offset = chan->id * XSCD_CHAN_OFFSET;
-		xscd_chan_configure_params(chan, shared_data, chan_offset);
+		xscd_chan_configure_params(chan, chan_offset);
 		if (enable) {
 			if (!shared_data->active_streams) {
 				chan->dmachan.valid_interrupt = true;
@@ -230,7 +228,7 @@ static int xscd_s_stream(struct v4l2_subdev *subdev, int enable)
 	} else {
 		/* Streaming based */
 		if (enable) {
-			xscd_chan_configure_params(chan, shared_data, chan->id);
+			xscd_chan_configure_params(chan, chan->id);
 			xscd_dma_reset(&chan->dmachan);
 			xscd_dma_chan_enable(&chan->dmachan, BIT(chan->id));
 			xscd_dma_start(&chan->dmachan);
@@ -350,7 +348,7 @@ static irqreturn_t xscd_chan_irq_handler(int irq, void *data)
 	struct xscd_chan *chan = (struct xscd_chan *)data;
 	struct xscd_shared_data *shared_data;
 
-	shared_data = (struct xscd_shared_data *)chan->dev->parent->driver_data;
+	shared_data = &chan->xscd->shared_data;
 	spin_lock(&chan->dmachan.lock);
 
 	if ((shared_data->memory_based && chan->dmachan.valid_interrupt) ||
@@ -366,25 +364,25 @@ static irqreturn_t xscd_chan_irq_handler(int irq, void *data)
 
 static int xscd_chan_parse_of(struct xscd_chan *chan)
 {
-	struct device_node *parent_node;
 	struct xscd_shared_data *shared_data;
 	int err;
 
-	parent_node = chan->dev->parent->of_node;
-	shared_data = (struct xscd_shared_data *)chan->dev->parent->driver_data;
+	shared_data = &chan->xscd->shared_data;
 	shared_data->dma_chan_list[chan->id] = &chan->dmachan;
 	chan->iomem = shared_data->iomem;
 
-	chan->irq = irq_of_parse_and_map(parent_node, 0);
+	chan->irq = irq_of_parse_and_map(chan->xscd->dev->of_node, 0);
 	if (!chan->irq) {
-		dev_err(chan->dev, "No valid irq found\n");
+		dev_err(chan->xscd->dev, "No valid irq found\n");
 		return -EINVAL;
 	}
 
-	err = devm_request_irq(chan->dev, chan->irq, xscd_chan_irq_handler,
-			       IRQF_SHARED, dev_name(chan->dev), chan);
+	err = devm_request_irq(chan->xscd->dev, chan->irq,
+			       xscd_chan_irq_handler, IRQF_SHARED,
+			       dev_name(chan->xscd->dev), chan);
 	if (err) {
-		dev_err(chan->dev, "unable to request IRQ %d\n", chan->irq);
+		dev_err(chan->xscd->dev, "unable to request IRQ %d\n",
+			chan->irq);
 		return err;
 	}
 
@@ -395,27 +393,30 @@ static int xscd_chan_parse_of(struct xscd_chan *chan)
 }
 
 /**
- * xscd_chan_probe - Driver probe function
- * @pdev: Pointer to the device structure
+ * xscd_chan_init - Initialize the V4L2 subdev for a channel
+ * @xscd: Pointer to the SCD device structure
+ * @chan_id: Channel id
+ * @node: device node
  *
  * Return: '0' on success and failure value on error
  */
-static int xscd_chan_probe(struct platform_device *pdev)
+int xscd_chan_init(struct xscd_device *xscd, unsigned int chan_id,
+		   struct device_node *node)
 {
 	struct xscd_chan *chan;
 	struct v4l2_subdev *subdev;
-	struct xscd_shared_data *shared_data;
 	int ret;
 	u32 num_pads;
 
-	shared_data = (struct xscd_shared_data *)pdev->dev.parent->driver_data;
-	chan = devm_kzalloc(&pdev->dev, sizeof(*chan), GFP_KERNEL);
+	chan = devm_kzalloc(xscd->dev, sizeof(*chan), GFP_KERNEL);
 	if (!chan)
 		return -ENOMEM;
 
+	xscd->chans[chan_id] = chan;
+
 	mutex_init(&chan->lock);
-	chan->dev = &pdev->dev;
-	chan->id = pdev->id;
+	chan->xscd = xscd;
+	chan->id = chan_id;
 	ret = xscd_chan_parse_of(chan);
 	if (ret < 0)
 		return ret;
@@ -423,9 +424,11 @@ static int xscd_chan_probe(struct platform_device *pdev)
 	/* Initialize V4L2 subdevice and media entity */
 	subdev = &chan->subdev;
 	v4l2_subdev_init(subdev, &xscd_ops);
-	subdev->dev = &pdev->dev;
+	subdev->dev = chan->xscd->dev;
+	subdev->fwnode = of_fwnode_handle(node);
 	subdev->internal_ops = &xscd_internal_ops;
-	strlcpy(subdev->name, dev_name(&pdev->dev), sizeof(subdev->name));
+	snprintf(subdev->name, sizeof(subdev->name), "xlnx-scdchan.%u",
+		 chan_id);
 	v4l2_set_subdevdata(subdev, chan);
 	subdev->flags |= V4L2_SUBDEV_FL_HAS_DEVNODE | V4L2_SUBDEV_FL_HAS_EVENTS;
 
@@ -436,15 +439,15 @@ static int xscd_chan_probe(struct platform_device *pdev)
 	chan->format.height = XSCD_MAX_HEIGHT;
 
 	/* Initialize media pads */
-	num_pads = shared_data->memory_based ? 1 : 2;
-	chan->pad = devm_kzalloc(&pdev->dev,
+	num_pads = xscd->shared_data.memory_based ? 1 : 2;
+	chan->pad = devm_kzalloc(chan->xscd->dev,
 				 sizeof(struct media_pad) * num_pads,
 				 GFP_KERNEL);
 	if (!chan->pad)
 		return -ENOMEM;
 
 	chan->pad[XVIP_PAD_SINK].flags = MEDIA_PAD_FL_SINK;
-	if (!shared_data->memory_based)
+	if (!xscd->shared_data.memory_based)
 		chan->pad[XVIP_PAD_SOURCE].flags = MEDIA_PAD_FL_SOURCE;
 
 	ret = media_entity_pads_init(&subdev->entity, num_pads, chan->pad);
@@ -454,45 +457,14 @@ static int xscd_chan_probe(struct platform_device *pdev)
 	subdev->entity.ops = &xscd_media_ops;
 	ret = v4l2_async_register_subdev(subdev);
 	if (ret < 0) {
-		dev_err(&pdev->dev, "failed to register subdev\n");
+		dev_err(chan->xscd->dev, "failed to register subdev\n");
 		goto error;
 	}
 
-	dev_info(chan->dev, "Scene change detection channel found!\n");
+	dev_info(chan->xscd->dev, "Scene change detection channel found!\n");
 	return 0;
 
 error:
 	media_entity_cleanup(&subdev->entity);
 	return ret;
 }
-
-static int xscd_chan_remove(struct platform_device *pdev)
-{
-	return 0;
-}
-
-static struct platform_driver xscd_chan_driver = {
-	.probe		= xscd_chan_probe,
-	.remove		= xscd_chan_remove,
-	.driver		= {
-		.name	= "xlnx-scdchan",
-	},
-};
-
-static int __init xscd_chan_init(void)
-{
-	platform_driver_register(&xscd_chan_driver);
-	return 0;
-}
-
-static void __exit xscd_chan_exit(void)
-{
-	platform_driver_unregister(&xscd_chan_driver);
-}
-
-module_init(xscd_chan_init);
-module_exit(xscd_chan_exit);
-
-MODULE_AUTHOR("Xilinx Inc.");
-MODULE_DESCRIPTION("Xilinx Scene Change Detection");
-MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/platform/xilinx/xilinx-scenechange.c b/drivers/media/platform/xilinx/xilinx-scenechange.c
index 5f8b7acad591..3d0f2b71279e 100644
--- a/drivers/media/platform/xilinx/xilinx-scenechange.c
+++ b/drivers/media/platform/xilinx/xilinx-scenechange.c
@@ -26,36 +26,6 @@ static irqreturn_t xscd_irq_handler(int irq, void *data)
 	return IRQ_HANDLED;
 }
 
-static struct platform_device *xscd_chan_alloc(struct platform_device *pdev,
-					       struct device_node *subdev,
-					       int id)
-{
-	struct platform_device *xscd_chan_pdev;
-	int ret;
-
-	xscd_chan_pdev = platform_device_alloc("xlnx-scdchan", id);
-	if (!xscd_chan_pdev)
-		return ERR_PTR(-ENOMEM);
-
-	xscd_chan_pdev->dev.parent = &pdev->dev;
-	xscd_chan_pdev->dev.of_node = subdev;
-
-	ret = platform_device_add(xscd_chan_pdev);
-	if (ret)
-		goto error;
-
-	return xscd_chan_pdev;
-
-error:
-	platform_device_unregister(xscd_chan_pdev);
-	return ERR_PTR(ret);
-}
-
-static void xscd_chan_remove(struct platform_device *dev)
-{
-	platform_device_unregister(dev);
-}
-
 static
 struct platform_device *xilinx_scdma_device_init(struct platform_device *pdev,
 						 struct device_node *node)
@@ -123,6 +93,11 @@ static int xscd_parse_of(struct xscd_device *xscd)
 	if (ret < 0)
 		return ret;
 
+	if (!xscd->shared_data.memory_based && xscd->numstreams != 1) {
+		dev_err(dev, "Stream-based mode only supports one stream\n");
+		return -EINVAL;
+	}
+
 	xscd->irq = irq_of_parse_and_map(node, 0);
 	if (!xscd->irq) {
 		dev_err(xscd->dev, "No valid irq found\n");
@@ -138,17 +113,15 @@ static int xscd_parse_of(struct xscd_device *xscd)
 static int xscd_probe(struct platform_device *pdev)
 {
 	struct xscd_device *xscd;
+	struct device_node *subdev_node;
+	unsigned int id;
 	int ret;
-	u32 id = 0, i;
-	struct device_node *subdev_node, *node;
-	struct platform_device *subdev;
 
 	xscd = devm_kzalloc(&pdev->dev, sizeof(*xscd), GFP_KERNEL);
 	if (!xscd)
 		return -ENOMEM;
 
 	xscd->dev = &pdev->dev;
-	node = pdev->dev.of_node;
 
 	ret = xscd_parse_of(xscd);
 	if (ret < 0)
@@ -164,29 +137,25 @@ static int xscd_probe(struct platform_device *pdev)
 
 	xscd->shared_data.iomem = xscd->iomem;
 	platform_set_drvdata(pdev, (void *)&xscd->shared_data);
-	if (xscd->shared_data.memory_based) {
-		for_each_child_of_node(node, subdev_node) {
-			subdev = xscd_chan_alloc(pdev, subdev_node, id);
-			if (IS_ERR(subdev)) {
-				dev_err(&pdev->dev,
-					"Failed to initialize subdev@%d\n", id);
-				ret = PTR_ERR(subdev);
-				goto cleanup;
-			}
-			xscd->subdevs[id] = subdev;
-			id++;
+
+	id = 0;
+	for_each_child_of_node(xscd->dev->of_node, subdev_node) {
+		if (id >= xscd->numstreams) {
+			dev_warn(&pdev->dev,
+				 "Too many channels, limiting to %u\n",
+				 xscd->numstreams);
+			of_node_put(subdev_node);
+			break;
 		}
-	} else {
-		/* Streaming based */
-		subdev_node = of_get_next_child(node, NULL);
-		subdev = xscd_chan_alloc(pdev, subdev_node, id);
-		if (IS_ERR(subdev)) {
-			dev_err(&pdev->dev,
-				"Failed to initialize the subdev@%d\n", id);
-			ret = PTR_ERR(subdev);
-			goto cleanup;
+
+		ret = xscd_chan_init(xscd, id, subdev_node);
+		if (ret < 0) {
+			dev_err(&pdev->dev, "Failed to initialize channel %u\n",
+				id);
+			return ret;
 		}
-		xscd->subdevs[id] = subdev;
+
+		id++;
 	}
 
 	xscd->dma_device = xilinx_scdma_device_init(pdev, xscd->dma_node);
@@ -195,28 +164,17 @@ static int xscd_probe(struct platform_device *pdev)
 
 	dev_info(xscd->dev, "scene change detect device found!\n");
 	return 0;
-
-cleanup:
-	for (i = 0; i < xscd->numstreams; i++) {
-		if (xscd->subdevs[i])
-			xscd_chan_remove(xscd->subdevs[i]);
-	}
-
-	return ret;
 }
 
 static int xscd_remove(struct platform_device *pdev)
 {
 	struct xscd_device *xscd = platform_get_drvdata(pdev);
-	u32 i;
 
 	xilinx_scdma_device_exit(xscd->dma_device);
 	xscd->dma_node = NULL;
 
-	for (i = 0; i < xscd->numstreams; i++)
-		xscd_chan_remove(xscd->subdevs[i]);
-
 	clk_disable_unprepare(xscd->clk);
+
 	return 0;
 }
 
diff --git a/drivers/media/platform/xilinx/xilinx-scenechange.h b/drivers/media/platform/xilinx/xilinx-scenechange.h
index cd0cebce50e6..ded93b21f042 100644
--- a/drivers/media/platform/xilinx/xilinx-scenechange.h
+++ b/drivers/media/platform/xilinx/xilinx-scenechange.h
@@ -66,6 +66,8 @@
 
 /****************************** PROTOTYPES ************************************/
 
+struct xscd_device;
+
 /**
  * struct xscd_dma_desc - DMA channel
  * @luma_plane_addr: Luma plane buffer address
@@ -146,7 +148,7 @@ static inline struct xscd_dma_chan *to_xscd_dma_chan(struct dma_chan *chan)
  * @irq: device IRQ
  * @id: scene change channel ID
  * @iomem: device I/O register space remapped to kernel virtual memory
- * @dev: (OF) device
+ * @xscd: SCD device
  * @subdev: V4L2 subdevice
  * @pad: media pads
  * @format: active V4L2 media bus format for the pad
@@ -158,7 +160,7 @@ struct xscd_chan {
 	int irq;
 	int id;
 	void __iomem *iomem;
-	struct device *dev;
+	struct xscd_device *xscd;
 	struct v4l2_subdev subdev;
 	struct media_pad *pad;
 	struct v4l2_mbus_framefmt format;
@@ -217,7 +219,7 @@ struct xscd_shared_data {
  * @dma_device: DMA device pointer
  * @shared_data: Data Shared across devices
  * @dma_node: DMA device node
- * @subdevs: subdev device instance
+ * @chans: video stream instances
  */
 struct xscd_device {
 	void __iomem *iomem;
@@ -229,7 +231,7 @@ struct xscd_device {
 	struct platform_device *dma_device;
 	struct xscd_shared_data shared_data;
 	struct device_node *dma_node;
-	struct platform_device *subdevs[XSCD_MAX_CHANNELS];
+	struct xscd_chan *chans[XSCD_MAX_CHANNELS];
 };
 
 /*
@@ -260,4 +262,7 @@ void xscd_dma_start(struct xscd_dma_chan *chan);
 void xscd_dma_chan_enable(struct xscd_dma_chan *chan, int chan_en);
 void xscd_dma_reset(struct xscd_dma_chan *chan);
 void xscd_dma_halt(struct xscd_dma_chan *chan);
+
+int xscd_chan_init(struct xscd_device *xscd, unsigned int chan_id,
+		   struct device_node *node);
 #endif
-- 
2.31.1

