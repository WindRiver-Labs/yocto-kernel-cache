From b1ec64182cd6176801315f8bf16513592c8e5b09 Mon Sep 17 00:00:00 2001
From: Subrahmanyam Nilla <snilla@marvell.com>
Date: Tue, 29 Oct 2019 15:24:46 +0530
Subject: [PATCH 393/767] octeontx2-af: Add SDP interface support.

commit 4926267192697d0b61940b42dad702094091c1fe from
git@git.assembla.com:cavium/WindRiver.linux.git

Right now SDP interface support is limited to single
interface/channel and SDP PF(RVU PF) device, No VF support.

Change-Id: I4ecce3a42b4537ca34c864ef84bf785482966f81
Signed-off-by: Subrahmanyam Nilla <snilla@marvell.com>
Signed-off-by: Venkateshwarlu Nalla <venkatn@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/17982
Reviewed-by: Yan Markman <ymarkman@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/af/Makefile    |  2 +-
 .../ethernet/marvell/octeontx2/af/common.h    |  3 ++
 .../net/ethernet/marvell/octeontx2/af/rvu.c   |  4 ++
 .../net/ethernet/marvell/octeontx2/af/rvu.h   |  4 ++
 .../ethernet/marvell/octeontx2/af/rvu_nix.c   | 15 +++++-
 .../ethernet/marvell/octeontx2/af/rvu_sdp.c   | 51 +++++++++++++++++++
 .../marvell/octeontx2/af/rvu_validation.c     | 22 +++++++-
 7 files changed, 98 insertions(+), 3 deletions(-)
 create mode 100644 drivers/net/ethernet/marvell/octeontx2/af/rvu_sdp.c

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/Makefile b/drivers/net/ethernet/marvell/octeontx2/af/Makefile
index c39385c4855b..a64046727ede 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/Makefile
+++ b/drivers/net/ethernet/marvell/octeontx2/af/Makefile
@@ -10,4 +10,4 @@ octeontx2_mbox-y := mbox.o
 octeontx2_af-y := cgx.o rvu.o rvu_cgx.o rvu_npa.o rvu_nix.o \
 		  rvu_reg.o rvu_npc.o rvu_validation.o rvu_sso.o \
 		  rvu_tim.o rvu_cpt.o rvu_debugfs.o rvu_npc_fs.o \
-		  ptp.o rvu_ptp.o rvu_fixes.o
+		  ptp.o rvu_ptp.o rvu_fixes.o rvu_sdp.o
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index d537c1126834..4f8893ade710 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -176,12 +176,15 @@ enum nix_scheduler {
 
 #define NIX_INTF_TYPE_CGX		0
 #define NIX_INTF_TYPE_LBK		1
+#define NIX_INTF_TYPE_SDP		2
 
 #define MAX_LMAC_PKIND			12
 #define NIX_LINK_CGX_LMAC(a, b)		(0 + 4 * (a) + (b))
 #define NIX_LINK_LBK(a)			(12 + (a))
 #define NIX_CHAN_CGX_LMAC_CHX(a, b, c)	(0x800 + 0x100 * (a) + 0x10 * (b) + (c))
 #define NIX_CHAN_LBK_CHX(a, b)		(0 + 0x100 * (a) + (b))
+#define NIX_CHAN_SDP_CH_START          (0x700ull)
+#define NIX_CHAN_SDP_CHX(a)            (NIX_CHAN_SDP_CH_START + (a))
 
 /* NIX LSO format indices.
  * As of now TSO is the only one using, so statically assigning indices.
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
index e88b5253f2d1..3868898757f6 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
@@ -967,6 +967,10 @@ static int rvu_setup_hw_resources(struct rvu *rvu)
 	if (err)
 		goto cgx_err;
 
+	err = rvu_sdp_init(rvu);
+	if (err)
+		goto cgx_err;
+
 	return 0;
 
 cgx_err:
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
index 0d6e6cd3e678..5e90047b9a62 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
@@ -663,6 +663,10 @@ void rvu_cpt_unregister_interrupts(struct rvu *rvu);
 int rvu_tim_init(struct rvu *rvu);
 int rvu_tim_lf_teardown(struct rvu *rvu, u16 pcifunc, int lf, int slot);
 
+/* SDP APIs */
+int rvu_sdp_init(struct rvu *rvu);
+bool is_sdp_pf(u16 pcifunc);
+
 /* CONFIG_DEBUG_FS*/
 #ifdef CONFIG_DEBUG_FS
 void rvu_dbg_init(struct rvu *rvu);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
index 89295188f4a9..52a590982ffd 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
@@ -181,7 +181,8 @@ static int nix_interface_init(struct rvu *rvu, u16 pcifunc, int type, int nixlf)
 	int err;
 
 	pf = rvu_get_pf(pcifunc);
-	if (!is_pf_cgxmapped(rvu, pf) && type != NIX_INTF_TYPE_LBK)
+	if (!is_pf_cgxmapped(rvu, pf) && type != NIX_INTF_TYPE_LBK &&
+	    type != NIX_INTF_TYPE_SDP)
 		return 0;
 
 	switch (type) {
@@ -222,6 +223,15 @@ static int nix_interface_init(struct rvu *rvu, u16 pcifunc, int type, int nixlf)
 		rvu_npc_install_promisc_entry(rvu, pcifunc, nixlf,
 					      pfvf->rx_chan_base, false);
 		break;
+	case NIX_INTF_TYPE_SDP:
+		/* Added single interface and single channel support for now */
+		pfvf->rx_chan_base = NIX_CHAN_SDP_CHX(0);
+		pfvf->tx_chan_base = pfvf->rx_chan_base;
+		pfvf->rx_chan_cnt = 1;
+		pfvf->tx_chan_cnt = 1;
+		rvu_npc_install_promisc_entry(rvu, pcifunc, nixlf,
+					      pfvf->rx_chan_base, false);
+		break;
 	}
 
 	/* Add a UCAST forwarding rule in MCAM with this NIXLF attached
@@ -1128,6 +1138,9 @@ int rvu_mbox_handler_nix_lf_alloc(struct rvu *rvu,
 	rvu_write64(rvu, blkaddr, NIX_AF_LFX_TX_PARSE_CFG(nixlf), cfg);
 
 	intf = is_afvf(pcifunc) ? NIX_INTF_TYPE_LBK : NIX_INTF_TYPE_CGX;
+	if (is_sdp_pf(pcifunc))
+		intf = NIX_INTF_TYPE_SDP;
+
 	err = nix_interface_init(rvu, pcifunc, intf, nixlf);
 	if (err)
 		goto free_mem;
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_sdp.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_sdp.c
new file mode 100644
index 000000000000..071e69d7da15
--- /dev/null
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_sdp.c
@@ -0,0 +1,51 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Marvell OcteonTx2 RVU Admin Function driver
+ *
+ * Copyright (C) 2019 Marvell International Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/pci.h>
+#include "rvu.h"
+
+/* SDP PF device id */
+#define PCI_DEVID_OTX2_SDP_PF   0xA0F6
+
+/* SDP PF number */
+static int sdp_pf_num = -1;
+
+bool is_sdp_pf(u16 pcifunc)
+{
+	if (rvu_get_pf(pcifunc) != sdp_pf_num)
+		return false;
+	if (pcifunc & RVU_PFVF_FUNC_MASK)
+		return false;
+
+	return true;
+}
+
+int rvu_sdp_init(struct rvu *rvu)
+{
+	struct pci_dev *pdev;
+	int i;
+
+	for (i = 0; i < rvu->hw->total_pfs; i++) {
+		pdev = pci_get_domain_bus_and_slot(
+				pci_domain_nr(rvu->pdev->bus), i + 1, 0);
+		if (!pdev)
+			continue;
+
+		if (pdev->device == PCI_DEVID_OTX2_SDP_PF) {
+			sdp_pf_num = i;
+			put_device(&pdev->dev);
+			break;
+		}
+
+		put_device(&pdev->dev);
+	}
+
+	return 0;
+}
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c
index ed66a93e33bc..33a7821456d1 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c
@@ -16,6 +16,7 @@
 #define	PCI_DEVID_OCTEONTX2_SSO_RVU_PF	0xA0F9
 #define	PCI_DEVID_OCTEONTX2_NPA_RVU_PF	0xA0FB
 #define	PCI_DEVID_OCTEONTX2_CPT_RVU_PF	0xA0FD
+#define	PCI_DEVID_OCTEONTX2_SDP_RVU_PF	0xA0F6
 
 static u64 quotas_get_sum(struct rvu_quotas *quotas)
 {
@@ -463,7 +464,8 @@ static void rvu_set_default_limits(struct rvu *rvu)
 		if (rvu->pf[i].pdev->device == PCI_DEVID_OCTEONTX2_SSO_RVU_PF)
 			sso_rvus++;
 		if (rvu->pf[i].pdev->device == PCI_DEVID_OCTEONTX2_RVU_PF ||
-		    rvu->pf[i].pdev->device == PCI_DEVID_OCTEONTX2_RVU_AF)
+		    rvu->pf[i].pdev->device == PCI_DEVID_OCTEONTX2_RVU_AF ||
+		    rvu->pf[i].pdev->device == PCI_DEVID_OCTEONTX2_SDP_RVU_PF)
 			nix_rvus++;
 	}
 
@@ -530,6 +532,24 @@ static void rvu_set_default_limits(struct rvu *rvu)
 			rvu->pf_limits.cpt->a[i].val = num_online_cpus();
 			rvu->pf_limits.npa->a[i].val = 1;
 			break;
+		case PCI_DEVID_OCTEONTX2_SDP_RVU_PF:
+			rvu->pf_limits.nix->a[i].val = 1 + totalvfs;
+			rvu->pf_limits.npa->a[i].val = 1 + totalvfs;
+			if (rvu->hw->cap.nix_fixed_txschq_mapping)
+				break;
+			rvu->pf_limits.smq->a[i].val =
+				nix_hw->txsch[NIX_TXSCH_LVL_SMQ].schq.max /
+				nix_rvus;
+			rvu->pf_limits.tl4->a[i].val =
+				nix_hw->txsch[NIX_TXSCH_LVL_TL4].schq.max /
+				nix_rvus;
+			rvu->pf_limits.tl3->a[i].val =
+				nix_hw->txsch[NIX_TXSCH_LVL_TL3].schq.max /
+				nix_rvus;
+			rvu->pf_limits.tl2->a[i].val =
+				nix_hw->txsch[NIX_TXSCH_LVL_TL2].schq.max /
+				nix_rvus;
+			break;
 		}
 	}
 }
-- 
2.31.1

