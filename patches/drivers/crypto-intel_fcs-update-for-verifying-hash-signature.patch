From 780bbae0d82407b6fe0fb4f10e170d884ecc97c0 Mon Sep 17 00:00:00 2001
From: Richard Gong <richard.gong@intel.com>
Date: Tue, 6 Jul 2021 10:08:30 -0500
Subject: [PATCH 24/42] crypto: intel_fcs: update for verifying hash signature

commit e03458b0f216ea45d34bb2079b5c787eb87d676a from
https://github.com/altera-opensource/linux-socfpga/commits/socfpga-5.4.124-lts

Update to support verifying hash signature.

Signed-off-by: Richard Gong <richard.gong@intel.com>
Signed-off-by: Siew Chin Lim <elly.siew.chin.lim@intel.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/crypto/intel_fcs.c           | 83 ++++++++++++++++++++++++++++
 include/uapi/linux/intel_fcs-ioctl.h |  5 ++
 2 files changed, 88 insertions(+)

diff --git a/drivers/crypto/intel_fcs.c b/drivers/crypto/intel_fcs.c
index f3f7215cabb4..a3495ad7374b 100644
--- a/drivers/crypto/intel_fcs.c
+++ b/drivers/crypto/intel_fcs.c
@@ -1818,6 +1818,89 @@ static long fcs_ioctl(struct file *file, unsigned int cmd,
 		 fcs_close_services(priv, s_buf, d_buf);
 		 break;
 
+	case INTEL_FCS_DEV_CRYPTO_ECDSA_HASH_VERIFY:
+		 if (copy_from_user(data, (void __user *)arg, sizeof(*data))) {
+			 dev_err(dev, "failure on copy_from_user\n");
+			 return -EFAULT;
+		 }
+
+		 sid = data->com_paras.ecdsa_data.sid;
+		 cid = data->com_paras.ecdsa_data.cid;
+		 kuid = data->com_paras.ecdsa_data.kuid;
+		 in_sz = data->com_paras.ecdsa_data.src_size;
+		 out_sz = data->com_paras.ecdsa_data.dst_size;
+
+		 msg->command = COMMAND_FCS_CRYPTO_ECDSA_HASH_VERIFY_INIT;
+		 msg->arg[0] = sid;
+		 msg->arg[1] = cid;
+		 msg->arg[2] = kuid;
+		 msg->arg[3] = CRYPTO_ECC_PARAM_SZ;
+		 msg->arg[4] = data->com_paras.ecdsa_data.ecc_algorithm & 0xF;
+		 priv->client.receive_cb = fcs_vab_callback;
+
+		 ret = fcs_request_service(priv, (void *)msg,
+					   FCS_REQUEST_TIMEOUT);
+		 if (ret || priv->status) {
+			 dev_err(dev, "failed to send the cmd=%d,ret=%d, status=%d\n",
+				 COMMAND_FCS_CRYPTO_ECDSA_HASH_VERIFY_INIT,
+				 ret, priv->status);
+			 return -EFAULT;
+		 }
+
+		 s_buf = stratix10_svc_allocate_memory(priv->chan, in_sz);
+		 if (!s_buf) {
+			 dev_err(dev, "failed allocate source buf\n");
+			 return -ENOMEM;
+		 }
+
+		 d_buf = stratix10_svc_allocate_memory(priv->chan, out_sz);
+		 if (!d_buf) {
+			 dev_err(dev, "failed allocate destation buf\n");
+			 fcs_close_services(priv, s_buf, NULL);
+			 return -ENOMEM;
+		 }
+
+		 memcpy(s_buf, data->com_paras.ecdsa_data.src,
+			data->com_paras.ecdsa_data.src_size);
+
+		 msg->command = COMMAND_FCS_CRYPTO_ECDSA_HASH_VERIFY_FINALIZE;
+		 msg->arg[0] = sid;
+		 msg->arg[1] = cid;
+		 msg->payload = s_buf;
+		 msg->payload_length = in_sz;
+		 msg->payload_output = d_buf;
+		 msg->payload_length_output = out_sz;
+		 priv->client.receive_cb = fcs_attestation_callback;
+
+		 ret = fcs_request_service(priv, (void *)msg,
+					   10 * FCS_REQUEST_TIMEOUT);
+		 if (!ret && !priv->status) {
+			 if (priv->size > out_sz) {
+				 dev_err(dev, "returned size %d is incorrect\n",
+					 priv->size);
+				 fcs_close_services(priv, s_buf, d_buf);
+				 return -EFAULT;
+			 }
+
+			 memcpy(data->com_paras.ecdsa_data.dst,
+				priv->kbuf, priv->size);
+			 data->com_paras.ecdsa_data.dst_size = priv->size;
+		 } else {
+			 data->com_paras.ecdsa_data.dst = NULL;
+			 data->com_paras.ecdsa_data.dst_size = 0;
+		 }
+
+		 data->status = priv->status;
+
+		 if (copy_to_user((void __user *)arg, data, sizeof(*data))) {
+			 dev_err(dev, "failure on copy_to_user\n");
+			 fcs_close_services(priv, s_buf, d_buf);
+			 ret = -EFAULT;
+		 }
+
+		 fcs_close_services(priv, s_buf, d_buf);
+
+		 break;
 
 	default:
 		dev_warn(dev, "shouldn't be here [0x%x]\n", cmd);
diff --git a/include/uapi/linux/intel_fcs-ioctl.h b/include/uapi/linux/intel_fcs-ioctl.h
index 742f58014349..22736d84eb30 100644
--- a/include/uapi/linux/intel_fcs-ioctl.h
+++ b/include/uapi/linux/intel_fcs-ioctl.h
@@ -426,6 +426,7 @@ enum intel_fcs_command_code {
 	INTEL_FCS_DEV_CRYPTO_MAC_VERIFY_CMD,
 	INTEL_FCS_DEV_CRYPTO_ECDSA_HASH_SIGNING_CMD,
 	INTEL_FCS_DEV_CRYPTO_ECDSA_SHA2_DATA_SIGNING_CMD,
+	INTEL_FCS_DEV_CRYPTO_ECDSA_HASH_VERIFY_CMD,
 };
 
 #define INTEL_FCS_DEV_VERSION_REQUEST \
@@ -532,5 +533,9 @@ enum intel_fcs_command_code {
 	_IOWR(INTEL_FCS_IOCTL, \
 	      INTEL_FCS_DEV_CRYPTO_ECDSA_SHA2_DATA_SIGNING_CMD, struct intel_fcs_dev_ioctl)
 
+#define INTEL_FCS_DEV_CRYPTO_ECDSA_HASH_VERIFY \
+	_IOWR(INTEL_FCS_IOCTL, \
+	      INTEL_FCS_DEV_CRYPTO_ECDSA_HASH_VERIFY_CMD, struct intel_fcs_dev_ioctl)
+
 #endif
 
-- 
2.31.1

