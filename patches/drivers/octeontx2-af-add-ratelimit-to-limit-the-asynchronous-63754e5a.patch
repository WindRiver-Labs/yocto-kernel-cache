From c24f44cdbf77350e4760ee9e91703197d8f53330 Mon Sep 17 00:00:00 2001
From: Naveen Mamindlapalli <naveenm@marvell.com>
Date: Tue, 12 Jan 2021 15:15:50 +0530
Subject: [PATCH 1062/1921] octeontx2-af: add ratelimit to limit the
 asynchronous err messages

Added ratelimit to limit the asynchronous err messages.

Change-Id: I15cc76c102cbc4ce704865da3e6ffa000074471d
Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/43462
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../ethernet/marvell/octeontx2/af/rvu_cpt.c   |  8 ++---
 .../ethernet/marvell/octeontx2/af/rvu_nix.c   | 20 ++++++-----
 .../ethernet/marvell/octeontx2/af/rvu_npa.c   | 25 +++++++++-----
 .../ethernet/marvell/octeontx2/af/rvu_ree.c   | 16 ++++-----
 .../ethernet/marvell/octeontx2/af/rvu_sso.c   | 34 +++++++++----------
 5 files changed, 57 insertions(+), 46 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
index 45829db511ce..a893e40f6e39 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
@@ -57,8 +57,8 @@ static irqreturn_t rvu_cpt_af_flr_intr_handler(int irq, void *ptr)
 
 	reg0 = rvu_read64(rvu, blkaddr, CPT_AF_FLTX_INT(0));
 	reg1 = rvu_read64(rvu, blkaddr, CPT_AF_FLTX_INT(1));
-	dev_err(rvu->dev, "Received CPTAF FLT irq : 0x%llx, 0x%llx",
-		reg0, reg1);
+	dev_err_ratelimited(rvu->dev, "Received CPTAF FLT irq : 0x%llx, 0x%llx",
+			    reg0, reg1);
 
 	rvu_write64(rvu, blkaddr, CPT_AF_FLTX_INT(0), reg0);
 	rvu_write64(rvu, blkaddr, CPT_AF_FLTX_INT(1), reg1);
@@ -76,7 +76,7 @@ static irqreturn_t rvu_cpt_af_rvu_intr_handler(int irq, void *ptr)
 		return IRQ_NONE;
 
 	reg = rvu_read64(rvu, blkaddr, CPT_AF_RVU_INT);
-	dev_err(rvu->dev, "Received CPTAF RVU irq : 0x%llx", reg);
+	dev_err_ratelimited(rvu->dev, "Received CPTAF RVU irq : 0x%llx", reg);
 
 	rvu_write64(rvu, blkaddr, CPT_AF_RVU_INT, reg);
 	return IRQ_HANDLED;
@@ -93,7 +93,7 @@ static irqreturn_t rvu_cpt_af_ras_intr_handler(int irq, void *ptr)
 		return IRQ_NONE;
 
 	reg = rvu_read64(rvu, blkaddr, CPT_AF_RAS_INT);
-	dev_err(rvu->dev, "Received CPTAF RAS irq : 0x%llx", reg);
+	dev_err_ratelimited(rvu->dev, "Received CPTAF RAS irq : 0x%llx", reg);
 
 	rvu_write64(rvu, blkaddr, CPT_AF_RAS_INT, reg);
 	return IRQ_HANDLED;
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
index 04ab11c00b43..f96b84f6158c 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
@@ -4349,28 +4349,32 @@ static irqreturn_t rvu_nix_af_ras_intr_handler(int irq, void *rvu_irq)
 	intr = rvu_read64(rvu, blkaddr, NIX_AF_RAS);
 
 	if (intr & BIT_ULL(34))
-		dev_err(rvu->dev, "NIX: Poisoned data on NIX_AQ_INST_S read\n");
+		dev_err_ratelimited(rvu->dev, "NIX: Poisoned data on NIX_AQ_INST_S read\n");
 
 	if (intr & BIT_ULL(33))
-		dev_err(rvu->dev, "NIX: Poisoned data on NIX_AQ_RES_S write\n");
+		dev_err_ratelimited(rvu->dev, "NIX: Poisoned data on NIX_AQ_RES_S write\n");
 
 	if (intr & BIT_ULL(32))
-		dev_err(rvu->dev, "NIX: Poisoned data on HW context read\n");
+		dev_err_ratelimited(rvu->dev, "NIX: Poisoned data on HW context read\n");
 
 	if (intr & BIT_ULL(4))
-		dev_err(rvu->dev, "NIX: Poisoned data on packet read from mirror buffer\n");
+		dev_err_ratelimited(rvu->dev,
+				    "NIX: Poisoned data on packet read from mirror buffer\n");
 
 	if (intr & BIT_ULL(3))
-		dev_err(rvu->dev, "NIX: Poisoned data on packet read from multicast buffer\n");
+		dev_err_ratelimited(rvu->dev,
+				    "NIX: Poisoned data on packet read from multicast buffer\n");
 
 	if (intr & BIT_ULL(2))
-		dev_err(rvu->dev, "NIX: Poisoned data on WQE read from mirror buffer\n");
+		dev_err_ratelimited(rvu->dev,
+				    "NIX: Poisoned data on WQE read from mirror buffer\n");
 
 	if (intr & BIT_ULL(1))
-		dev_err(rvu->dev, "NIX: Poisoned data on WQE read from multicast buffer\n");
+		dev_err_ratelimited(rvu->dev,
+				    "NIX: Poisoned data on WQE read from multicast buffer\n");
 
 	if (intr & BIT_ULL(0))
-		dev_err(rvu->dev, "NIX: Poisoned data on NIX_RX_MCE_S read\n");
+		dev_err_ratelimited(rvu->dev, "NIX: Poisoned data on NIX_RX_MCE_S read\n");
 
 	/* Clear interrupts */
 	rvu_write64(rvu, blkaddr, NIX_AF_RAS, intr);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c
index a9dcae1767d8..5675050ea55e 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c
@@ -617,17 +617,19 @@ static irqreturn_t rvu_npa_af_gen_intr_handler(int irq, void *rvu_irq)
 	intr = rvu_read64(rvu, blkaddr, NPA_AF_GEN_INT);
 
 	if (intr & BIT_ULL(32))
-		dev_err(rvu->dev, "NPA: Unmapped PF func error\n");
+		dev_err_ratelimited(rvu->dev, "NPA: Unmapped PF func error\n");
 
 	val = FIELD_GET(GENMASK(31, 16), intr);
 	err_msg = rvu_npa_inpq_to_str(val);
 	if (err_msg)
-		dev_err(rvu->dev, "NPA: Alloc disabled for %s\n", err_msg);
+		dev_err_ratelimited(rvu->dev, "NPA: Alloc disabled for %s\n",
+				    err_msg);
 
 	val = FIELD_GET(GENMASK(15, 0), intr);
 	err_msg = rvu_npa_inpq_to_str(val);
 	if (err_msg)
-		dev_err(rvu->dev, "NPA: Free disabled for %s\n", err_msg);
+		dev_err_ratelimited(rvu->dev, "NPA: Free disabled for %s\n",
+				    err_msg);
 
 	/* Clear interrupts */
 	rvu_write64(rvu, blkaddr, NPA_AF_GEN_INT, intr);
@@ -647,13 +649,15 @@ static irqreturn_t rvu_npa_af_err_intr_handler(int irq, void *rvu_irq)
 	intr = rvu_read64(rvu, blkaddr, NPA_AF_ERR_INT);
 
 	if (intr & BIT_ULL(14))
-		dev_err(rvu->dev, "NPA: Memory fault on NPA_AQ_INST_S read\n");
+		dev_err_ratelimited(rvu->dev,
+				    "NPA: Memory fault on NPA_AQ_INST_S read\n");
 
 	if (intr & BIT_ULL(13))
-		dev_err(rvu->dev, "NPA: Memory fault on NPA_AQ_RES_S write\n");
+		dev_err_ratelimited(rvu->dev,
+				    "NPA: Memory fault on NPA_AQ_RES_S write\n");
 
 	if (intr & BIT_ULL(12))
-		dev_err(rvu->dev, "NPA: AQ doorbell error\n");
+		dev_err_ratelimited(rvu->dev, "NPA: AQ doorbell error\n");
 
 	/* Clear interrupts */
 	rvu_write64(rvu, blkaddr, NPA_AF_ERR_INT, intr);
@@ -673,13 +677,16 @@ static irqreturn_t rvu_npa_af_ras_intr_handler(int irq, void *rvu_irq)
 	intr = rvu_read64(rvu, blkaddr, NPA_AF_RAS);
 
 	if (intr & BIT_ULL(34))
-		dev_err(rvu->dev, "NPA: Poisoned data on NPA_AQ_INST_S read\n");
+		dev_err_ratelimited(rvu->dev,
+				    "NPA: Poisoned data on NPA_AQ_INST_S read\n");
 
 	if (intr & BIT_ULL(33))
-		dev_err(rvu->dev, "NPA: Poisoned data on NPA_AQ_RES_S write\n");
+		dev_err_ratelimited(rvu->dev,
+				    "NPA: Poisoned data on NPA_AQ_RES_S write\n");
 
 	if (intr & BIT_ULL(32))
-		dev_err(rvu->dev, "NPA: Poisoned data on HW context read\n");
+		dev_err_ratelimited(rvu->dev,
+				    "NPA: Poisoned data on HW context read\n");
 
 	/* Clear interrupts */
 	rvu_write64(rvu, blkaddr, NPA_AF_RAS, intr);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_ree.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_ree.c
index 9f0d6c97bf33..3c46fa2f06cb 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_ree.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_ree.c
@@ -939,11 +939,11 @@ static irqreturn_t rvu_ree_af_ras_intr_handler(int irq, void *ptr)
 
 	intr = rvu_read64(block->rvu, blkaddr, REE_AF_RAS);
 	if (intr & REE_AF_RAS_DAT_PSN)
-		dev_err(rvu->dev, "REE: Poison received on a NCB data response\n");
+		dev_err_ratelimited(rvu->dev, "REE: Poison received on a NCB data response\n");
 	if (intr & REE_AF_RAS_LD_CMD_PSN)
-		dev_err(rvu->dev, "REE: Poison received on a NCB instruction response\n");
+		dev_err_ratelimited(rvu->dev, "REE: Poison received on a NCB instruction response\n");
 	if (intr & REE_AF_RAS_LD_REEX_PSN)
-		dev_err(rvu->dev, "REE: Poison received on a REEX response\n");
+		dev_err_ratelimited(rvu->dev, "REE: Poison received on a REEX response\n");
 
 	/* Clear interrupts */
 	rvu_write64(rvu, blkaddr, REE_AF_RAS, intr);
@@ -963,7 +963,7 @@ static irqreturn_t rvu_ree_af_rvu_intr_handler(int irq, void *ptr)
 
 	intr = rvu_read64(rvu, blkaddr, REE_AF_RVU_INT);
 	if (intr & REE_AF_RVU_INT_UNMAPPED_SLOT)
-		dev_err(rvu->dev, "REE: Unmapped slot error\n");
+		dev_err_ratelimited(rvu->dev, "REE: Unmapped slot error\n");
 
 	/* Clear interrupts */
 	rvu_write64(rvu, blkaddr, REE_AF_RVU_INT, intr);
@@ -984,13 +984,13 @@ static irqreturn_t rvu_ree_af_aq_intr_handler(int irq, void *ptr)
 	intr = rvu_read64(rvu, blkaddr, REE_AF_AQ_INT);
 
 	if (intr & REE_AF_AQ_INT_DOVF)
-		dev_err(rvu->dev, "REE: DOORBELL overflow\n");
+		dev_err_ratelimited(rvu->dev, "REE: DOORBELL overflow\n");
 	if (intr & REE_AF_AQ_INT_IRDE)
-		dev_err(rvu->dev, "REE: Instruction NCB read response error\n");
+		dev_err_ratelimited(rvu->dev, "REE: Instruction NCB read response error\n");
 	if (intr & REE_AF_AQ_INT_PRDE)
-		dev_err(rvu->dev, "REE: Payload NCB read response error\n");
+		dev_err_ratelimited(rvu->dev, "REE: Payload NCB read response error\n");
 	if (intr & REE_AF_AQ_INT_PLLE)
-		dev_err(rvu->dev, "REE: Payload length error\n");
+		dev_err_ratelimited(rvu->dev, "REE: Payload length error\n");
 
 	/* Clear interrupts */
 	rvu_write64(rvu, blkaddr, REE_AF_AQ_INT, intr);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_sso.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_sso.c
index af074937975c..a7ee8353d778 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_sso.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_sso.c
@@ -1147,62 +1147,62 @@ static irqreturn_t rvu_sso_af_err0_intr_handler(int irq, void *ptr)
 
 	block = &rvu->hw->block[blkaddr];
 	reg = rvu_read64(rvu, blkaddr, SSO_AF_ERR0);
-	dev_err(rvu->dev, "Received SSO_AF_ERR0 irq : 0x%llx", reg);
+	dev_err_ratelimited(rvu->dev, "Received SSO_AF_ERR0 irq : 0x%llx", reg);
 
 	if (reg & BIT_ULL(15)) {
-		dev_err(rvu->dev, "Received Bad-fill-packet NCB error");
+		dev_err_ratelimited(rvu->dev, "Received Bad-fill-packet NCB error");
 		SSO_AF_INT_DIGEST_PRNT(SSO_AF_POISON)
 	}
 
 	if (reg & BIT_ULL(14)) {
-		dev_err(rvu->dev, "An FLR was initiated, but SSO_LF_GGRP_AQ_CNT[AQ_CNT] != 0");
+		dev_err_ratelimited(rvu->dev, "An FLR was initiated, but SSO_LF_GGRP_AQ_CNT[AQ_CNT] != 0");
 		SSO_AF_INT_DIGEST_PRNT(SSO_AF_FLR_AQ_DIGEST)
 	}
 
 	if (reg & BIT_ULL(13)) {
-		dev_err(rvu->dev, "Add work dropped due to XAQ pointers not yet initialized.");
+		dev_err_ratelimited(rvu->dev, "Add work dropped due to XAQ pointers not yet initialized.");
 		SSO_AF_INT_DIGEST_PRNT(SSO_AF_XAQDIS_DIGEST)
 	}
 
 	if (reg & (0xF << 9)) {
-		dev_err(rvu->dev, "PF_FUNC mapping error.");
-		dev_err(rvu->dev, "SSO_AF_UNMAP_INFO : 0x%llx",
-			rvu_read64(rvu, blkaddr, SSO_AF_UNMAP_INFO));
+		dev_err_ratelimited(rvu->dev, "PF_FUNC mapping error.");
+		dev_err_ratelimited(rvu->dev, "SSO_AF_UNMAP_INFO : 0x%llx",
+				    rvu_read64(rvu, blkaddr, SSO_AF_UNMAP_INFO));
 	}
 
 	if (reg & BIT_ULL(8)) {
-		dev_err(rvu->dev, "Add work dropped due to QTL being disabled, 0x0");
+		dev_err_ratelimited(rvu->dev, "Add work dropped due to QTL being disabled, 0x0");
 		SSO_AF_INT_DIGEST_PRNT(SSO_AF_QCTLDIS_DIGEST)
 	}
 
 	if (reg & BIT_ULL(7)) {
-		dev_err(rvu->dev, "Add work dropped due to WQP being 0x0");
+		dev_err_ratelimited(rvu->dev, "Add work dropped due to WQP being 0x0");
 		SSO_AF_INT_DIGEST_PRNT(SSO_AF_WQP0_DIGEST)
 	}
 
 	if (reg & BIT_ULL(6))
-		dev_err(rvu->dev, "Add work dropped due to 64 bit write");
+		dev_err_ratelimited(rvu->dev, "Add work dropped due to 64 bit write");
 
 	if (reg & BIT_ULL(5))
-		dev_err(rvu->dev, "Set when received add work with tag type is specified as EMPTY");
+		dev_err_ratelimited(rvu->dev, "Set when received add work with tag type is specified as EMPTY");
 
 	if (reg & BIT_ULL(4)) {
-		dev_err(rvu->dev, "Add work to disabled hardware group. An ADDWQ was received and dropped to a hardware group with SSO_AF_HWGRP(0..255)_IAQ_THR[RSVD_THR] = 0.");
+		dev_err_ratelimited(rvu->dev, "Add work to disabled hardware group. An ADDWQ was received and dropped to a hardware group with SSO_AF_HWGRP(0..255)_IAQ_THR[RSVD_THR] = 0.");
 		SSO_AF_INT_DIGEST_PRNT(SSO_AF_GRPDIS_DIGEST)
 	}
 
 	if (reg & BIT_ULL(3)) {
-		dev_err(rvu->dev, "Bad-fill-packet NCB error");
+		dev_err_ratelimited(rvu->dev, "Bad-fill-packet NCB error");
 		SSO_AF_INT_DIGEST_PRNT(SSO_AF_BFPN_DIGEST)
 	}
 
 	if (reg & BIT_ULL(2)) {
-		dev_err(rvu->dev, "Bad-fill-packet error.");
+		dev_err_ratelimited(rvu->dev, "Bad-fill-packet error.");
 		SSO_AF_INT_DIGEST_PRNT(SSO_AF_BFP_DIGEST)
 	}
 
 	if (reg & BIT_ULL(1)) {
-		dev_err(rvu->dev, "The NPA returned an error indication");
+		dev_err_ratelimited(rvu->dev, "The NPA returned an error indication");
 		SSO_AF_INT_DIGEST_PRNT(SSO_AF_NPA_DIGEST)
 	}
 
@@ -1221,7 +1221,7 @@ static irqreturn_t rvu_sso_af_err2_intr_handler(int irq, void *ptr)
 		return IRQ_NONE;
 
 	reg = rvu_read64(rvu, blkaddr, SSO_AF_ERR2);
-	dev_err(rvu->dev, "received SSO_AF_ERR2 irq : 0x%llx", reg);
+	dev_err_ratelimited(rvu->dev, "received SSO_AF_ERR2 irq : 0x%llx", reg);
 	rvu_write64(rvu, blkaddr, SSO_AF_ERR2, reg);
 
 	return IRQ_HANDLED;
@@ -1241,7 +1241,7 @@ static irqreturn_t rvu_sso_af_ras_intr_handler(int irq, void *ptr)
 	block = &rvu->hw->block[blkaddr];
 
 	reg = rvu_read64(rvu, blkaddr, SSO_AF_RAS);
-	dev_err(rvu->dev, "received SSO_AF_RAS irq : 0x%llx", reg);
+	dev_err_ratelimited(rvu->dev, "received SSO_AF_RAS irq : 0x%llx", reg);
 	rvu_write64(rvu, blkaddr, SSO_AF_RAS, reg);
 	SSO_AF_INT_DIGEST_PRNT(SSO_AF_POISON)
 
-- 
2.31.1

