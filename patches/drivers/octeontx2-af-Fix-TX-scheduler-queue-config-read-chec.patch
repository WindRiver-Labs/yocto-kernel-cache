From 6d407009401f7d52dbb92610d99a06014dd28fdc Mon Sep 17 00:00:00 2001
From: Subbaraya Sundeep <sbhatta@marvell.com>
Date: Wed, 2 Jun 2021 20:29:43 +0530
Subject: [PATCH 20/23] octeontx2-af: Fix TX scheduler queue config read check

commit 583c6ca3c53a1d6ca67a141abc10d44dcf76095a from
git@git.assembla.com:cavium/WindRiver.linux.git

During TX scheduler queue config read request
both the given register and scheduler queue number
needs to be checked for valid values from mailbox
caller. If register is valid then scheduler queue
number is not checked for valid value by mistake.
This patch fixes that. Also bits other than register
offset and scheduler queue number are masked out
while reading or writing that register.

Fixes: 7dc94760d4ec ("octeontx2-af: Update NIX_TXSCHQ_CONFIG mbox")
Change-Id: Iac89d2e5b51040e0d72b80c1566d00094ea01b96
Signed-off-by: Subbaraya Sundeep <sbhatta@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/53561
Reviewed-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
Tested-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
index 270c5733592d..99da68bf3462 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
@@ -2179,6 +2179,11 @@ static void nix_tl1_default_cfg(struct rvu *rvu, struct nix_hw *nix_hw,
 	pfvf_map[schq] = TXSCH_SET_FLAG(pfvf_map[schq], NIX_TXSCHQ_CFG_DONE);
 }
 
+/* Register offset - [15:0]
+ * Scheduler Queue number - [25:16]
+ */
+#define NIX_TX_SCHQ_MASK	GENMASK_ULL(25, 0)
+
 static int nix_txschq_cfg_read(struct rvu *rvu, struct nix_hw *nix_hw,
 			       int blkaddr, struct nix_txschq_config *req,
 			       struct nix_txschq_config *rsp)
@@ -2190,8 +2195,9 @@ static int nix_txschq_cfg_read(struct rvu *rvu, struct nix_hw *nix_hw,
 	rvu_nix_txsch_lock(nix_hw);
 	for (idx = 0; idx < req->num_regs; idx++) {
 		reg = req->reg[idx];
+		reg &= NIX_TX_SCHQ_MASK;
 		schq = TXSCHQ_IDX(reg, TXSCHQ_IDX_SHIFT);
-		if (!rvu_check_valid_reg(TXSCHQ_HWREGMAP, req->lvl, reg) &&
+		if (!rvu_check_valid_reg(TXSCHQ_HWREGMAP, req->lvl, reg) ||
 		    !is_valid_txschq(rvu, blkaddr, req->lvl, pcifunc, schq)) {
 			rvu_nix_txsch_unlock(nix_hw);
 			return NIX_AF_INVAL_TXSCHQ_CFG;
@@ -2247,6 +2253,7 @@ int rvu_mbox_handler_nix_txschq_cfg(struct rvu *rvu,
 	rvu_nix_txsch_lock(nix_hw);
 	for (idx = 0; idx < req->num_regs; idx++) {
 		reg = req->reg[idx];
+		reg &= NIX_TX_SCHQ_MASK;
 		regval = req->regval[idx];
 		schq_regbase = reg & 0xFFFF;
 		val_mask = req->regval_mask[idx];
-- 
2.31.1

