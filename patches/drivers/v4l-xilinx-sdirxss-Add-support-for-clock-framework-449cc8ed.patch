From 6cb8648590e91468d003d1db992d2223f0298bb9 Mon Sep 17 00:00:00 2001
From: Vishal Sagar <vishal.sagar@xilinx.com>
Date: Thu, 2 Aug 2018 09:42:46 +0530
Subject: [PATCH 0392/1851] v4l: xilinx: sdirxss: Add support for clock
 framework

commit 7dcda619a3ce05fb065bdbb7a61d8067286b58c3 from
https://github.com/Xilinx/linux-xlnx.git

Adds support for clock framework by adding 3 clocks for axilite
interface, sdirx gt clock and video out clock.

Signed-off-by: Vishal Sagar <vishal.sagar@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 .../media/platform/xilinx/xilinx-sdirxss.c    | 64 +++++++++++++++++--
 1 file changed, 60 insertions(+), 4 deletions(-)

diff --git a/drivers/media/platform/xilinx/xilinx-sdirxss.c b/drivers/media/platform/xilinx/xilinx-sdirxss.c
index 5d22324ef950..e9a1b25ca59b 100644
--- a/drivers/media/platform/xilinx/xilinx-sdirxss.c
+++ b/drivers/media/platform/xilinx/xilinx-sdirxss.c
@@ -18,6 +18,7 @@
 #include <dt-bindings/media/xilinx-vip.h>
 #include <linux/bitops.h>
 #include <linux/compiler.h>
+#include <linux/clk.h>
 #include <linux/delay.h>
 #include <linux/device.h>
 #include <linux/interrupt.h>
@@ -274,6 +275,9 @@ enum sdi_family_enc {
  * @irq: requested irq number
  * @include_edh: EDH processor presence
  * @mode: 3G/6G/12G mode
+ * @axi_clk: Axi lite interface clock
+ * @sdirx_clk: SDI Rx GT clock
+ * @vidout_clk: Video clock
  */
 struct xsdirxss_core {
 	struct device *dev;
@@ -281,6 +285,9 @@ struct xsdirxss_core {
 	int irq;
 	bool include_edh;
 	int mode;
+	struct clk *axi_clk;
+	struct clk *sdirx_clk;
+	struct clk *vidout_clk;
 };
 
 /**
@@ -1636,14 +1643,55 @@ static int xsdirxss_probe(struct platform_device *pdev)
 	xsdirxss->core.dev = &pdev->dev;
 	core = &xsdirxss->core;
 
+	core->axi_clk = devm_clk_get(&pdev->dev, "s_axi_aclk");
+	if (IS_ERR(core->axi_clk)) {
+		ret = PTR_ERR(core->axi_clk);
+		dev_err(&pdev->dev, "failed to get s_axi_clk (%d)\n", ret);
+		return ret;
+	}
+
+	core->sdirx_clk = devm_clk_get(&pdev->dev, "sdi_rx_clk");
+	if (IS_ERR(core->sdirx_clk)) {
+		ret = PTR_ERR(core->sdirx_clk);
+		dev_err(&pdev->dev, "failed to get sdi_rx_clk (%d)\n", ret);
+		return ret;
+	}
+
+	core->vidout_clk = devm_clk_get(&pdev->dev, "video_out_clk");
+	if (IS_ERR(core->vidout_clk)) {
+		ret = PTR_ERR(core->vidout_clk);
+		dev_err(&pdev->dev, "failed to get video_out_aclk (%d)\n", ret);
+		return ret;
+	}
+
+	ret = clk_prepare_enable(core->axi_clk);
+	if (ret) {
+		dev_err(&pdev->dev, "failed to enable axi_clk (%d)\n", ret);
+		return ret;
+	}
+
+	ret = clk_prepare_enable(core->sdirx_clk);
+	if (ret) {
+		dev_err(&pdev->dev, "failed to enable sdirx_clk (%d)\n", ret);
+		goto rx_clk_err;
+	}
+
+	ret = clk_prepare_enable(core->vidout_clk);
+	if (ret) {
+		dev_err(&pdev->dev, "failed to enable vidout_clk (%d)\n", ret);
+		goto vidout_clk_err;
+	}
+
 	ret = xsdirxss_parse_of(xsdirxss);
 	if (ret < 0)
-		return ret;
+		goto clk_err;
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	xsdirxss->core.iomem = devm_ioremap_resource(xsdirxss->core.dev, res);
-	if (IS_ERR(xsdirxss->core.iomem))
-		return PTR_ERR(xsdirxss->core.iomem);
+	if (IS_ERR(xsdirxss->core.iomem)) {
+		ret = PTR_ERR(xsdirxss->core.iomem);
+		goto clk_err;
+	}
 
 	/* Reset the core */
 	xsdirx_streamflow_control(core, false);
@@ -1762,6 +1810,12 @@ static int xsdirxss_probe(struct platform_device *pdev)
 	v4l2_ctrl_handler_free(&xsdirxss->ctrl_handler);
 	media_entity_cleanup(&subdev->entity);
 
+clk_err:
+	clk_disable_unprepare(core->vidout_clk);
+vidout_clk_err:
+	clk_disable_unprepare(core->sdirx_clk);
+rx_clk_err:
+	clk_disable_unprepare(core->axi_clk);
 	return ret;
 }
 
@@ -1773,7 +1827,9 @@ static int xsdirxss_remove(struct platform_device *pdev)
 	v4l2_async_unregister_subdev(subdev);
 	v4l2_ctrl_handler_free(&xsdirxss->ctrl_handler);
 	media_entity_cleanup(&subdev->entity);
-
+	clk_disable_unprepare(xsdirxss->core.vidout_clk);
+	clk_disable_unprepare(xsdirxss->core.sdirx_clk);
+	clk_disable_unprepare(xsdirxss->core.axi_clk);
 	return 0;
 }
 
-- 
2.31.1

