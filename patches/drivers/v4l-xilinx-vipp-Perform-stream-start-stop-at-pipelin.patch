From 9847cc7d476fb9e3b74f19258c2d6781e30c6dba Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Thu, 13 Aug 2020 11:42:58 -0700
Subject: [PATCH 1518/1852] v4l: xilinx: vipp: Perform stream start/stop at
 pipeline level

commit a30e34689fdc2b3caff4c2140dec867a9eb74cee from
https://github.com/Xilinx/linux-xlnx.git

The start / stop is currently done at the graph level, but it's allowed
to have multiple independent pipelines. That causes an issue that
single pipeline can start / stop the entire graph even when other
pipelines are not ready. Hence there's a race when individual pipelines
try to start/stop the entire graph at the same time, or even false
start / stop of the graph.

Fix it by doing start / stop at pipeline level. It's done by checking
entity against the target pipeline, and if it doesn't match, skip
the entity.

Reported-by: Jeegar Patel <jeegar.patel@xilinx.com>
Signed-off-by: Hyun Kwon <hyun.kwon@xilinx.com>
Reviewed-by: Vishal Sagar <vishal.sagar@xilinx.com>
Tested-by: Jeegar Patel <jeegar.patel@xilinx.com>
Reviewed-by: Dylan Yip <dylan.yip@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/media/platform/xilinx/xilinx-dma.c  |  4 ++--
 drivers/media/platform/xilinx/xilinx-vipp.c | 15 ++++++++++++---
 drivers/media/platform/xilinx/xilinx-vipp.h |  3 ++-
 3 files changed, 16 insertions(+), 6 deletions(-)

diff --git a/drivers/media/platform/xilinx/xilinx-dma.c b/drivers/media/platform/xilinx/xilinx-dma.c
index 8a48f76528e1..94a5d1445abd 100644
--- a/drivers/media/platform/xilinx/xilinx-dma.c
+++ b/drivers/media/platform/xilinx/xilinx-dma.c
@@ -132,14 +132,14 @@ static int xvip_pipeline_set_stream(struct xvip_pipeline *pipe, bool on)
 
 	if (on) {
 		if (pipe->stream_count == pipe->num_dmas - 1) {
-			ret = xvip_graph_start_stop(xdev, true);
+			ret = xvip_graph_pipeline_start_stop(xdev, pipe, true);
 			if (ret < 0)
 				goto done;
 		}
 		pipe->stream_count++;
 	} else {
 		if (--pipe->stream_count == 0)
-			xvip_graph_start_stop(xdev, false);
+			xvip_graph_pipeline_start_stop(xdev, pipe, false);
 	}
 
 done:
diff --git a/drivers/media/platform/xilinx/xilinx-vipp.c b/drivers/media/platform/xilinx/xilinx-vipp.c
index f4b4e7db43f3..0473d98359bf 100644
--- a/drivers/media/platform/xilinx/xilinx-vipp.c
+++ b/drivers/media/platform/xilinx/xilinx-vipp.c
@@ -357,17 +357,23 @@ static bool xvip_graph_entity_start_stop(struct xvip_composite_device *xdev,
 }
 
 /**
- * xvip_graph_start_stop - start or stop the entire graph
+ * xvip_graph_pipeline_start_stop - start or stop the pipe in the graph
  * @xdev: composite device
+ * @pipe: pipeline to start / stop
  * @on: boolean flag. true for enable and false for disable
  *
- * Enable or disable the entire graph by iterating the asd list.
+ * Enable or disable the pipe in the graph by iterating the asd list.
+ * The pipe is a sub-graph, and the check ensures the given entity
+ * is part of the pipe before doing start or stop. This function
+ * or any subsequent functions don't and shouldn't change the asd list,
+ * so that there's no race if the caller holds the pipeline lock.
  * xvip_graph_entity_start_stop() takes care of dependencies,
  * or state-checking.
  *
  * Return: 0 for success, otherwise error code
  */
-int xvip_graph_start_stop(struct xvip_composite_device *xdev, bool on)
+int xvip_graph_pipeline_start_stop(struct xvip_composite_device *xdev,
+				   struct xvip_pipeline *pipe, bool on)
 {
 	struct v4l2_async_subdev *asd;
 
@@ -376,6 +382,9 @@ int xvip_graph_start_stop(struct xvip_composite_device *xdev, bool on)
 		bool state;
 
 		entity = to_xvip_entity(asd);
+		/* skip an entity not belongng to the given pipe */
+		if (&pipe->pipe != entity->entity->pipe)
+			continue;
 
 		state = xvip_graph_entity_start_stop(xdev, entity, on);
 		if (!state)
diff --git a/drivers/media/platform/xilinx/xilinx-vipp.h b/drivers/media/platform/xilinx/xilinx-vipp.h
index 1a58d729bd39..6a732a0ef0f9 100644
--- a/drivers/media/platform/xilinx/xilinx-vipp.h
+++ b/drivers/media/platform/xilinx/xilinx-vipp.h
@@ -41,6 +41,7 @@ struct xvip_composite_device {
 	struct mutex lock; /* lock to protect xvip pipeline instance */
 };
 
-int xvip_graph_start_stop(struct xvip_composite_device *xdev, bool on);
+int xvip_graph_pipeline_start_stop(struct xvip_composite_device *xdev,
+				   struct xvip_pipeline *pipe, bool on);
 
 #endif /* __XILINX_VIPP_H__ */
-- 
2.31.1

