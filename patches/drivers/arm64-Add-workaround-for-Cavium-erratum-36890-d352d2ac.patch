From 7fbae2c5b3ea493a67ba53b0cf891d7f51fd9631 Mon Sep 17 00:00:00 2001
From: Andrew Pinski <apinski@marvell.com>
Date: Tue, 21 May 2019 17:46:41 +0000
Subject: [PATCH 0389/1921] arm64: Add workaround for Cavium erratum 36890

On all ThunderX T88 passes, all OcteonTX T81 and T83 passes,
and some OcteonTX2 passes (some T96xx and F95XX), the "dc zva"
instruction has issues where old data would be in the cache in
some cases.  This happens when there are two different VAs
pointing to the same PA; even with different asids.

Change-Id: Ife8671af41822c4d6d6e4e7a24d005ee29d9dd17
Signed-off-by: Andrew Pinski <apinski@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/26578
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 arch/arm64/Kconfig               | 12 ++++++++++++
 arch/arm64/include/asm/cpucaps.h |  3 ++-
 arch/arm64/kernel/cpu_errata.c   | 33 ++++++++++++++++++++++++++++++++
 3 files changed, 47 insertions(+), 1 deletion(-)

diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index cee259f2001b..c8ce7a416cfa 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -613,6 +613,18 @@ config CAVIUM_ERRATUM_30115
 
 	  If unsure, say Y.
 
+config CAVIUM_ERRATUM_36890
+	bool "Cavium erratum 36890"
+	default y
+	help
+	  Enable workaround for erratum 36890.  On all ThunderX T88xx and
+	  OcteonTX1 T81/T83 and some OcteonTX2 chips, the "dc zva" instruction
+	  does not work all the time.  This happens when there are two VAs
+	  that match up with one PA; including when the two VAs match but have
+	  different asids.  The fix is to disable "dc zva" in userspace.
+
+	  If unsure, say Y.
+
 config QCOM_FALKOR_ERRATUM_1003
 	bool "Falkor E1003: Incorrect translation due to ASID change"
 	default y
diff --git a/arch/arm64/include/asm/cpucaps.h b/arch/arm64/include/asm/cpucaps.h
index 1dc3c762fdcb..3a8961fdf22c 100644
--- a/arch/arm64/include/asm/cpucaps.h
+++ b/arch/arm64/include/asm/cpucaps.h
@@ -55,7 +55,8 @@
 #define ARM64_WORKAROUND_CAVIUM_TX2_219_TVM	45
 #define ARM64_WORKAROUND_CAVIUM_TX2_219_PRFM	46
 #define ARM64_WORKAROUND_1542419		47
+#define ARM64_WORKAROUND_CAVIUM_36890		48
 
-#define ARM64_NCAPS				48
+#define ARM64_NCAPS				49
 
 #endif /* __ASM_CPUCAPS_H */
diff --git a/arch/arm64/kernel/cpu_errata.c b/arch/arm64/kernel/cpu_errata.c
index 7661fe019d09..034b086f4ba8 100644
--- a/arch/arm64/kernel/cpu_errata.c
+++ b/arch/arm64/kernel/cpu_errata.c
@@ -782,6 +782,31 @@ static const struct arm64_cpu_capabilities erratum_843419_list[] = {
 };
 #endif
 
+static void __maybe_unused
+cpu_enable_trap_zva_access(const struct arm64_cpu_capabilities *__unused)
+{
+	/*
+	 * Clear SCTLR_EL2.DZE or SCTLR_EL1.DZE depending
+	 * on if we are in EL2.
+	 */
+	if (!is_kernel_in_hyp_mode())
+		sysreg_clear_set(sctlr_el1, SCTLR_EL1_DZE, 0);
+	else
+		sysreg_clear_set(sctlr_el2, SCTLR_EL1_DZE, 0);
+}
+
+static const struct midr_range cavium_erratum_36890_cpus[] = {
+	MIDR_ALL_VERSIONS(MIDR_THUNDERX),
+	/* Cavium ThunderX, T81 all passes */
+	MIDR_ALL_VERSIONS(MIDR_THUNDERX_81XX),
+	/* Cavium ThunderX, T83 all passes */
+	MIDR_ALL_VERSIONS(MIDR_THUNDERX_83XX),
+	/* Marvell OcteonTX 2, 96xx pass A0, A1, and B0 */
+	MIDR_RANGE(MIDR_MRVL_OCTEONTX2_96XX, 0, 0, 1, 0),
+	/* Marvell OcteonTX 2, 95 pass A0/A1 */
+	MIDR_RANGE(MIDR_MRVL_OCTEONTX2_95XX, 0, 0, 0, 1),
+};
+
 const struct arm64_cpu_capabilities arm64_errata[] = {
 #ifdef CONFIG_ARM64_WORKAROUND_CLEAN_CACHE
 	{
@@ -946,6 +971,14 @@ const struct arm64_cpu_capabilities arm64_errata[] = {
 		.matches = has_neoverse_n1_erratum_1542419,
 		.cpu_enable = cpu_enable_trap_ctr_access,
 	},
+#endif
+#ifdef CONFIG_CAVIUM_ERRATUM_36890
+	{
+		.desc = "Cavium erratum 36890",
+		.capability = ARM64_WORKAROUND_CAVIUM_36890,
+		ERRATA_MIDR_RANGE_LIST(cavium_erratum_36890_cpus),
+		.cpu_enable = cpu_enable_trap_zva_access,
+	},
 #endif
 	{
 	}
-- 
2.31.1

