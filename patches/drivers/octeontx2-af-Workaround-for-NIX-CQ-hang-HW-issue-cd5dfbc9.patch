From d60c89b71b823f2487a6f16a3d564783f580d227 Mon Sep 17 00:00:00 2001
From: Jerin Jacob <jerinj@marvell.com>
Date: Thu, 4 Apr 2019 14:50:52 +0530
Subject: [PATCH 0135/1921] octeontx2-af: Workaround for NIX CQ hang HW issue

An issue exists in A0 silicon whereby, NIX CQ may reach in CQ full
state followed by CQ hang on CQM query response from stale
CQ context. To avoid such condition, enable internal backpressure
with BP_TEST registers.

Change-Id: I4ff7f89ffcd26a830e11c32e98a6232e5d4fa33e
Signed-off-by: Jerin Jacob <jerinj@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../ethernet/marvell/octeontx2/af/rvu_fixes.c | 19 +++++++++++++++++++
 .../ethernet/marvell/octeontx2/af/rvu_reg.h   |  2 ++
 2 files changed, 21 insertions(+)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c
index 982f20d01ea6..9f5fce8672fb 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c
@@ -876,6 +876,23 @@ ssize_t rvu_nix_get_tx_stall_counters(struct rvu *rvu,
 	return len;
 }
 
+static void rvu_nix_enable_internal_bp(struct rvu *rvu, int blkaddr)
+{
+	/* An issue exists in A0 silicon whereby, NIX CQ may reach in CQ full
+	 * state followed by CQ hang on CQM query response from stale
+	 * CQ context. To avoid such condition, enable internal backpressure
+	 * with BP_TEST registers.
+	 */
+	if (is_rvu_9xxx_A0(rvu)) {
+		/* Enable internal backpressure on pipe_stg0 */
+		rvu_write64(rvu, blkaddr, NIX_AF_RQM_BP_TEST,
+			    BIT_ULL(51) | BIT_ULL(23) | BIT_ULL(22) | 0x100ULL);
+		/* Enable internal backpressure on cqm query request */
+		rvu_write64(rvu, blkaddr, NIX_AF_CQM_BP_TEST,
+			    BIT_ULL(43) | BIT_ULL(23) | BIT_ULL(22) | 0x100ULL);
+	}
+}
+
 int rvu_nix_fixes_init(struct rvu *rvu, struct nix_hw *nix_hw, int blkaddr)
 {
 	int err;
@@ -889,6 +906,8 @@ int rvu_nix_fixes_init(struct rvu *rvu, struct nix_hw *nix_hw, int blkaddr)
 	err = rvu_nix_tx_stall_workaround_init(rvu, nix_hw, blkaddr);
 	if (err)
 		return err;
+
+	rvu_nix_enable_internal_bp(rvu, blkaddr);
 	return 0;
 }
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h
index 6b81ce6e0e88..21a14eb64395 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h
@@ -399,6 +399,8 @@
 #define NIX_AF_RX_NPC_MIRROR_RCV	(0x4720)
 #define NIX_AF_RX_NPC_MIRROR_DROP	(0x4730)
 #define NIX_AF_RX_ACTIVE_CYCLES_PCX(a)	(0x4800 | (a) << 16)
+#define NIX_AF_RQM_BP_TEST		(0x4880)
+#define NIX_AF_CQM_BP_TEST		(0x48c0)
 
 #define NIX_PRIV_AF_INT_CFG		(0x8000000)
 #define NIX_PRIV_LFX_CFG		(0x8000010)
-- 
2.31.1

