From 82b021170dc9de0dcc3d040119dc6d3f8e380076 Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Wed, 21 Mar 2018 10:18:09 -0700
Subject: [PATCH 0335/1852] drm: xlnx: zynqmp_dp: Use the correct number of
 lanes

commit 88c57735922c0e1bb6ffdc68f02c771799ff278b from
https://github.com/Xilinx/linux-xlnx.git

The number of lanes is configurable, thus the dynamically configured
value should be used instead of hard-coded max number of lanes. Use
the number of assigned lanes correctly.

While at it, don't print an error for phy probe deferral.

Signed-off-by: Hyun Kwon <hyun.kwon@xilinx.com>
Tested-by: Parth Gajjar <parthg@xilinx.com>
Reviewed-by: Saurabh Sengar <saurabhs@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/gpu/drm/xlnx/zynqmp_dp.c | 11 +++++++----
 1 file changed, 7 insertions(+), 4 deletions(-)

diff --git a/drivers/gpu/drm/xlnx/zynqmp_dp.c b/drivers/gpu/drm/xlnx/zynqmp_dp.c
index 0c33da7fcf8e..4a78ef8bfaa9 100644
--- a/drivers/gpu/drm/xlnx/zynqmp_dp.c
+++ b/drivers/gpu/drm/xlnx/zynqmp_dp.c
@@ -476,7 +476,7 @@ static int zynqmp_dp_init_phy(struct zynqmp_dp *dp)
 	unsigned int i;
 	int ret;
 
-	for (i = 0; i < ZYNQMP_DP_MAX_LANES; i++) {
+	for (i = 0; i < dp->num_lanes; i++) {
 		ret = phy_init(dp->phy[i]);
 		if (ret) {
 			dev_err(dp->dev, "failed to init phy lane %d\n", i);
@@ -503,7 +503,7 @@ static void zynqmp_dp_exit_phy(struct zynqmp_dp *dp)
 	unsigned int i;
 	int ret;
 
-	for (i = 0; i < ZYNQMP_DP_MAX_LANES; i++) {
+	for (i = 0; i < dp->num_lanes; i++) {
 		ret = phy_exit(dp->phy[i]);
 		if (ret)
 			dev_err(dp->dev, "failed to exit phy(%d) %d\n", i, ret);
@@ -523,7 +523,7 @@ static int zynqmp_dp_phy_ready(struct zynqmp_dp *dp)
 {
 	u32 i, reg, ready;
 
-	ready = (1 << ZYNQMP_DP_MAX_LANES) - 1;
+	ready = (1 << dp->num_lanes) - 1;
 
 	/* Wait for 100 * 1ms. This should be enough time for PHY to be ready */
 	for (i = 0; ; i++) {
@@ -1788,7 +1788,10 @@ int zynqmp_dp_probe(struct platform_device *pdev)
 		if (IS_ERR(dp->phy[i])) {
 			/* 2nd lane is optional */
 			if (i == 0 || PTR_ERR(dp->phy[i]) != -ENODEV) {
-				dev_err(dp->dev, "failed to get phy lane\n");
+				if (PTR_ERR(dp->phy[i]) != -EPROBE_DEFER) {
+					dev_err(dp->dev,
+						"failed to get phy lane\n");
+				}
 				ret = PTR_ERR(dp->phy[i]);
 				dp->phy[i] = NULL;
 				return ret;
-- 
2.31.1

