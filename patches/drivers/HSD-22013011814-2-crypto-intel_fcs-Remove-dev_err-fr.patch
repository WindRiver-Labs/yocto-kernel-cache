From 677643eeab04cf39858af003288f55b644aa5717 Mon Sep 17 00:00:00 2001
From: Siew Chin Lim <elly.siew.chin.lim@intel.com>
Date: Thu, 9 Sep 2021 22:25:16 +0800
Subject: [PATCH 08/20] HSD #22013011814-2: crypto: intel_fcs: Remove dev_err
 from dev/hwrng read function

commit 67b9dab2c33a2acb7e5e4d84f0ec7bcf0206d279 from
https://github.com/altera-opensource/linux-socfpga/commits/socfpga-5.4.124-lts

Update low level fcs_rng_read function to don't call dev_err if failed to
read random number from SDM to avoid fcs driver error. This function is
only supported in N5X. For non-N5X family, it is expected to be failed in
fcs driver. So, only return error code in fcs_rng_read function and leave
it to dev/hwrng to report the error.

Signed-off-by: Siew Chin Lim <elly.siew.chin.lim@intel.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/crypto/intel_fcs.c | 49 ++++++++++++++++++++++++++------------
 1 file changed, 34 insertions(+), 15 deletions(-)

diff --git a/drivers/crypto/intel_fcs.c b/drivers/crypto/intel_fcs.c
index ac936dc6e822..9dfab957b38c 100644
--- a/drivers/crypto/intel_fcs.c
+++ b/drivers/crypto/intel_fcs.c
@@ -189,6 +189,24 @@ static void fcs_crypto_sessionid_callback(struct stratix10_svc_client *client,
 	complete(&priv->completion);
 }
 
+static void fcs_hwrng_callback(struct stratix10_svc_client *client,
+			       struct stratix10_svc_cb_data *data)
+{
+	struct intel_fcs_priv *priv = client->priv;
+
+	priv->status = 0;
+	priv->kbuf = NULL;
+	priv->size = 0;
+
+	if ((data->status == BIT(SVC_STATUS_OK)) ||
+	    (data->status == BIT(SVC_STATUS_COMPLETED))) {
+		priv->kbuf = data->kaddr2;
+		priv->size = *((unsigned int *)data->kaddr3);
+	}
+
+	complete(&priv->completion);
+}
+
 static int fcs_request_service(struct intel_fcs_priv *priv,
 			       void *msg, unsigned long timeout)
 {
@@ -2348,46 +2366,47 @@ static int fcs_rng_read(struct hwrng *rng, void *buf, size_t max, bool wait)
 	struct device *dev;
 	void *s_buf;
 	int ret = 0;
-	size_t size;
+	size_t size = 0;
 
 	priv = (struct intel_fcs_priv *)rng->priv;
 	dev = priv->client.dev;
 
 	msg = devm_kzalloc(dev, sizeof(*msg), GFP_KERNEL);
-	if (!msg)
+	if (!msg) {
+		dev_err(dev, "failed to allocate msg buffer\n");
 		return -ENOMEM;
+	}
 
 	s_buf = stratix10_svc_allocate_memory(priv->chan,
 					      RANDOM_NUMBER_SIZE);
 	if (!s_buf) {
-		dev_err(dev, "failed to allocate RNG buffer\n");
+		dev_err(dev, "failed to allocate random number buffer\n");
 		return -ENOMEM;
 	}
 
 	msg->command = COMMAND_FCS_RANDOM_NUMBER_GEN;
 	msg->payload = s_buf;
 	msg->payload_length = RANDOM_NUMBER_SIZE;
-	priv->client.receive_cb = fcs_data_callback;
+	priv->client.receive_cb = fcs_hwrng_callback;
 
 	ret = fcs_request_service(priv, (void *)msg,
 				  FCS_REQUEST_TIMEOUT);
 	if (!ret && !priv->status) {
-		if (!priv->kbuf) {
-			dev_err(dev, "failure on kbuf\n");
-			fcs_close_services(priv, s_buf, NULL);
-			return -EFAULT;
-		}
-
-		if (max > priv->size)
-			size = priv->size;
-		else
-			size = max;
+		if (priv->size && priv->kbuf) {
+			if (max > priv->size)
+				size = priv->size;
+			else
+				size = max;
 
-		memcpy((uint8_t *)buf, (uint8_t *)priv->kbuf, size);
+			memcpy((uint8_t *)buf, (uint8_t *)priv->kbuf, size);
+		}
 	}
 
 	fcs_close_services(priv, s_buf, NULL);
 
+	if (size == 0)
+		return -ENOTSUPP;
+
 	return size;
 }
 
-- 
2.31.1

