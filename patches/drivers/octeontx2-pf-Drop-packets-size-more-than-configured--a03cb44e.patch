From c454a1c7eb322b723ab9ff7d9c0e0729a8c918f0 Mon Sep 17 00:00:00 2001
From: Geetha sowjanya <gakula@marvell.com>
Date: Fri, 25 Oct 2019 16:11:33 +0530
Subject: [PATCH 0309/1921] octeontx2-pf: Drop packets size more than
 configured FRS

Drop packets with length more than configured FRS to avoid
SQ Meta-descriptor error.
This patch also include some cleanup changes.

Change-Id: I4c28134e004151094de125189f0f904d6a29a7a2
Signed-off-by: Geetha sowjanya <gakula@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/17865
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
(cherry picked from commit f910cf67294b5f9ff3e902154e51afb218219997)
Reviewed-on: https://sj1git1.cavium.com/17873
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../ethernet/marvell/octeontx2/nic/otx2_pf.c  | 50 +++++++++++--------
 1 file changed, 28 insertions(+), 22 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index 2208ab80427b..c82786e1cfed 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -1183,15 +1183,15 @@ static irqreturn_t otx2_q_intr_handler(int irq, void *data)
 			continue;
 
 		if (val & BIT_ULL(42)) {
-			dev_err(pf->dev, "CQ%lld: error reading NIX_LF_CQ_OP_INT, NIX_LF_ERR_INT 0x%llx\n",
-				qidx, otx2_read64(pf, NIX_LF_ERR_INT));
+			netdev_err(pf->netdev, "CQ%lld: error reading NIX_LF_CQ_OP_INT, NIX_LF_ERR_INT 0x%llx\n",
+				   qidx, otx2_read64(pf, NIX_LF_ERR_INT));
 		} else {
 			if (val & BIT_ULL(NIX_CQERRINT_DOOR_ERR))
-				dev_err(pf->dev, "CQ%lld: Doorbell error",
-					qidx);
+				netdev_err(pf->netdev, "CQ%lld: Doorbell error",
+					   qidx);
 			if (val & BIT_ULL(NIX_CQERRINT_CQE_FAULT))
-				dev_err(pf->dev, "CQ%lld: Memory fault on CQE write to LLC/DRAM",
-					qidx);
+				netdev_err(pf->netdev, "CQ%lld: Memory fault on CQE write to LLC/DRAM",
+					   qidx);
 		}
 
 		schedule_work(&pf->reset_task);
@@ -1208,29 +1208,35 @@ static irqreturn_t otx2_q_intr_handler(int irq, void *data)
 			continue;
 
 		if (val & BIT_ULL(42)) {
-			dev_err(pf->dev, "SQ%lld: error reading NIX_LF_SQ_OP_INT, NIX_LF_ERR_INT 0x%llx\n",
-				qidx, otx2_read64(pf, NIX_LF_ERR_INT));
+			netdev_err(pf->netdev, "SQ%lld: error reading NIX_LF_SQ_OP_INT, NIX_LF_ERR_INT 0x%llx\n",
+				   qidx, otx2_read64(pf, NIX_LF_ERR_INT));
 		} else {
-			if (val & BIT_ULL(NIX_SQINT_LMT_ERR))
-				dev_err(pf->dev, "SQ%lld: LMT store error",
-					qidx);
+			if (val & BIT_ULL(NIX_SQINT_LMT_ERR)) {
+				netdev_err(pf->netdev, "SQ%lld: LMT store error NIX_LF_SQ_OP_ERR_DBG:0x%llx",
+					   qidx,
+					   otx2_read64(pf,
+						       NIX_LF_SQ_OP_ERR_DBG));
+				otx2_write64(pf, NIX_LF_SQ_OP_ERR_DBG,
+					     BIT_ULL(44));
+			}
 			if (val & BIT_ULL(NIX_SQINT_MNQ_ERR)) {
-				dev_err(pf->dev, "SQ%lld: Meta-descriptor enqueue error NIX_LF_MNQ_ERR_DGB:0x%llx\n",
-					qidx,
-					otx2_read64(pf, NIX_LF_MNQ_ERR_DBG));
+				netdev_err(pf->netdev, "SQ%lld: Meta-descriptor enqueue error NIX_LF_MNQ_ERR_DGB:0x%llx\n",
+					   qidx,
+					   otx2_read64(pf, NIX_LF_MNQ_ERR_DBG));
 				otx2_write64(pf, NIX_LF_MNQ_ERR_DBG,
 					     BIT_ULL(44));
 			}
 			if (val & BIT_ULL(NIX_SQINT_SEND_ERR)) {
-				dev_err(pf->dev, "SQ%lld: Send error, NIX_LF_SEND_ERR_DBG 0x%llx",
-					qidx,
-					otx2_read64(pf, NIX_LF_SEND_ERR_DBG));
+				netdev_err(pf->netdev, "SQ%lld: Send error, NIX_LF_SEND_ERR_DBG 0x%llx",
+					   qidx,
+					   otx2_read64(pf,
+						       NIX_LF_SEND_ERR_DBG));
 				otx2_write64(pf, NIX_LF_SEND_ERR_DBG,
 					     BIT_ULL(44));
 			}
 			if (val & BIT_ULL(NIX_SQINT_SQB_ALLOC_FAIL))
-				dev_err(pf->dev, "SQ%lld: SQB allocation failed",
-					qidx);
+				netdev_err(pf->netdev, "SQ%lld: SQB allocation failed",
+					   qidx);
 		}
 
 		schedule_work(&pf->reset_task);
@@ -1470,8 +1476,8 @@ static netdev_tx_t otx2_xmit(struct sk_buff *skb, struct net_device *netdev)
 	int qidx = skb_get_queue_mapping(skb);
 	struct netdev_queue *txq = netdev_get_tx_queue(netdev, qidx);
 
-	/* Check for minimum packet length */
-	if (skb->len <= ETH_HLEN) {
+	/* Check for minimum and maximum packet length */
+	if (skb->len <= ETH_HLEN || (skb->len > netdev->mtu + OTX2_ETH_HLEN)) {
 		dev_kfree_skb(skb);
 		return NETDEV_TX_OK;
 	}
@@ -2248,7 +2254,7 @@ static int otx2_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 
 	netdev->netdev_ops = &otx2_netdev_ops;
 
-	/* MTU range: 68 - 9190 */
+	/* MTU range: 64 - 9190 */
 	netdev->min_mtu = OTX2_MIN_MTU;
 	netdev->max_mtu = OTX2_MAX_MTU;
 
-- 
2.31.1

