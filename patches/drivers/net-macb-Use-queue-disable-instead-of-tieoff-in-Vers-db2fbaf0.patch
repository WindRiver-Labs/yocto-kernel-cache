From 693aae1fc04bfac49b2e582e6b8335518badd817 Mon Sep 17 00:00:00 2001
From: Harini Katakam <harini.katakam@xilinx.com>
Date: Fri, 31 Jan 2020 21:07:17 +0530
Subject: [PATCH 1094/1851] net: macb: Use queue disable instead of tieoff in
 Versal suspend

commit c46aa57aa468c8923adaee526ea79188a2bb4e22 from
https://github.com/Xilinx/linux-xlnx.git

Cadence IP version in Versal support individual queue disabling.
Make use of this new feature instead of queue tie-off. Background:
When WOL is enabled, we need RX enabled but DMA disabled because
there might be no access to memory for BDs or buffers due that
power domain being off. Also do not allocate tieoff descriptors for
Versal as they are no longer required.

Signed-off-by: Harini Katakam <harini.katakam@xilinx.com>
Signed-off-by: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/net/ethernet/cadence/macb.h      |  4 ++++
 drivers/net/ethernet/cadence/macb_main.c | 27 +++++++++++++++---------
 2 files changed, 21 insertions(+), 10 deletions(-)

diff --git a/drivers/net/ethernet/cadence/macb.h b/drivers/net/ethernet/cadence/macb.h
index e7baf533e57b..8d1654c8321a 100644
--- a/drivers/net/ethernet/cadence/macb.h
+++ b/drivers/net/ethernet/cadence/macb.h
@@ -580,6 +580,9 @@
 #define GEM_T2OFST_OFFSET			0 /* offset value */
 #define GEM_T2OFST_SIZE				7
 
+/* Bitfields in queue pointer registers */
+#define GEM_RBQP_DISABLE	0x1
+
 /* Offset for screener type 2 compare values (T2CMPOFST).
  * Note the offset is applied after the specified point,
  * e.g. GEM_T2COMPOFST_ETYPE denotes the EtherType field, so an offset
@@ -661,6 +664,7 @@
 #define MACB_CAPS_PARTIAL_STORE_FORWARD		0x00000800
 #define MACB_CAPS_WOL				0x00000200
 #define MACB_CAPS_NEED_TSUCLK			0x00001000
+#define MACB_CAPS_QUEUE_DISABLE			0x00002000
 #define MACB_CAPS_FIFO_MODE			0x10000000
 #define MACB_CAPS_GIGABIT_MODE_AVAILABLE	0x20000000
 #define MACB_CAPS_SG_DISABLED			0x40000000
diff --git a/drivers/net/ethernet/cadence/macb_main.c b/drivers/net/ethernet/cadence/macb_main.c
index 2e3d6d8d2b55..47bf50d81a1d 100644
--- a/drivers/net/ethernet/cadence/macb_main.c
+++ b/drivers/net/ethernet/cadence/macb_main.c
@@ -2088,12 +2088,14 @@ static int macb_alloc_consistent(struct macb *bp)
 		goto out_err;
 
 	/* Required for tie off descriptor for PM cases */
-	bp->rx_ring_tieoff = dma_alloc_coherent(&bp->pdev->dev,
-						macb_dma_desc_get_size(bp),
-						&bp->rx_ring_tieoff_dma,
-						GFP_KERNEL);
-	if (!bp->rx_ring_tieoff)
-		goto out_err;
+	if (!(bp->caps & MACB_CAPS_QUEUE_DISABLE)) {
+		bp->rx_ring_tieoff = dma_alloc_coherent(&bp->pdev->dev,
+							macb_dma_desc_get_size(bp),
+							&bp->rx_ring_tieoff_dma,
+							GFP_KERNEL);
+		if (!bp->rx_ring_tieoff)
+			goto out_err;
+	}
 
 	return 0;
 
@@ -2137,7 +2139,9 @@ static void gem_init_rings(struct macb *bp)
 
 		gem_rx_refill(queue);
 	}
-	macb_init_tieoff(bp);
+
+	if (!(bp->caps & MACB_CAPS_QUEUE_DISABLE))
+		macb_init_tieoff(bp);
 
 }
 
@@ -4247,7 +4251,7 @@ static const struct macb_config versal_config = {
 	.caps = MACB_CAPS_GIGABIT_MODE_AVAILABLE | MACB_CAPS_JUMBO |
 		MACB_CAPS_GEM_HAS_PTP | MACB_CAPS_BD_RD_PREFETCH |
 		MACB_CAPS_PCS |	MACB_CAPS_PARTIAL_STORE_FORWARD |
-		MACB_CAPS_WOL | MACB_CAPS_NEED_TSUCLK,
+		MACB_CAPS_WOL | MACB_CAPS_NEED_TSUCLK | MACB_CAPS_QUEUE_DISABLE,
 	.dma_burst_length = 16,
 	.clk_init = macb_clk_init,
 	.init = macb_init,
@@ -4553,8 +4557,11 @@ static int __maybe_unused macb_suspend(struct device *dev)
 		/* Tie off RX queues */
 		for (q = 0, queue = bp->queues; q < bp->num_queues;
 		     ++q, ++queue) {
-			queue_writel(queue, RBQP,
-				     lower_32_bits(bp->rx_ring_tieoff_dma));
+			if (bp->caps & MACB_CAPS_QUEUE_DISABLE)
+				queue_writel(queue, RBQP, GEM_RBQP_DISABLE);
+			else
+				queue_writel(queue, RBQP,
+					     lower_32_bits(bp->rx_ring_tieoff_dma));
 		}
 		ctrl = macb_readl(bp, NCR);
 		ctrl |= MACB_BIT(RE);
-- 
2.31.1

