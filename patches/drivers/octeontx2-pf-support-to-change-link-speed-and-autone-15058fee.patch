From e28caa2475fd459cdeebd7632202786a6651da4e Mon Sep 17 00:00:00 2001
From: Christina Jacob <cjacob@marvell.com>
Date: Fri, 19 Jul 2019 10:41:47 +0530
Subject: [PATCH 0249/1921] octeontx2-pf: support to change link speed and
 autoneg

Enables user to change configurations like speed, duplex mode,
autoneg of a network interface via ethtool -s option.

Change-Id: Ica5c1e5225449dd2b559d5439e168d1aad21a690
Signed-off-by: Christina Jacob <cjacob@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/13567
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_ethtool.c      | 40 +++++++++++++++++++
 1 file changed, 40 insertions(+)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
index 72bf8541fc83..2519540bd433 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
@@ -1018,6 +1018,45 @@ static int otx2_get_link_ksettings(struct net_device *netdev,
 	return 0;
 }
 
+static int otx2_set_link_ksettings(struct net_device *netdev,
+				   const struct ethtool_link_ksettings *cmd)
+{
+	struct otx2_nic *pfvf = netdev_priv(netdev);
+	struct cgx_set_link_mode_req *req;
+	struct cgx_set_link_mode_rsp *rsp;
+	int err = 0;
+
+	otx2_mbox_lock(&pfvf->mbox);
+	req = otx2_mbox_alloc_msg_cgx_set_link_mode(&pfvf->mbox);
+	if (!req) {
+		otx2_mbox_unlock(&pfvf->mbox);
+		return -EAGAIN;
+	}
+	req->args.speed = cmd->base.speed;
+	/*The full_duplex variable in linkinfo takes 1 for full duplex and 0
+	 * for half duplex. But the set_link_mode command in atf requires the
+	 * argument to map 1 for half duplex and 0 for full duplex. Toggling to
+	 * the current value in linkinfo for the purpose.
+	 */
+	if (cmd->base.duplex == DUPLEX_UNKNOWN)
+		req->args.duplex = pfvf->linfo.full_duplex ^ 0x1;
+	else
+		req->args.duplex = cmd->base.duplex ^ 0x1;
+	req->args.an =  cmd->base.autoneg;
+	req->args.ports = cmd->base.port;
+	req->args.flags = 0;
+
+	err =  otx2_sync_mbox_msg(&pfvf->mbox);
+	if (!err) {
+		rsp = (struct cgx_set_link_mode_rsp *)
+			otx2_mbox_get_rsp(&pfvf->mbox.mbox, 0, &req->hdr);
+		if (rsp->status)
+			err =  rsp->status;
+	}
+	otx2_mbox_unlock(&pfvf->mbox);
+	return err;
+}
+
 static int otx2_get_fecparam(struct net_device *netdev,
 			     struct ethtool_fecparam *fecparam)
 {
@@ -1117,6 +1156,7 @@ static struct ethtool_ops otx2_ethtool_ops = {
 	.get_msglevel		= otx2_get_msglevel,
 	.set_msglevel		= otx2_set_msglevel,
 	.get_link_ksettings     = otx2_get_link_ksettings,
+	.set_link_ksettings     = otx2_set_link_ksettings,
 	.get_pauseparam		= otx2_get_pauseparam,
 	.set_pauseparam		= otx2_set_pauseparam,
 	.get_fecparam		= otx2_get_fecparam,
-- 
2.31.1

