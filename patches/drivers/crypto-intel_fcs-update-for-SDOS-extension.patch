From bd838afa412d2175d7a8aafcef29f027152fa946 Mon Sep 17 00:00:00 2001
From: Richard Gong <richard.gong@intel.com>
Date: Mon, 12 Jul 2021 11:29:04 -0500
Subject: [PATCH 35/42] crypto: intel_fcs: update for SDOS extension

commit 3b6ee4f737d2fa63d868c094a6dfc0efc071d1b7 from
https://github.com/altera-opensource/linux-socfpga/commits/socfpga-5.4.124-lts

update for SDOS encryption/decryption extension.

Signed-off-by: Richard Gong <richard.gong@intel.com>
Signed-off-by: Siew Chin Lim <elly.siew.chin.lim@intel.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/crypto/intel_fcs.c           | 65 ++++++++++++++++++++++++++++
 include/uapi/linux/intel_fcs-ioctl.h | 31 +++++++++++++
 2 files changed, 96 insertions(+)

diff --git a/drivers/crypto/intel_fcs.c b/drivers/crypto/intel_fcs.c
index 7ab462d4a308..3708e97cb675 100644
--- a/drivers/crypto/intel_fcs.c
+++ b/drivers/crypto/intel_fcs.c
@@ -2225,6 +2225,71 @@ static long fcs_ioctl(struct file *file, unsigned int cmd,
 		fcs_close_services(priv, NULL, d_buf);
 		break;
 
+	case INTEL_FCS_DEV_SDOS_DATA_EXT:
+		if (copy_from_user(data, (void __user *)arg, sizeof(*data))) {
+			dev_err(dev, "failure on copy_from_user\n");
+			return -EFAULT;
+		}
+
+		sid = data->com_paras.data_sdos_ext.sid;
+		cid = data->com_paras.data_sdos_ext.cid;
+		in_sz = data->com_paras.data_sdos_ext.src_size;
+
+		s_buf = stratix10_svc_allocate_memory(priv->chan, in_sz);
+		if (!s_buf) {
+			dev_err(dev, "failed allocate source buf\n");
+			return -ENOMEM;
+		}
+
+		d_buf = stratix10_svc_allocate_memory(priv->chan, AES_CRYPT_CMD_MAX_SZ);
+		if (!d_buf) {
+			dev_err(dev, "failed allocate destation buf\n");
+			fcs_close_services(priv, s_buf, NULL);
+			return -ENOMEM;
+		}
+
+		memcpy(s_buf, data->com_paras.data_sdos_ext.src,
+		       data->com_paras.data_sdos_ext.src_size);
+
+		msg->command = COMMAND_FCS_SDOS_DATA_EXT;
+		msg->arg[0] = sid;
+		msg->arg[1] = cid;
+		msg->arg[2] = data->com_paras.data_sdos_ext.op_mode;
+		msg->payload = s_buf;
+		msg->payload_length = in_sz;
+		msg->payload_output = d_buf;
+		msg->payload_length_output = AES_CRYPT_CMD_MAX_SZ;
+		priv->client.receive_cb = fcs_attestation_callback;
+
+		ret = fcs_request_service(priv, (void *)msg,
+					  10 * FCS_REQUEST_TIMEOUT);
+		if (!ret && !priv->status) {
+			if (priv->size > AES_CRYPT_CMD_MAX_SZ) {
+				dev_err(dev, "returned size %d is incorrect\n",
+					priv->size);
+				fcs_close_services(priv, s_buf, d_buf);
+				return -EFAULT;
+			}
+
+			memcpy(data->com_paras.data_sdos_ext.dst,
+			       priv->kbuf, priv->size);
+			data->com_paras.data_sdos_ext.dst_size = priv->size;
+		} else {
+			data->com_paras.data_sdos_ext.dst = NULL;
+			data->com_paras.data_sdos_ext.dst_size = 0;
+		}
+
+		data->status = priv->status;
+
+		if (copy_to_user((void __user *)arg, data, sizeof(*data))) {
+			dev_err(dev, "failure on copy_to_user\n");
+			fcs_close_services(priv, s_buf, d_buf);
+			return -EFAULT;
+		}
+		fcs_close_services(priv, s_buf, d_buf);
+
+		break;
+
 	default:
 		dev_warn(dev, "shouldn't be here [0x%x]\n", cmd);
 		break;
diff --git a/include/uapi/linux/intel_fcs-ioctl.h b/include/uapi/linux/intel_fcs-ioctl.h
index 684a2c1d8105..c190f5de5009 100644
--- a/include/uapi/linux/intel_fcs-ioctl.h
+++ b/include/uapi/linux/intel_fcs-ioctl.h
@@ -365,6 +365,30 @@ struct fcs_random_number_gen_ext {
        uint32_t rng_sz;
 };
 
+/**
+ * struct fcs_sdos_data_ext - SDOS encryption/decryption
+ * @sid: session ID
+ * @cid: context ID
+ * @op_mode: SDOS operation mode
+ * 	1	encryption
+ * 	0	decryption
+ * @oid1: owner ID word 1, valid for date decryption only
+ * @oid2: owner ID word 2, valid for date decryption only
+ * @src: the virtual address of the input data
+ * @src_size: the size of the input data
+ * @dst: the virtual address of the output data
+ * dst_size: the size of the output data
+ */
+struct fcs_sdos_data_ext {
+	uint32_t sid;
+	uint32_t cid;
+	int op_mode;
+	void *src;
+	uint32_t src_size;
+	void *dst;
+	uint32_t dst_size;
+};
+
 /**
  * struct intel_fcs_dev_ioct: common structure passed to Linux
  *	kernel driver for all commands.
@@ -380,6 +404,7 @@ struct fcs_random_number_gen_ext {
  * @d_encryption: AES encryption (SDOS)
  * @d_decryption: AES decryption (SDOS)
  * @rn_gen: random number generator result
+ * @sdos_data_ext: SDOS ext data
  */
 struct intel_fcs_dev_ioctl {
 	/* used for return status code */
@@ -409,6 +434,7 @@ struct intel_fcs_dev_ioctl {
 		struct fcs_ecdsa_data		ecdsa_data;
 		struct fcs_ecdsa_sha2_data	ecdsa_sha2_data;
 		struct fcs_random_number_gen_ext	rn_gen_ext;
+		struct fcs_sdos_data_ext	data_sdos_ext;
 	} com_paras;
 };
 
@@ -471,6 +497,7 @@ enum intel_fcs_command_code {
 	INTEL_FCS_DEV_CRYPTO_ECDSA_GET_PUBLIC_KEY_CMD,
 	INTEL_FCS_DEV_CRYPTO_ECDH_REQUEST_CMD,
 	INTEL_FCS_DEV_RANDOM_NUMBER_GEN_EXT_CMD,
+	INTEL_FCS_DEV_SDOS_DATA_EXT_CMD,
 };
 
 #define INTEL_FCS_DEV_VERSION_REQUEST \
@@ -597,5 +624,9 @@ enum intel_fcs_command_code {
 	_IOWR(INTEL_FCS_IOCTL, \
 	      INTEL_FCS_DEV_RANDOM_NUMBER_GEN_EXT_CMD, struct intel_fcs_dev_ioctl)
 
+#define INTEL_FCS_DEV_SDOS_DATA_EXT \
+	_IOWR(INTEL_FCS_IOCTL, \
+	      INTEL_FCS_DEV_SDOS_DATA_EXT_CMD, struct intel_fcs_dev_ioctl)
+
 #endif
 
-- 
2.31.1

