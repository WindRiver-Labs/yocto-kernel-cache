From c68cca96346da7aa9c12d89f7b20c9174b20e627 Mon Sep 17 00:00:00 2001
From: Aleksey Makarov <amakarov@marvell.com>
Date: Tue, 18 Dec 2018 14:44:48 +0530
Subject: [PATCH 047/767] octeontx2-pf: Set irq affinity hints for CQ
 interrupts

commit 4657099b835249d526c37c20a26d7d783f30f4d0 from
git@git.assembla.com:cavium/WindRiver.linux.git

This patch sets IRQ affinity hints for CQ interrupts
i.e., CINTs.

Change-Id: Ic77576d7857cd30a5d4a421f0807cdd17eaad030
Signed-off-by: Aleksey Makarov <amakarov@marvell.com>
Signed-off-by: Geetha sowjanya <gakula@marvell.com>
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.c       | 41 +++++++++++++++++++
 .../marvell/octeontx2/nic/otx2_common.h       |  4 ++
 .../ethernet/marvell/octeontx2/nic/otx2_pf.c  | 29 ++++---------
 3 files changed, 53 insertions(+), 21 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
index d640c147f625..ebb23955ea75 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
@@ -761,3 +761,44 @@ void mbox_handler_msix_offset(struct otx2_nic *pfvf,
 	pfvf->hw.npa_msixoff = rsp->npa_msixoff;
 	pfvf->hw.nix_msixoff = rsp->nix_msixoff;
 }
+
+void otx2_free_cints(struct otx2_nic *pfvf, int n)
+{
+	struct otx2_qset *qset = &pfvf->qset;
+	struct otx2_hw *hw = &pfvf->hw;
+	int irq, qidx;
+
+	for (qidx = 0, irq = hw->nix_msixoff + NIX_LF_CINT_VEC_START;
+	     qidx < n;
+	     qidx++, irq++) {
+		int vector = pci_irq_vector(pfvf->pdev, irq);
+
+		irq_set_affinity_hint(vector, NULL);
+		free_cpumask_var(hw->affinity_mask[irq]);
+		free_irq(vector, &qset->napi[qidx]);
+	}
+}
+
+void otx2_set_cints_affinity(struct otx2_nic *pfvf)
+{
+	struct otx2_hw *hw = &pfvf->hw;
+	int vec, cpu, irq, cint;
+
+	vec = hw->nix_msixoff + NIX_LF_CINT_VEC_START;
+	cpu = cpumask_first(cpu_online_mask);
+
+	/* CQ interrupts */
+	for (cint = 0; cint < pfvf->hw.cint_cnt; cint++, vec++) {
+		if (!alloc_cpumask_var(&hw->affinity_mask[vec], GFP_KERNEL))
+			return;
+
+		cpumask_set_cpu(cpu, hw->affinity_mask[vec]);
+
+		irq = pci_irq_vector(pfvf->pdev, vec);
+		irq_set_affinity_hint(irq, hw->affinity_mask[vec]);
+
+		cpu = cpumask_next(cpu, cpu_online_mask);
+		if (unlikely(cpu >= nr_cpu_ids))
+			cpu = 0;
+	}
+}
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index 50c290b8ce04..b9be2450f832 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -283,6 +283,10 @@ static inline int rvu_get_pf(u16 pcifunc)
 	return (pcifunc >> RVU_PFVF_PF_SHIFT) & RVU_PFVF_PF_MASK;
 }
 
+/* MSI-X APIs */
+void otx2_free_cints(struct otx2_nic *pfvf, int n);
+void otx2_set_cints_affinity(struct otx2_nic *pfvf);
+
 /* RVU block related APIs */
 int otx2_attach_npa_nix(struct otx2_nic *pfvf);
 int otx2_detach_resources(struct mbox *mbox);
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index 61e781e01700..6a97f261eafe 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -294,23 +294,6 @@ static void otx2_disable_napi(struct otx2_nic *pf)
 	}
 }
 
-static void otx2_free_cints(struct otx2_nic *pfvf, int n)
-{
-	struct otx2_qset *qset = &pfvf->qset;
-	struct otx2_hw *hw = &pfvf->hw;
-	int irq, qidx;
-
-	for (qidx = 0, irq = hw->nix_msixoff + NIX_LF_CINT_VEC_START;
-	     qidx < n;
-	     qidx++, irq++) {
-		int vector = pci_irq_vector(pfvf->pdev, irq);
-
-		irq_set_affinity_hint(vector, NULL);
-		free_cpumask_var(hw->affinity_mask[irq]);
-		free_irq(vector, &qset->napi[qidx]);
-	}
-}
-
 static int otx2_init_hw_resources(struct otx2_nic *pf)
 {
 	struct otx2_hw *hw = &pf->hw;
@@ -465,6 +448,7 @@ static int otx2_open(struct net_device *netdev)
 	struct otx2_cq_poll *cq_poll = NULL;
 	struct otx2_qset *qset = &pf->qset;
 	int err = 0, qidx, vec;
+	char *irq_name;
 
 	netif_carrier_off(netdev);
 
@@ -521,12 +505,13 @@ static int otx2_open(struct net_device *netdev)
 	/* Register CQ IRQ handlers */
 	vec = pf->hw.nix_msixoff + NIX_LF_CINT_VEC_START;
 	for (qidx = 0; qidx < pf->hw.cint_cnt; qidx++) {
-		sprintf(&pf->hw.irq_name[vec * NAME_SIZE], "%s-rxtx-%d",
-			pf->netdev->name, qidx);
+		irq_name = &pf->hw.irq_name[vec * NAME_SIZE];
+
+		snprintf(irq_name, NAME_SIZE, "%s-rxtx-%d", pf->netdev->name,
+			 qidx);
 
 		err = request_irq(pci_irq_vector(pf->pdev, vec),
-				  otx2_cq_intr_handler, 0,
-				  &pf->hw.irq_name[vec * NAME_SIZE],
+				  otx2_cq_intr_handler, 0, irq_name,
 				  &qset->napi[qidx]);
 		if (err) {
 			dev_err(pf->dev,
@@ -548,6 +533,8 @@ static int otx2_open(struct net_device *netdev)
 		otx2_write64(pf, NIX_LF_CINTX_ENA_W1S(qidx), BIT_ULL(0));
 	}
 
+	otx2_set_cints_affinity(pf);
+
 	err = otx2_rxtx_enable(pf, true);
 	if (err)
 		goto err_free_cints;
-- 
2.31.1

