From bd79c7818026d16ab3d9e2d1e7aeac8a9016f380 Mon Sep 17 00:00:00 2001
From: Peter Swain <peter.swain@cavium.com>
Date: Tue, 3 Jul 2018 15:28:17 -0700
Subject: [PATCH 0402/1921] mmc: cavium: fix shutdown deadlock with active
 sd-card

Shutdown of mmc with an actively polling mmc_rescan can deadlock
on the mmc_serializer semaphore, as the active 1Hz polling (done
when the hardware has no GPIO card-present line) is not disabled
until the card is powered off. Both the polling and power-off
request require the semaphore, but as the shutdown method is not
brokered by the mmc/core infrastructure, it exposes a deadlock
no other interaction would trigger.

The situation can be reliably provoked when reboot is requested
while mmc-test module is active on a removable SD-card without a
private GPIO card-present line, but has also been seen in other
circumstances where the card's user is non-interruptible, like
mounted filesystems.

This semaphore prevents the mmc host hardware (controller and bus
signals) being used by multiple connected card slots concurrently.
On some Octeon platforms the bus signals are also shared with other
devices, hence the pluggable acquire/release functions.

Semaphore is held while a card slot has active state in the hardware,
and released when that state (timing, power, bus width, rca, etc) is
saved in software at end of transaction.

Device's shutdown method could be used to dismantle the polling,
(by host->caps &= ~MMC_CAP_NEEDS_POLL), but device-specific
shutdown/suspend methods are called too late to effect this teardown
before the general mmc infrastructure has caused the deadlock.

But there's one state transition which does not affect the shared
resources mmc_serializer is protecting: the set_ios(MMC_POWER_OFF)
transition which mmc_shutdown is trying to effect, which is initiated
before any device-specific entry points.

Exempting this _POWER_OFF from the acquire/release dance breaks the
deadlock.
Apart from tracking the state in host->powered, the only other change
needed is a check for !host->powered in the switch_val_changed()
test, because when set_ios() is called with _POWER_OFF, the other
elements of the state are no longer propagated to hardware.

Change-Id: I165ea2393e97746ff86e9f2f5edf7db8ad77bd3c
Signed-off-by: Peter Swain <peter.swain@cavium.com>
Reviewed-on: https://sj1git1.cavium.com/8528
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Reviewed-by: Chandrakala Chavva <cchavva@marvell.com>
Reviewed-by: Peter Swain <pswain@cavium.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/26896
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/mmc/host/cavium.c | 54 ++++++++++++++++++++++++---------------
 drivers/mmc/host/cavium.h |  1 +
 2 files changed, 34 insertions(+), 21 deletions(-)

diff --git a/drivers/mmc/host/cavium.c b/drivers/mmc/host/cavium.c
index b3912edd9c15..aa586e6644ba 100644
--- a/drivers/mmc/host/cavium.c
+++ b/drivers/mmc/host/cavium.c
@@ -225,11 +225,14 @@ static void do_switch(struct cvm_mmc_host *host, u64 emm_switch)
 	check_switch_errors(host);
 }
 
+/* need to change hardware state to match software requirements? */
 static bool switch_val_changed(struct cvm_mmc_slot *slot, u64 new_val)
 {
 	/* Match BUS_ID, HS_TIMING, BUS_WIDTH, POWER_CLASS, CLK_HI, CLK_LO */
 	u64 match = 0x3001070fffffffffull;
 
+	if (!slot->host->powered)
+		return true;
 	return (slot->cached_switch & match) != (new_val & match);
 }
 
@@ -252,19 +255,20 @@ static void cvm_mmc_reset_bus(struct cvm_mmc_slot *slot)
 	struct cvm_mmc_host *host = slot->host;
 	u64 emm_switch, wdog;
 
-	emm_switch = readq(slot->host->base + MIO_EMM_SWITCH(host));
+	emm_switch = readq(host->base + MIO_EMM_SWITCH(host));
 	emm_switch &= ~(MIO_EMM_SWITCH_EXE | MIO_EMM_SWITCH_ERR0 |
 			MIO_EMM_SWITCH_ERR1 | MIO_EMM_SWITCH_ERR2);
 	set_bus_id(&emm_switch, slot->bus_id);
 
-	wdog = readq(slot->host->base + MIO_EMM_WDOG(host));
-	do_switch(slot->host, emm_switch);
+	wdog = readq(host->base + MIO_EMM_WDOG(host));
+	do_switch(host, emm_switch);
 
 	slot->cached_switch = emm_switch;
+	host->powered = true;
 
 	msleep(20);
 
-	writeq(wdog, slot->host->base + MIO_EMM_WDOG(host));
+	writeq(wdog, host->base + MIO_EMM_WDOG(host));
 }
 
 /* Switch to another slot if needed */
@@ -287,6 +291,7 @@ static void cvm_mmc_switch_to(struct cvm_mmc_slot *slot)
 	emm_switch = slot->cached_switch;
 	set_bus_id(&emm_switch, slot->bus_id);
 	do_switch(host, emm_switch);
+	host->powered = true;
 
 	emm_sample = FIELD_PREP(MIO_EMM_SAMPLE_CMD_CNT, slot->cmd_cnt) |
 		     FIELD_PREP(MIO_EMM_SAMPLE_DAT_CNT, slot->dat_cnt);
@@ -828,28 +833,27 @@ static void cvm_mmc_set_ios(struct mmc_host *mmc, struct mmc_ios *ios)
 	int clk_period = 0, power_class = 10, bus_width = 0;
 	u64 clock, emm_switch;
 
+	if (ios->power_mode == MMC_POWER_OFF) {
+		if (host->powered) {
+			cvm_mmc_reset_bus(slot);
+			if (host->global_pwr_gpiod)
+				host->set_shared_power(host, 0);
+			else if (!IS_ERR(mmc->supply.vmmc))
+				mmc_regulator_set_ocr(mmc, mmc->supply.vmmc, 0);
+			host->powered = false;
+		}
+		set_wdog(slot, 0);
+		return;
+	}
+
 	host->acquire_bus(host);
 	cvm_mmc_switch_to(slot);
 
-	/* Set the power state */
-	switch (ios->power_mode) {
-	case MMC_POWER_ON:
-		break;
-
-	case MMC_POWER_OFF:
-		cvm_mmc_reset_bus(slot);
-		if (host->global_pwr_gpiod)
-			host->set_shared_power(host, 0);
-		else if (!IS_ERR(mmc->supply.vmmc))
-			mmc_regulator_set_ocr(mmc, mmc->supply.vmmc, 0);
-		break;
-
-	case MMC_POWER_UP:
+	if (ios->power_mode == MMC_POWER_UP) {
 		if (host->global_pwr_gpiod)
 			host->set_shared_power(host, 1);
 		else if (!IS_ERR(mmc->supply.vmmc))
 			mmc_regulator_set_ocr(mmc, mmc->supply.vmmc, ios->vdd);
-		break;
 	}
 
 	/* Convert bus width to HW definition */
@@ -892,6 +896,7 @@ static void cvm_mmc_set_ios(struct mmc_host *mmc, struct mmc_ios *ios)
 	set_wdog(slot, 0);
 	do_switch(host, emm_switch);
 	slot->cached_switch = emm_switch;
+	host->powered = true;
 out:
 	host->release_bus(host);
 }
@@ -935,6 +940,7 @@ static int cvm_mmc_init_lowlevel(struct cvm_mmc_slot *slot)
 	do_switch(host, emm_switch);
 
 	slot->cached_switch = emm_switch;
+	host->powered = true;
 
 	/*
 	 * Set watchdog timeout value and default reset value
@@ -961,8 +967,14 @@ static int cvm_mmc_of_parse(struct device *dev, struct cvm_mmc_slot *slot)
 		return ret;
 	}
 
-	if (id >= CAVIUM_MAX_MMC || slot->host->slot[id]) {
-		dev_err(dev, "Invalid reg property on %pOF\n", node);
+	if (id >= CAVIUM_MAX_MMC) {
+		dev_err(dev, "Invalid reg=<%d> property on %pOF\n", id, node);
+		return -EINVAL;
+	}
+
+	if (slot->host->slot[id]) {
+		dev_err(dev, "Duplicate reg=<%d> property on %pOF\n",
+			id, node);
 		return -EINVAL;
 	}
 
diff --git a/drivers/mmc/host/cavium.h b/drivers/mmc/host/cavium.h
index f66b55ba884d..539da17b27ce 100644
--- a/drivers/mmc/host/cavium.h
+++ b/drivers/mmc/host/cavium.h
@@ -84,6 +84,7 @@ struct cvm_mmc_host {
 
 	struct gpio_desc *global_pwr_gpiod;
 	atomic_t shared_power_users;
+	bool powered;
 
 	struct cvm_mmc_slot *slot[CAVIUM_MAX_MMC];
 	struct platform_device *slot_pdev[CAVIUM_MAX_MMC];
-- 
2.31.1

