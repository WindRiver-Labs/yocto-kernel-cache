From 8eb4e0bea5cdc1ec45b4d70201660fca02cca3bd Mon Sep 17 00:00:00 2001
From: Srujana Challa <schalla@marvell.com>
Date: Mon, 4 May 2020 16:45:32 +0530
Subject: [PATCH 0493/1921] octeontx2-af: sync cpt mbox code with
 linux-4.14.76-devel

Change-Id: I03779c5c5de06b6c165d6cb39bc4fe213a0543f9
Signed-off-by: Srujana Challa <schalla@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/27948
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/mbox.h  |  1 +
 .../ethernet/marvell/octeontx2/af/rvu_cpt.c   | 71 ++++++++-----------
 2 files changed, 31 insertions(+), 41 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
index 23a384ad7306..1aa7b2bcea10 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
@@ -1571,6 +1571,7 @@ struct cpt_inline_ipsec_cfg_msg {
 	u8 enable;
 	u8 slot;
 	u8 dir;
+	u8 sso_pf_func_ovrd;
 	u16 sso_pf_func; /* inbound path SSO_PF_FUNC */
 	u16 nix_pf_func; /* outbound path NIX_PF_FUNC */
 };
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
index f29084b0b3e5..551c1652d852 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
@@ -281,9 +281,6 @@ int rvu_mbox_handler_cpt_lf_alloc(struct rvu *rvu,
 		rvu_write64(rvu, blkaddr, CPT_AF_LFX_CTL2(cptlf), val);
 	}
 
-	/* Set SSO_PF_FUNC_OVRD for inline IPSec */
-	rvu_write64(rvu, blkaddr, CPT_AF_ECO, 0x1);
-
 	rsp->crypto_eng_grp = crypto_eng_grp;
 	return 0;
 }
@@ -321,13 +318,13 @@ int rvu_mbox_handler_cpt_lf_free(struct rvu *rvu, struct msg_req *req,
 }
 
 static int cpt_inline_ipsec_cfg_inbound(struct rvu *rvu, int blkaddr, u8 cptlf,
-					u8 enable, u16 sso_pf_func,
-					u16 nix_pf_func)
+					struct cpt_inline_ipsec_cfg_msg *req)
 {
+	u16 sso_pf_func = req->sso_pf_func;
 	u64 val;
 
 	val = rvu_read64(rvu, blkaddr, CPT_AF_LFX_CTL(cptlf));
-	if (enable && (val & BIT_ULL(16))) {
+	if (req->enable && (val & BIT_ULL(16))) {
 		/* IPSec inline outbound path is already enabled for a given
 		 * CPT LF, HRM states that inline inbound & outbound paths
 		 * must not be enabled at the same time for a given CPT LF
@@ -339,7 +336,7 @@ static int cpt_inline_ipsec_cfg_inbound(struct rvu *rvu, int blkaddr, u8 cptlf,
 		return CPT_AF_ERR_SSO_PF_FUNC_INVALID;
 
 	/* Set PF_FUNC_INST */
-	if (enable)
+	if (req->enable)
 		val |= BIT_ULL(9);
 	else
 		val &= ~BIT_ULL(9);
@@ -349,21 +346,25 @@ static int cpt_inline_ipsec_cfg_inbound(struct rvu *rvu, int blkaddr, u8 cptlf,
 		/* Set SSO_PF_FUNC */
 		val = rvu_read64(rvu, blkaddr, CPT_AF_LFX_CTL2(cptlf));
 		val |= (u64)sso_pf_func << 32;
-		val |= (u64)nix_pf_func << 48;
+		val |= (u64)req->nix_pf_func << 48;
 		rvu_write64(rvu, blkaddr, CPT_AF_LFX_CTL2(cptlf), val);
 	}
+	if (req->sso_pf_func_ovrd)
+		/* Set SSO_PF_FUNC_OVRD for inline IPSec */
+		rvu_write64(rvu, blkaddr, CPT_AF_ECO, 0x1);
+
 
 	return 0;
 }
 
-static int cpt_inline_ipsec_cfg_outbound(struct rvu *rvu, int blkaddr,
-					 u8 cptlf, u8 enable,
-					 u16 nix_pf_func)
+static int cpt_inline_ipsec_cfg_outbound(struct rvu *rvu, int blkaddr, u8 cptlf,
+					 struct cpt_inline_ipsec_cfg_msg *req)
 {
+	u16 nix_pf_func = req->nix_pf_func;
 	u64 val;
 
 	val = rvu_read64(rvu, blkaddr, CPT_AF_LFX_CTL(cptlf));
-	if (enable && (val & BIT_ULL(9))) {
+	if (req->enable && (val & BIT_ULL(9))) {
 		/* IPSec inline inbound path is already enabled for a given
 		 * CPT LF, HRM states that inline inbound & outbound paths
 		 * must not be enabled at the same time for a given CPT LF
@@ -376,7 +377,7 @@ static int cpt_inline_ipsec_cfg_outbound(struct rvu *rvu, int blkaddr,
 		return CPT_AF_ERR_NIX_PF_FUNC_INVALID;
 
 	/* Set PF_FUNC_INST */
-	if (enable)
+	if (req->enable)
 		val |= BIT_ULL(16);
 	else
 		val &= ~BIT_ULL(16);
@@ -414,20 +415,14 @@ int rvu_mbox_handler_cpt_inline_ipsec_cfg(struct rvu *rvu,
 
 	switch (req->dir) {
 	case CPT_INLINE_INBOUND:
-		ret = cpt_inline_ipsec_cfg_inbound(rvu, blkaddr, cptlf,
-						   req->enable,
-						   req->sso_pf_func,
-						   req->nix_pf_func);
-	break;
+		ret = cpt_inline_ipsec_cfg_inbound(rvu, blkaddr, cptlf, req);
+		break;
 
 	case CPT_INLINE_OUTBOUND:
-		ret = cpt_inline_ipsec_cfg_outbound(rvu, blkaddr, cptlf,
-						    req->enable,
-						    req->nix_pf_func);
-	break;
+		ret = cpt_inline_ipsec_cfg_outbound(rvu, blkaddr, cptlf, req);
+		break;
 
 	default:
-
 		return CPT_AF_ERR_PARAM;
 	}
 
@@ -472,26 +467,19 @@ int rvu_mbox_handler_cpt_rd_wr_register(struct rvu *rvu,
 	rsp->ret_val = req->ret_val;
 	rsp->is_write = req->is_write;
 
-	if (req->hdr.pcifunc & RVU_PFVF_FUNC_MASK) {
-		/* Registers that can be accessed from VF */
-		switch (req->reg_offset & 0xFF000) {
-		case CPT_AF_LFX_CTL(0):
-			offs = req->reg_offset & 0xFFF;
-			if (offs % 8)
-				goto error;
-			lf = offs >> 3;
-		break;
-
-		default:
+	/* Registers that can be accessed from PF/VF */
+	if ((req->reg_offset & 0xFF000) ==  CPT_AF_LFX_CTL(0) ||
+	    (req->reg_offset & 0xFF000) ==  CPT_AF_LFX_CTL2(0)) {
+		offs = req->reg_offset & 0xFFF;
+		if (offs % 8)
 			goto error;
-		}
-
+		lf = offs >> 3;
 		block = &rvu->hw->block[blkaddr];
 		num_lfs = rvu_get_rsrc_mapcount(
 				rvu_get_pfvf(rvu, req->hdr.pcifunc),
 				block->addr);
 		if (lf >= num_lfs)
-			/* Slot is not valid for that VF */
+			/* Slot is not valid for that PF/VF */
 			goto error;
 
 		/* Need to translate CPT LF slot to global number because
@@ -505,7 +493,7 @@ int rvu_mbox_handler_cpt_rd_wr_register(struct rvu *rvu,
 		req->reg_offset &= 0xFF000;
 		req->reg_offset += lf << 3;
 		rsp->reg_offset = req->reg_offset;
-	} else {
+	} else if (!(req->hdr.pcifunc & RVU_PFVF_FUNC_MASK)) {
 		/* Registers that can be accessed from PF */
 		switch (req->reg_offset & 0xFF000) {
 		case CPT_AF_PF_FUNC:
@@ -513,7 +501,7 @@ int rvu_mbox_handler_cpt_rd_wr_register(struct rvu *rvu,
 		case CPT_AF_CONSTANTS1:
 			if (req->reg_offset & 0xFFF)
 				goto error;
-		break;
+			break;
 
 		case CPT_AF_EXEX_STS(0):
 		case CPT_AF_EXEX_CTL(0):
@@ -522,11 +510,12 @@ int rvu_mbox_handler_cpt_rd_wr_register(struct rvu *rvu,
 			offs = req->reg_offset & 0xFFF;
 			if ((offs % 8) || (offs >> 3) > 127)
 				goto error;
-		break;
-
+			break;
 		default:
 			goto error;
 		}
+	} else {
+		goto error;
 	}
 
 	if (req->is_write)
-- 
2.31.1

