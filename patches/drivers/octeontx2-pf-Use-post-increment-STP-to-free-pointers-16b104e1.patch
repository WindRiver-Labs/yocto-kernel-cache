From a26cedf051882c8fcae7d93eb99315d6f079700c Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Fri, 16 Aug 2019 16:10:37 +0530
Subject: [PATCH 0262/1921] octeontx2-pf: Use post increment STP to free
 pointers to Aura

Freeing buffer pointers to Aura needs a 128bit atomic store
to two 64bit registers. A regular STP can get fissioned into
two separate 64bit stores which will be ignored by Aura and
buffer pointer will be lost. Hence use a post increment STP.

Change-Id: I0e91250f16cfe875acdb1d2c1d051ddf90cf75de
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/14426
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.h       | 21 +++++--------------
 1 file changed, 5 insertions(+), 16 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index 607bfe4ce078..1039348e2eee 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -385,17 +385,10 @@ static inline void otx2_mbox_unlock(struct mbox *mbox)
 #define otx2_low(high, low)    (low)
 #endif
 
-static inline void otx2_write128(__uint128_t val, void __iomem *addr)
+static inline void otx2_write128(u64 lo, u64 hi, void __iomem *addr)
 {
-	__uint128_t *__addr = (__force __uint128_t *)addr;
-	u64 h, l;
-
-	otx2_low(h, l) = (__force u64)cpu_to_le64(val);
-	otx2_high(h, l) = (__force u64)cpu_to_le64(val >> 64);
-
-	asm volatile("stp %x[x0], %x[x1], %x[p1]"
-		: [p1]"=Ump"(*__addr)
-		: [x0]"r"(l), [x1]"r"(h));
+	asm volatile("stp %x[x0], %x[x1], [%x[p1],#0]!"
+		::[x0]"r"(lo), [x1]"r"(hi), [p1]"r"(addr));
 }
 
 static inline __uint128_t otx2_read128(const void __iomem *addr)
@@ -425,12 +418,8 @@ static inline u64 otx2_aura_allocptr(struct otx2_nic *pfvf, int aura)
 static inline void otx2_aura_freeptr(struct otx2_nic *pfvf,
 				     int aura, s64 buf)
 {
-	__uint128_t val;
-
-	val = (__uint128_t)buf;
-	val |= ((__uint128_t)aura | BIT_ULL(63)) << 64;
-
-	otx2_write128(val, pfvf->reg_base + NPA_LF_AURA_OP_FREE0);
+	otx2_write128((u64)buf, (u64)aura | BIT_ULL(63),
+		      pfvf->reg_base + NPA_LF_AURA_OP_FREE0);
 }
 
 /* Update page ref count */
-- 
2.31.1

