From 837281a9b6d9f01de0f65a7581d9b3549b0fe6a3 Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Wed, 3 Apr 2019 11:41:54 +0530
Subject: [PATCH 115/767] octeontx2-pf: Fix receive buffer address handling

commit da7cbbc7b6b1ac72a165885b693418d9edbe69b1 from
git@git.assembla.com:cavium/WindRiver.linux.git

For packets spanning across multiple buffers, except
for the first one rest all buffer start addresses are
incorrectly set at 'payload start - 128' bytes. This
patch fixes that and also got rid off 'apad' based
address adjustments. Since APAD is disabled HW will
always DMA the packet from 0th offset, so this is not
needed.

Change-Id: I56b40c2dc9a168a0ab789435c7b4510bbd223622
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/nic/otx2_txrx.c   | 12 +++++-------
 1 file changed, 5 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
index 14c13a72b6cd..8e24b9879017 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
@@ -145,18 +145,17 @@ static void otx2_skb_add_frag(struct otx2_nic *pfvf,
 	struct page *page;
 	void *va;
 
-	iova -= OTX2_HEAD_ROOM;
 	va = phys_to_virt(otx2_iova_to_phys(pfvf->iommu_domain, iova));
 	page = virt_to_page(va);
 	skb_add_rx_frag(skb, skb_shinfo(skb)->nr_frags, page,
 			va - page_address(page), len, RCV_FRAG_LEN);
 
-	dma_unmap_page_attrs(pfvf->dev, iova, RCV_FRAG_LEN,
+	dma_unmap_page_attrs(pfvf->dev, iova - OTX2_HEAD_ROOM, RCV_FRAG_LEN,
 			     DMA_FROM_DEVICE, DMA_ATTR_SKIP_CPU_SYNC);
 }
 
 static inline struct sk_buff *
-otx2_get_rcv_skb(struct otx2_nic *pfvf, u64 iova, int len, int apad)
+otx2_get_rcv_skb(struct otx2_nic *pfvf, u64 iova, int len)
 {
 	struct sk_buff *skb;
 	void *va;
@@ -169,10 +168,10 @@ otx2_get_rcv_skb(struct otx2_nic *pfvf, u64 iova, int len, int apad)
 		return NULL;
 	}
 
-	skb_reserve(skb, apad + OTX2_HEAD_ROOM);
+	skb_reserve(skb, OTX2_HEAD_ROOM);
 	skb_put(skb, len);
 
-	dma_unmap_page_attrs(pfvf->dev, iova - apad, RCV_FRAG_LEN,
+	dma_unmap_page_attrs(pfvf->dev, iova, RCV_FRAG_LEN,
 			     DMA_FROM_DEVICE, DMA_ATTR_SKIP_CPU_SYNC);
 	prefetch(skb->data);
 	return skb;
@@ -231,8 +230,7 @@ static void otx2_rcv_pkt_handler(struct otx2_nic *pfvf,
 			 * bytes after which packet data starts.
 			 */
 			if (!skb)
-				skb = otx2_get_rcv_skb(pfvf, *iova,
-						       len, *iova & 0x07);
+				skb = otx2_get_rcv_skb(pfvf, *iova, len);
 			else
 				otx2_skb_add_frag(pfvf, skb, *iova, len);
 			iova++;
-- 
2.31.1

