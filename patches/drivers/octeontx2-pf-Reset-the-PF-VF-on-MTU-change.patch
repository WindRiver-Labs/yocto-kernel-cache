From baf62557d141aba0724ce2e4f5daece8842c676d Mon Sep 17 00:00:00 2001
From: Geetha sowjanya <gakula@marvell.com>
Date: Wed, 25 Sep 2019 17:22:07 +0530
Subject: [PATCH 355/767] octeontx2-pf: Reset the PF/VF on MTU change

commit f511c212d5166756041444359251afff023f208b from
git@git.assembla.com:cavium/WindRiver.linux.git

Changing the MTU for high to low during packet transmission may
lead to SMQ meta-descriptor enqueue error due to miss match in packet
length and configured SMQ MAXLEN.

Hence, reset the PF/VF inorder to flush SMQ before configuring new MTU.

Change-Id: Icaa98653781907d9297431fc6a0b1d466d09b3e2
Signed-off-by: Geetha sowjanya <gakula@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/16447
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.c       | 17 --------------
 .../marvell/octeontx2/nic/otx2_common.h       |  1 -
 .../ethernet/marvell/octeontx2/nic/otx2_pf.c  | 18 +++++++++++++++
 .../ethernet/marvell/octeontx2/nic/otx2_vf.c  | 23 ++++++++++++++++++-
 4 files changed, 40 insertions(+), 19 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
index c4d90b455fd0..2d5ef65d40c2 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
@@ -213,23 +213,6 @@ int otx2_hw_set_mtu(struct otx2_nic *pfvf, int mtu)
 	return err;
 }
 
-int otx2_change_mtu(struct net_device *netdev, int new_mtu)
-{
-	struct otx2_nic *pfvf = netdev_priv(netdev);
-	int err;
-
-	if (netif_running(netdev)) {
-		err = otx2_hw_set_mtu(pfvf, new_mtu);
-		if (err)
-			return err;
-	}
-	netdev_info(netdev, "Changing MTU from %d to %d\n",
-		    netdev->mtu, new_mtu);
-	netdev->mtu = new_mtu;
-	return 0;
-}
-EXPORT_SYMBOL(otx2_change_mtu);
-
 int otx2_set_flowkey_cfg(struct otx2_nic *pfvf)
 {
 	struct otx2_rss_info *rss = &pfvf->hw.rss_info;
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index 3a819104d46d..c6607327b3ea 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -541,7 +541,6 @@ void otx2_set_cints_affinity(struct otx2_nic *pfvf);
 
 int otx2_hw_set_mac_addr(struct otx2_nic *pfvf, struct net_device *netdev);
 int otx2_set_mac_address(struct net_device *netdev, void *p);
-int otx2_change_mtu(struct net_device *netdev, int new_mtu);
 int otx2_hw_set_mtu(struct otx2_nic *pfvf, int mtu);
 void otx2_tx_timeout(struct net_device *netdev);
 void otx2_get_mac_from_af(struct net_device *netdev);
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index 1a0f08be5a33..b13807f0b445 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -44,6 +44,24 @@ enum {
 	TYPE_PFVF,
 };
 
+static int otx2_change_mtu(struct net_device *netdev, int new_mtu)
+{
+	bool if_up = netif_running(netdev);
+	int err = 0;
+
+	if (if_up)
+		otx2_stop(netdev);
+
+	netdev_info(netdev, "Changing MTU from %d to %d\n",
+		    netdev->mtu, new_mtu);
+	netdev->mtu = new_mtu;
+
+	if (if_up)
+		err = otx2_open(netdev);
+
+	return err;
+}
+
 static void otx2_disable_flr_me_intr(struct otx2_nic *pf)
 {
 	int irq, vfs = pf->total_vfs;
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
index 777085f613d2..322d047d306d 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
@@ -38,6 +38,27 @@ enum {
 	RVU_VF_INT_VEC_MBOX = 0x0,
 };
 
+static int otx2vf_open(struct net_device *netdev);
+static int otx2vf_stop(struct net_device *netdev);
+
+static int otx2vf_change_mtu(struct net_device *netdev, int new_mtu)
+{
+	bool if_up = netif_running(netdev);
+	int err = 0;
+
+	if (if_up)
+		otx2vf_stop(netdev);
+
+	netdev_info(netdev, "Changing MTU from %d to %d\n",
+		    netdev->mtu, new_mtu);
+	netdev->mtu = new_mtu;
+
+	if (if_up)
+		err = otx2vf_open(netdev);
+
+	return err;
+}
+
 static void otx2vf_process_vfaf_mbox_msg(struct otx2_nic *vf,
 					 struct mbox_msghdr *msg)
 {
@@ -432,7 +453,7 @@ static const struct net_device_ops otx2vf_netdev_ops = {
 	.ndo_stop = otx2vf_stop,
 	.ndo_start_xmit = otx2vf_xmit,
 	.ndo_set_mac_address = otx2_set_mac_address,
-	.ndo_change_mtu = otx2_change_mtu,
+	.ndo_change_mtu = otx2vf_change_mtu,
 	.ndo_get_stats64 = otx2_get_stats64,
 	.ndo_tx_timeout = otx2_tx_timeout,
 	.ndo_features_check = otx2_features_check,
-- 
2.31.1

