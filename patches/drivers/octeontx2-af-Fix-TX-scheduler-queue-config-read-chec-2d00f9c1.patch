From 409bbc814e4e485a33b76bc75be5ee0311a7b2b3 Mon Sep 17 00:00:00 2001
From: Subbaraya Sundeep <sbhatta@marvell.com>
Date: Wed, 2 Jun 2021 20:29:43 +0530
Subject: [PATCH 1581/1921] octeontx2-af: Fix TX scheduler queue config read
 check

During TX scheduler queue config read request
both the given register and scheduler queue number
needs to be checked for valid values from mailbox
caller. If register is valid then scheduler queue
number is not checked for valid value by mistake.
This patch fixes that. Also bits other than register
offset and scheduler queue number are masked out
while reading or writing that register.

Fixes: 746478c32827 ("octeontx2-af: Update NIX_TXSCHQ_CONFIG mbox")
Change-Id: Iac89d2e5b51040e0d72b80c1566d00094ea01b96
Signed-off-by: Subbaraya Sundeep <sbhatta@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/53709
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
index 8c854b9a9cb3..8dc29af02a82 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
@@ -2214,6 +2214,11 @@ static void nix_tl1_default_cfg(struct rvu *rvu, struct nix_hw *nix_hw,
 	pfvf_map[schq] = TXSCH_SET_FLAG(pfvf_map[schq], NIX_TXSCHQ_CFG_DONE);
 }
 
+/* Register offset - [15:0]
+ * Scheduler Queue number - [25:16]
+ */
+#define NIX_TX_SCHQ_MASK	GENMASK_ULL(25, 0)
+
 static int nix_txschq_cfg_read(struct rvu *rvu, struct nix_hw *nix_hw,
 			       int blkaddr, struct nix_txschq_config *req,
 			       struct nix_txschq_config *rsp)
@@ -2225,8 +2230,9 @@ static int nix_txschq_cfg_read(struct rvu *rvu, struct nix_hw *nix_hw,
 	rvu_nix_txsch_lock(nix_hw);
 	for (idx = 0; idx < req->num_regs; idx++) {
 		reg = req->reg[idx];
+		reg &= NIX_TX_SCHQ_MASK;
 		schq = TXSCHQ_IDX(reg, TXSCHQ_IDX_SHIFT);
-		if (!rvu_check_valid_reg(TXSCHQ_HWREGMAP, req->lvl, reg) &&
+		if (!rvu_check_valid_reg(TXSCHQ_HWREGMAP, req->lvl, reg) ||
 		    !is_valid_txschq(rvu, blkaddr, req->lvl, pcifunc, schq)) {
 			rvu_nix_txsch_unlock(nix_hw);
 			return NIX_AF_INVAL_TXSCHQ_CFG;
@@ -2311,6 +2317,7 @@ int rvu_mbox_handler_nix_txschq_cfg(struct rvu *rvu,
 	rvu_nix_txsch_lock(nix_hw);
 	for (idx = 0; idx < req->num_regs; idx++) {
 		reg = req->reg[idx];
+		reg &= NIX_TX_SCHQ_MASK;
 		regval = req->regval[idx];
 		schq_regbase = reg & 0xFFFF;
 		val_mask = req->regval_mask[idx];
-- 
2.31.1

