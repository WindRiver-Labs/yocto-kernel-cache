From d7d8040863ebd5d2566a7250aa7ab284dc83f716 Mon Sep 17 00:00:00 2001
From: Wendy Liang <wendy.liang@xilinx.com>
Date: Tue, 4 Aug 2020 11:34:16 -0700
Subject: [PATCH 1498/1851] misc: xilinx-ai-engine: Add function to enquire if
 a partition is available

commit 4dc64a65bf4458d4946b55bbd78e7f75980ca718 from
https://github.com/Xilinx/linux-xlnx.git

Add a function which is available to other kernel module to enquire if a
partition is available. We have request and release partition functions
available, however, the release function is to reduce the reference count,
it is not a synchronous call to release the resource of the partition.
And thus, it needs a function to check if a partition is actually
released.

Signed-off-by: Wendy Liang <wendy.liang@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/misc/xilinx-ai-engine/ai-engine-dev.c | 46 +++++++++++++++++++
 include/linux/xlnx-ai-engine.h                |  6 +++
 2 files changed, 52 insertions(+)

diff --git a/drivers/misc/xilinx-ai-engine/ai-engine-dev.c b/drivers/misc/xilinx-ai-engine/ai-engine-dev.c
index 25c2e3cfcacb..a148ab87f0d1 100644
--- a/drivers/misc/xilinx-ai-engine/ai-engine-dev.c
+++ b/drivers/misc/xilinx-ai-engine/ai-engine-dev.c
@@ -494,6 +494,52 @@ static struct aie_partition *aie_class_find_partition_from_id(u32 partition_id)
 	return dev_to_aiepart(dev);
 }
 
+/**
+ * aie_partition_is_available() - Check if an AI engine partition is available
+ * @req: AI engine partition requesting arguments
+ * @return: true if the AI engine partition is not in use, otherwise, false
+ *
+ * This function looks up the AI engine class devices to find the AI engine
+ * partition whose partition ID matches the given partition ID in @req. If
+ * the partition can be found, if will check if the partition is in use.
+ *
+ * In case the AI engine release function is called from kernel context, the
+ * release() will be scheduled when the AI engine partition reference count is
+ * reduced to 0 instead of get called synchronously, and thus, this is a helper
+ * function for another kernel module to check if the partitions is released
+ * after calling release function from kernel context
+ *
+ * However, if closing the partition is from user context, it will not return
+ * until the release is complete when there is no reference to the AI engine
+ * partition file. In this case, user doesn't need to call this function to
+ * check if the partition is released.
+ */
+bool aie_partition_is_available(struct aie_partition_req *req)
+{
+	struct aie_partition *apart;
+	int ret;
+
+	if (!req)
+		return false;
+
+	apart = aie_class_find_partition_from_id(req->partition_id);
+	if (!apart)
+		return false;
+
+	ret = mutex_lock_interruptible(&apart->mlock);
+	if (ret)
+		return false;
+
+	if (apart->status & XAIE_PART_STATUS_INUSE) {
+		mutex_unlock(&apart->mlock);
+		return false;
+	}
+
+	mutex_unlock(&apart->mlock);
+	return true;
+}
+EXPORT_SYMBOL_GPL(aie_partition_is_available);
+
 /**
  * aie_partition_request() - Request an AI engine partition
  * @req: AI engine partition requesting arguments
diff --git a/include/linux/xlnx-ai-engine.h b/include/linux/xlnx-ai-engine.h
index 6f5fb9361311..d499665d412d 100644
--- a/include/linux/xlnx-ai-engine.h
+++ b/include/linux/xlnx-ai-engine.h
@@ -16,10 +16,16 @@
 struct device;
 
 #ifdef CONFIG_XILINX_AIE
+bool aie_partition_is_available(struct aie_partition_req *req);
 struct device *aie_partition_request(struct aie_partition_req *req);
 int aie_partition_get_fd(struct device *dev);
 void aie_partition_release(struct device *dev);
 #else
+static inline bool aie_partition_is_available(struct aie_partition_req *req)
+{
+	return false;
+}
+
 static inline struct device *
 aie_partition_request(struct aie_partition_req *req)
 {
-- 
2.31.1

