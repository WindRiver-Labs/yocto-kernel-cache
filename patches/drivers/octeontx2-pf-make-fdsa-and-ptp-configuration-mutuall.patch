From 561e3f68f027da61725f3e592030e0bc379f978a Mon Sep 17 00:00:00 2001
From: Naveen Mamindlapalli <naveenm@marvell.com>
Date: Wed, 30 Jun 2021 18:24:57 +0530
Subject: [PATCH 1631/1921] octeontx2-pf: make fdsa and ptp configuration
 mutually exclusive

The FDSA configuration uses a new pkind for parsing FDSA tags.
This creates an issue when PTP hardware timestamping is enabled
on the same interface because the FDSA pkind doesn't point Layer-A
offset to skip the 8 bytes of PTP timestamp data. As a result the
FDSA packets gets dropped by NPC. Since the FDSA pkind is shared
by all other interfaces, changing the Layer-A offset in FDSA pkind
to parse PTP timestamp will affect traffic on other interfaces.
To avoid this, make the FDSA and PTP configurations mutually
exclusive in the PF driver.

Change-Id: Ia9bb1aa2e31cf6217932f4f4ec33fe505d06c439
Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/55257
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h  | 2 ++
 drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c | 7 +++++--
 drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c      | 5 +++++
 3 files changed, 12 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index 99988d3f92f8..c2fe7d9c691e 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -394,6 +394,8 @@ struct otx2_nic {
 						 OTX2_PRIV_FLAG_HIGIG2_HDR)
 #define OTX2_IS_DEF_MODE_ENABLED(flags)		((flags) &              \
 						 OTX2_PRIV_FLAG_DEF_MODE)
+#define OTX2_IS_INTFMOD_SET(flags)		hweight32((flags) & OTX2_INTF_MOD_MASK)
+
 	u32		        ethtool_flags;
 
 	/* extended DSA and EDSA  header lengths are 8/16 bytes
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
index 8309b807a320..2b162eb1001f 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
@@ -1469,8 +1469,6 @@ static void otx2_endis_vfvlan_rules(struct otx2_nic *pfvf, bool enable)
 	}
 }
 
-#define OTX2_IS_INTFMOD_SET(flags) hweight32((flags) & OTX2_INTF_MOD_MASK)
-
 static int otx2_set_priv_flags(struct net_device *netdev, u32 new_flags)
 {
 	struct otx2_nic *pfvf = netdev_priv(netdev);
@@ -1493,6 +1491,11 @@ static int otx2_set_priv_flags(struct net_device *netdev, u32 new_flags)
 	if (new_flags & BIT(bitnr))
 		enable = true;
 
+	if ((BIT(bitnr) != OTX2_PRIV_FLAG_PAM4) && (pfvf->flags & OTX2_FLAG_RX_TSTAMP_ENABLED)) {
+		netdev_info(netdev, "Can't enable requested mode when PTP HW timestamping is ON\n");
+		return -EINVAL;
+	}
+
 	switch (BIT(bitnr)) {
 	case OTX2_PRIV_FLAG_PAM4:
 		rc = otx2_set_phy_mod_type(netdev, enable);
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index 2d3ccd540eaf..21b5c727d587 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -2058,6 +2058,11 @@ static int otx2_config_hwtstamp(struct net_device *netdev, struct ifreq *ifr)
 	if (config.flags)
 		return -EINVAL;
 
+	if (OTX2_IS_INTFMOD_SET(pfvf->ethtool_flags)) {
+		netdev_info(netdev, "Can't support PTP HW timestamping when switch features are enabled\n");
+		return -EOPNOTSUPP;
+	}
+
 	switch (config.tx_type) {
 	case HWTSTAMP_TX_OFF:
 		otx2_config_hw_tx_tstamp(pfvf, false);
-- 
2.31.1

