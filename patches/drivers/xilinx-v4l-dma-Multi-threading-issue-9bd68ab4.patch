From 00029bd13c9e070b2bb2f9f5fb6d7b220c20d1bb Mon Sep 17 00:00:00 2001
From: Satish Kumar Nagireddy <satish.nagireddy.nagireddy@xilinx.com>
Date: Mon, 9 Jul 2018 00:26:55 -0700
Subject: [PATCH 0383/1851] xilinx: v4l: dma: Multi-threading issue

commit afe4c61df031e0f8c2efac118e91410081229b92 from
https://github.com/Xilinx/linux-xlnx.git

The issue occurs in case of capture pipeline has multiple
dmas, for e.g.

                     |--> dma (/dev/video0)
Camera --> switch -->
                     |--> dma2 (/dev/video1)

In the function, xvip_dma_start_streaming(), driver will invoke media
framework API media_entity_pipeline_start(). This function would assign
a pipeline object to all entities in the whole capture pipeline. In
current driver implementation, the pipeline object embedded in the first
DMA will be used for this purpose.

If application starts with video0 and video1 with slight time difference
there will be two instances of dma accessing same driver and second
application might call media_entity_pipeline_start() when the first
application is executing the same function. In this case second
application will get different pipleine object.

Mutex variable is introduced to solve the issue.

Signed-off-by: Satish Kumar Nagireddy <satish.nagireddy.nagireddy@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/media/platform/xilinx/xilinx-dma.c  | 2 ++
 drivers/media/platform/xilinx/xilinx-vipp.c | 2 ++
 drivers/media/platform/xilinx/xilinx-vipp.h | 2 ++
 3 files changed, 6 insertions(+)

diff --git a/drivers/media/platform/xilinx/xilinx-dma.c b/drivers/media/platform/xilinx/xilinx-dma.c
index 82009b48b004..c4affec3a11b 100644
--- a/drivers/media/platform/xilinx/xilinx-dma.c
+++ b/drivers/media/platform/xilinx/xilinx-dma.c
@@ -605,10 +605,12 @@ static int xvip_dma_start_streaming(struct vb2_queue *vq, unsigned int count)
 	 * Use the pipeline object embedded in the first DMA object that starts
 	 * streaming.
 	 */
+	mutex_lock(&dma->xdev->lock);
 	pipe = dma->video.entity.pipe
 	     ? to_xvip_pipeline(&dma->video.entity) : &dma->pipe;
 
 	ret = media_pipeline_start(&dma->video.entity, &pipe->pipe);
+	mutex_unlock(&dma->xdev->lock);
 	if (ret < 0)
 		goto error;
 
diff --git a/drivers/media/platform/xilinx/xilinx-vipp.c b/drivers/media/platform/xilinx/xilinx-vipp.c
index 89b67f64a98e..d834e448bbc5 100644
--- a/drivers/media/platform/xilinx/xilinx-vipp.c
+++ b/drivers/media/platform/xilinx/xilinx-vipp.c
@@ -645,6 +645,7 @@ static int xvip_composite_probe(struct platform_device *pdev)
 		return -ENOMEM;
 
 	xdev->dev = &pdev->dev;
+	mutex_init(&xdev->lock);
 	INIT_LIST_HEAD(&xdev->dmas);
 	v4l2_async_notifier_init(&xdev->notifier);
 
@@ -671,6 +672,7 @@ static int xvip_composite_remove(struct platform_device *pdev)
 {
 	struct xvip_composite_device *xdev = platform_get_drvdata(pdev);
 
+	mutex_destroy(&xdev->lock);
 	xvip_graph_cleanup(xdev);
 	xvip_composite_v4l2_cleanup(xdev);
 
diff --git a/drivers/media/platform/xilinx/xilinx-vipp.h b/drivers/media/platform/xilinx/xilinx-vipp.h
index b6e0a0bb9473..24934d57529b 100644
--- a/drivers/media/platform/xilinx/xilinx-vipp.h
+++ b/drivers/media/platform/xilinx/xilinx-vipp.h
@@ -27,6 +27,7 @@
  * @notifier: V4L2 asynchronous subdevs notifier
  * @dmas: list of DMA channels at the pipeline output and input
  * @v4l2_caps: V4L2 capabilities of the whole device (see VIDIOC_QUERYCAP)
+ * @lock: This is to ensure all dma path entities acquire same pipeline object
  */
 struct xvip_composite_device {
 	struct v4l2_device v4l2_dev;
@@ -37,6 +38,7 @@ struct xvip_composite_device {
 
 	struct list_head dmas;
 	u32 v4l2_caps;
+	struct mutex lock; /* lock to protect xvip pipeline instance */
 };
 
 bool xvip_subdev_set_streaming(struct xvip_composite_device *xdev,
-- 
2.31.1

