From 6e4b4027e5e966c6bc033bdec1e9f4cdd210f023 Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Thu, 20 Jun 2019 18:59:18 +0530
Subject: [PATCH 246/767] Revert "PCI: Assign bus numbers present in EA
 capability for bridges"

commit 23a2fe46b4f0fb477c8fa6162d3c1d7c7a0e5383 from
git@git.assembla.com:cavium/WindRiver.linux.git

This reverts commit 076198b783a748d190a1f06f1cbd9b081301d7de.

This patch seems to be causing some issue with PCI device enumeration
on FIO boards. Hence reverting it for the time being.

Change-Id: I697b49340e6480848f09ca2c64e232ba48cc8e59
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/11344
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/pci/probe.c           | 54 +++--------------------------------
 include/uapi/linux/pci_regs.h |  6 ----
 2 files changed, 4 insertions(+), 56 deletions(-)

diff --git a/drivers/pci/probe.c b/drivers/pci/probe.c
index 0e8e2c186f50..c5e75a6ca55a 100644
--- a/drivers/pci/probe.c
+++ b/drivers/pci/probe.c
@@ -1087,36 +1087,6 @@ static void pci_enable_crs(struct pci_dev *pdev)
 
 static unsigned int pci_scan_child_bus_extend(struct pci_bus *bus,
 					      unsigned int available_buses);
-/**
- * pci_ea_fixed_busnrs() - Read fixed Secondary and Subordinate bus
- * numbers from EA capability.
- * @dev: Bridge
- * @sec: updated with secondary bus number from EA
- * @sub: updated with subordinate bus number from EA
- *
- * If @dev is a bridge with EA capability, update @sec and @sub with
- * fixed bus numbers from the capability and return true.  Otherwise,
- * return false.
- */
-static bool pci_ea_fixed_busnrs(struct pci_dev *dev, u8 *sec, u8 *sub)
-{
-	int ea, offset;
-	u32 dw;
-
-	if (dev->hdr_type != PCI_HEADER_TYPE_BRIDGE)
-		return false;
-
-	/* find PCI EA capability in list */
-	ea = pci_find_capability(dev, PCI_CAP_ID_EA);
-	if (!ea)
-		return false;
-
-	offset = ea + PCI_EA_FIRST_ENT;
-	pci_read_config_dword(dev, offset, &dw);
-	*sec =  dw & PCI_EA_SEC_BUS_MASK;
-	*sub = (dw & PCI_EA_SUB_BUS_MASK) >> PCI_EA_SUB_BUS_SHIFT;
-	return true;
-}
 
 /*
  * pci_scan_bridge_extend() - Scan buses behind a bridge
@@ -1151,9 +1121,6 @@ static int pci_scan_bridge_extend(struct pci_bus *bus, struct pci_dev *dev,
 	u16 bctl;
 	u8 primary, secondary, subordinate;
 	int broken = 0;
-	bool fixed_buses;
-	u8 fixed_sec, fixed_sub;
-	int next_busnr;
 
 	/*
 	 * Make sure the bridge is powered on to be able to access config
@@ -1253,24 +1220,17 @@ static int pci_scan_bridge_extend(struct pci_bus *bus, struct pci_dev *dev,
 		/* Clear errors */
 		pci_write_config_word(dev, PCI_STATUS, 0xffff);
 
-		/* Read bus numbers from EA Capability (if present) */
-		fixed_buses = pci_ea_fixed_busnrs(dev, &fixed_sec, &fixed_sub);
-		if (fixed_buses)
-			next_busnr = fixed_sec;
-		else
-			next_busnr = max + 1;
-
 		/*
 		 * Prevent assigning a bus number that already exists.
 		 * This can happen when a bridge is hot-plugged, so in this
 		 * case we only re-scan this bus.
 		 */
-		child = pci_find_bus(pci_domain_nr(bus), next_busnr);
+		child = pci_find_bus(pci_domain_nr(bus), max+1);
 		if (!child) {
-			child = pci_add_new_bus(bus, dev, next_busnr);
+			child = pci_add_new_bus(bus, dev, max+1);
 			if (!child)
 				goto out;
-			pci_bus_insert_busn_res(child, next_busnr,
+			pci_bus_insert_busn_res(child, max+1,
 						bus->busn_res.end);
 		}
 		max++;
@@ -1331,13 +1291,7 @@ static int pci_scan_bridge_extend(struct pci_bus *bus, struct pci_dev *dev,
 			max += i;
 		}
 
-		/*
-		 * Set subordinate bus number to its real value.
-		 * If fixed subordinate bus number exists from EA
-		 * capability then use it.
-		 */
-		if (fixed_buses)
-			max = fixed_sub;
+		/* Set subordinate bus number to its real value */
 		pci_bus_update_busn_res_end(child, max);
 		pci_write_config_byte(dev, PCI_SUBORDINATE_BUS, max);
 	}
diff --git a/include/uapi/linux/pci_regs.h b/include/uapi/linux/pci_regs.h
index 27164769d184..f7d3e7831fa8 100644
--- a/include/uapi/linux/pci_regs.h
+++ b/include/uapi/linux/pci_regs.h
@@ -370,12 +370,6 @@
 #define PCI_EA_FIRST_ENT_BRIDGE	8	/* First EA Entry for Bridges */
 #define  PCI_EA_ES		0x00000007 /* Entry Size */
 #define  PCI_EA_BEI		0x000000f0 /* BAR Equivalent Indicator */
-
-/* EA fixed Secondary and Subordinate bus numbers for Bridge */
-#define PCI_EA_SEC_BUS_MASK	0xff
-#define PCI_EA_SUB_BUS_MASK	0xff00
-#define PCI_EA_SUB_BUS_SHIFT	8
-
 /* 0-5 map to BARs 0-5 respectively */
 #define   PCI_EA_BEI_BAR0		0
 #define   PCI_EA_BEI_BAR5		5
-- 
2.31.1

