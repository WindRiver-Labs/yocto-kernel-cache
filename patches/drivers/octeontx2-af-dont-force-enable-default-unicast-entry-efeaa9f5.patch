From 0d1efcd68158350acb2134b5029c46c5b7f9484a Mon Sep 17 00:00:00 2001
From: hariprasad <hkelam@marvell.com>
Date: Fri, 11 Oct 2019 19:59:39 +0530
Subject: [PATCH 0298/1921] octeontx2-af: dont force enable default unicast
 entry

Functions which install default mcam rules like unicast, enable
entries as well. This patch modifies that behavior to enable
only when they were enabled before. This simplifies logic such
that traffic is received only after rvu_mbox_handler_nix_lf_start_rx
is called.

Change-Id: I936097892c63f5210dd62e4328a2b89db45fc16f
Signed-off-by: hariprasad <hkelam@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/17493
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/rvu.h   |  7 +++++--
 .../ethernet/marvell/octeontx2/af/rvu_npc.c   | 21 +++++++++++--------
 .../marvell/octeontx2/af/rvu_npc_fs.c         | 21 +++++++++++++------
 3 files changed, 32 insertions(+), 17 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
index b50b99cda443..3ae785a624bd 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
@@ -644,11 +644,14 @@ void rvu_npc_get_mcam_counter_alloc_info(struct rvu *rvu, u16 pcifunc,
 					 int *enable_cnt);
 int npc_flow_steering_init(struct rvu *rvu, int blkaddr);
 const char *npc_get_field_name(u8 hdr);
-int rvu_npc_write_default_rule(struct rvu *rvu, int blkaddr, int nixlf,
-			       u16 pcifunc, u8 intf, struct mcam_entry *entry);
+bool rvu_npc_write_default_rule(struct rvu *rvu, int blkaddr, int nixlf,
+				u16 pcifunc, u8 intf, struct mcam_entry *entry,
+				int *entry_index);
 int npc_mcam_verify_channel(struct rvu *rvu, u16 pcifunc, u8 intf, u16 channel);
 int npc_get_bank(struct npc_mcam *mcam, int index);
 void npc_mcam_enable_flows(struct rvu *rvu, u16 target);
+void npc_enable_mcam_entry(struct rvu *rvu, struct npc_mcam *mcam,
+			   int blkaddr, int index, bool enable);
 
 /* CPT APIs */
 int rvu_cpt_init(struct rvu *rvu);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c
index ba0a24798ed9..771b42a14d86 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c
@@ -183,8 +183,8 @@ static bool is_mcam_entry_enabled(struct rvu *rvu, struct npc_mcam *mcam,
 	return (cfg & 1);
 }
 
-static void npc_enable_mcam_entry(struct rvu *rvu, struct npc_mcam *mcam,
-				  int blkaddr, int index, bool enable)
+void npc_enable_mcam_entry(struct rvu *rvu, struct npc_mcam *mcam,
+			   int blkaddr, int index, bool enable)
 {
 	int bank = npc_get_bank(mcam, index);
 	int actbank = bank;
@@ -2600,15 +2600,18 @@ int rvu_mbox_handler_npc_get_kex_cfg(struct rvu *rvu, struct msg_req *req,
 	return 0;
 }
 
-int rvu_npc_write_default_rule(struct rvu *rvu, int blkaddr, int nixlf,
-			       u16 pcifunc, u8 intf, struct mcam_entry *entry)
+bool rvu_npc_write_default_rule(struct rvu *rvu, int blkaddr, int nixlf,
+				u16 pcifunc, u8 intf, struct mcam_entry *entry,
+				int *index)
 {
 	struct npc_mcam *mcam = &rvu->hw->mcam;
-	int index;
+	bool enable;
 
-	index = npc_get_nixlf_mcam_index(mcam, pcifunc,
-					 nixlf, NIXLF_UCAST_ENTRY);
-	npc_config_mcam_entry(rvu, mcam, blkaddr, index, intf, entry, true);
+	*index = npc_get_nixlf_mcam_index(mcam, pcifunc,
+					  nixlf, NIXLF_UCAST_ENTRY);
+	/* dont force enable unicast entry  */
+	enable = is_mcam_entry_enabled(rvu, mcam, blkaddr, *index);
+	npc_config_mcam_entry(rvu, mcam, blkaddr, *index, intf, entry, enable);
 
-	return index;
+	return enable;
 }
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc_fs.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc_fs.c
index 6d5b5d8de477..c587b8dab336 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc_fs.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc_fs.c
@@ -900,15 +900,17 @@ static int npc_install_flow(struct rvu *rvu, int blkaddr, u16 target,
 			npc_update_flow(rvu, entry, missing_features,
 					&def_rule->packet, &def_rule->mask,
 					&dummy, req->intf);
-		entry_index = rvu_npc_write_default_rule(rvu, blkaddr,
-							 nixlf, target,
-							 NIX_INTF_RX, entry);
+		enable = rvu_npc_write_default_rule(rvu, blkaddr,
+						    nixlf, target,
+						    NIX_INTF_RX, entry,
+						    &entry_index);
 		installed_features = req->features | missing_features;
 	} else if (req->default_rule && !req->append) {
 		/* overwrite default rule */
-		entry_index = rvu_npc_write_default_rule(rvu, blkaddr,
-							 nixlf, target,
-							 NIX_INTF_RX, entry);
+		enable = rvu_npc_write_default_rule(rvu, blkaddr,
+						    nixlf, target,
+						    NIX_INTF_RX, entry,
+						    &entry_index);
 	} else if (msg_from_vf) {
 		/* normal rule - include default rule also to it for VF */
 		npc_update_flow(rvu, entry, missing_features, &def_rule->packet,
@@ -1143,6 +1145,13 @@ void npc_mcam_enable_flows(struct rvu *rvu, u16 target)
 	list_for_each_entry(rule, &mcam->mcam_rules, list) {
 		if (rule->intf == NIX_INTF_RX &&
 		    rule->rx_action.pf_func == target && !rule->enable) {
+			if (rule->default_rule) {
+				npc_enable_mcam_entry(rvu, mcam, blkaddr,
+						      rule->entry, true);
+				rule->enable = true;
+				continue;
+			}
+
 			if (rule->rx_action.op == NIX_RX_ACTION_DEFAULT) {
 				if (!pfvf->def_rule)
 					continue;
-- 
2.31.1

