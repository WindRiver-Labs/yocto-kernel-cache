From 74569a7b279bf880677021fb1ab1e8b243214756 Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Fri, 7 Feb 2020 18:12:10 -0800
Subject: [PATCH 1124/1851] drm: xlnx: zynqmp: Use ZynqMP phy API

commit 1aa80e4c3ecfe4ba851ab72eff3f7cfed8cef121 from
https://github.com/Xilinx/linux-xlnx.git

This uses the ZynqMP PHY driver APIs directly for link training
stability. Select the ZynqMP PHY driver in Kconfig.

Signed-off-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/gpu/drm/xlnx/Kconfig     |  2 +-
 drivers/gpu/drm/xlnx/zynqmp_dp.c | 20 +++++++++++++++-----
 2 files changed, 16 insertions(+), 6 deletions(-)

diff --git a/drivers/gpu/drm/xlnx/Kconfig b/drivers/gpu/drm/xlnx/Kconfig
index f220ccad46f0..ecc5f90caf61 100644
--- a/drivers/gpu/drm/xlnx/Kconfig
+++ b/drivers/gpu/drm/xlnx/Kconfig
@@ -36,7 +36,7 @@ config DRM_ZYNQMP_DPSUB
 	select DMADEVICES
 	select XILINX_DMA_ENGINES
 	select XILINX_DPDMA
-	select GENERIC_PHY
+	select PHY_XILINX_ZYNQMP
 	help
 	  DRM KMS driver for ZynqMP DP Subsystem controller. Choose
 	  this option if you have a Xilinx ZynqMP SoC with DisplayPort
diff --git a/drivers/gpu/drm/xlnx/zynqmp_dp.c b/drivers/gpu/drm/xlnx/zynqmp_dp.c
index ce3ecf0d962e..7dfee9993a94 100644
--- a/drivers/gpu/drm/xlnx/zynqmp_dp.c
+++ b/drivers/gpu/drm/xlnx/zynqmp_dp.c
@@ -30,6 +30,7 @@
 #include <linux/module.h>
 #include <linux/mutex.h>
 #include <linux/phy/phy.h>
+#include <linux/phy/phy-zynqmp.h>
 #include <linux/platform_device.h>
 #include <linux/pm_runtime.h>
 #include <linux/uaccess.h>
@@ -484,11 +485,18 @@ static int zynqmp_dp_init_phy(struct zynqmp_dp *dp)
 			return ret;
 		}
 	}
-
-	zynqmp_dp_write(dp->iomem, ZYNQMP_DP_SUB_TX_INTR_DS,
-			ZYNQMP_DP_TX_INTR_ALL);
-	zynqmp_dp_clr(dp->iomem, ZYNQMP_DP_TX_PHY_CONFIG,
-		      ZYNQMP_DP_TX_PHY_CONFIG_ALL_RESET);
+	/* Wait for PLL to be locked for the primary (1st) lane */
+	if (dp->phy[0]) {
+		zynqmp_dp_write(dp->iomem, ZYNQMP_DP_SUB_TX_INTR_DS,
+				ZYNQMP_DP_TX_INTR_ALL);
+		zynqmp_dp_clr(dp->iomem, ZYNQMP_DP_TX_PHY_CONFIG,
+			      ZYNQMP_DP_TX_PHY_CONFIG_ALL_RESET);
+		ret = xpsgtr_wait_pll_lock(dp->phy[0]);
+		if (ret) {
+			dev_err(dp->dev, "failed to lock pll\n");
+			return ret;
+		}
+	}
 
 	return 0;
 }
@@ -701,6 +709,8 @@ static int zynqmp_dp_update_vs_emph(struct zynqmp_dp *dp)
 		p_level = (train_set[i] & DP_TRAIN_PRE_EMPHASIS_MASK) >>
 			  DP_TRAIN_PRE_EMPHASIS_SHIFT;
 
+		xpsgtr_margining_factor(dp->phy[i], p_level, v_level);
+		xpsgtr_override_deemph(dp->phy[i], p_level, v_level);
 		zynqmp_dp_write(dp->iomem, reg, 0x2);
 	}
 
-- 
2.31.1

