From a36562b66252fc297f1c05aee83c0b791d49cd09 Mon Sep 17 00:00:00 2001
From: Hariprasad Kelam <hkelam@marvell.com>
Date: Thu, 22 Oct 2020 10:50:56 +0530
Subject: [PATCH 0898/1921] octeontx2-pf: cn10k: Get MAC features attached to
 netdev

CN10K supports RPM MAC and CN9xx supports CGX. Both these
blocks support different features. Get mac features by using
cgx_features_get mbox request. So that netdev can expose them
to user space tools.
This patch derives mac name so that it can be displayed
as part of ethtool stats.

Change-Id: I96f2b0cae092839914e019ec7abc0eef76c95880
Signed-off-by: Hariprasad Kelam <hkelam@marvell.com>
Signed-off-by: Geetha sowjanya <gakula@marvell.com>
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.h       |  3 ++
 .../marvell/octeontx2/nic/otx2_ethtool.c      | 10 +++++--
 .../ethernet/marvell/octeontx2/nic/otx2_pf.c  | 28 +++++++++++++++++++
 .../ethernet/marvell/octeontx2/nic/otx2_vf.c  |  2 ++
 4 files changed, 41 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index ea418dfe1bbc..66d28158e7b8 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -216,6 +216,8 @@ struct otx2_hw {
 	void __iomem		*lmt_base;
 	u64			*npa_lmt_base;
 	u64			*nix_lmt_base;
+	/* Supported MAC features */
+	u64			mac_features;
 };
 
 struct otx2_ptp {
@@ -896,4 +898,5 @@ int otx2smqvf_probe(struct otx2_nic *vf);
 int otx2smqvf_remove(struct otx2_nic *vf);
 
 bool otx2_xdp_sq_append_pkt(struct otx2_nic *pfvf, u64 iova, int len, u16 qidx);
+int otx2_cgx_features_get(struct otx2_nic *pfvf);
 #endif /* OTX2_COMMON_H */
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
index 0ac02cc3f4dc..48799d805705 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
@@ -120,8 +120,10 @@ static void otx2_get_qset_strings(struct otx2_nic *pfvf, u8 **data, int qset)
 static void otx2_get_strings(struct net_device *netdev, u32 sset, u8 *data)
 {
 	struct otx2_nic *pfvf = netdev_priv(netdev);
+	char *mac_name;
 	int stats;
 
+	mac_name =  (pfvf->hw.mac_features & RVU_MAC_RPM) ? "rpm" : "cgx";
 	if (sset == ETH_SS_PRIV_FLAGS) {
 		memcpy(data, otx2_priv_flags_strings,
 		       ARRAY_SIZE(otx2_priv_flags_strings) * ETH_GSTRING_LEN);
@@ -144,12 +146,12 @@ static void otx2_get_strings(struct net_device *netdev, u32 sset, u8 *data)
 	otx2_get_qset_strings(pfvf, &data, 0);
 
 	for (stats = 0; stats < CGX_RX_STATS_COUNT; stats++) {
-		sprintf(data, "cgx_rxstat%d: ", stats);
+		sprintf(data, "%s_rxstat%d: ", mac_name, stats);
 		data += ETH_GSTRING_LEN;
 	}
 
 	for (stats = 0; stats < CGX_TX_STATS_COUNT; stats++) {
-		sprintf(data, "cgx_txstat%d: ", stats);
+		sprintf(data, "%s_txstat%d: ", mac_name, stats);
 		data += ETH_GSTRING_LEN;
 	}
 
@@ -1400,6 +1402,10 @@ static int otx2_set_priv_flags(struct net_device *netdev, u32 new_flags)
 					       OTX2_EDSA_HDR_LEN, enable);
 		break;
 	case OTX2_PRIV_FLAG_HIGIG2_HDR:
+		/* Check if underlying MAC support HIGIG2 */
+		if (!(pfvf->hw.mac_features & RVU_LMAC_FEAT_HIGIG2))
+			return -EOPNOTSUPP;
+
 		if (enable && OTX2_IS_INTFMOD_SET(pfvf->ethtool_flags)) {
 			netdev_info(netdev,
 				    "Disable mutually exclusive modes edsa/fdsa\n");
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index 5e9b104ad177..cd62e2c6ac3e 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -1133,6 +1133,32 @@ static int otx2_cgx_config_linkevents(struct otx2_nic *pf, bool enable)
 	return err;
 }
 
+int otx2_cgx_features_get(struct otx2_nic *pfvf)
+{
+	struct cgx_features_info_msg *rsp;
+	struct msg_req *msg;
+	int err;
+
+	msg = otx2_mbox_alloc_msg_cgx_features_get(&pfvf->mbox);
+
+	if (!msg) {
+		mutex_unlock(&pfvf->mbox.lock);
+		return -ENOMEM;
+	}
+
+	err = otx2_sync_mbox_msg(&pfvf->mbox);
+	if (err)
+		goto out;
+
+	rsp = (struct cgx_features_info_msg *)
+		     otx2_mbox_get_rsp(&pfvf->mbox.mbox, 0, &msg->hdr);
+	pfvf->hw.mac_features = rsp->lmac_features;
+out:
+	mutex_unlock(&pfvf->mbox.lock);
+	return err;
+}
+EXPORT_SYMBOL(otx2_cgx_features_get);
+
 static int otx2_cgx_config_loopback(struct otx2_nic *pf, bool enable)
 {
 	struct msg_req *msg;
@@ -2625,6 +2651,8 @@ static int otx2_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 
 	otx2_set_ethtool_ops(netdev);
 
+	otx2_cgx_features_get(pf);
+
 	/* Enable link notifications */
 	otx2_cgx_config_linkevents(pf, true);
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
index 408b375dc73e..dbfa1d621dd1 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
@@ -656,6 +656,8 @@ static int otx2vf_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 
 	otx2vf_set_ethtool_ops(netdev);
 
+	otx2_cgx_features_get(vf);
+
 	/* Enable pause frames by default */
 	vf->flags |= OTX2_FLAG_RX_PAUSE_ENABLED;
 	vf->flags |= OTX2_FLAG_TX_PAUSE_ENABLED;
-- 
2.31.1

