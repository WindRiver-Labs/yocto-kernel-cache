From 3683b010dfc06d6f947063be62e304a6b2d19ac5 Mon Sep 17 00:00:00 2001
From: Hariprasad Kelam <hkelam@marvell.com>
Date: Thu, 27 May 2021 12:37:49 +0530
Subject: [PATCH 18/23] octeontx2-pf: Dont enable backpressure on lbk links

commit b1f180589bd9ea1a5d457cdfca52aafce05d32f9 from
git@git.assembla.com:cavium/WindRiver.linux.git

This patch add below changes for backpressure
	* Dont write to  nix1_bpid as its reserved instead
          write to nix0_bpid for NIX1 block.

	* Dont configure bp_ena for LBK links

Change-Id: I988944a60dd2c57c25a2267ba464a05b43f0a823
Signed-off-by: Hariprasad Kelam <hkelam@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/52799
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.c       | 24 +++++++++----------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
index 63a5461a8912..db8ccd6fe7ea 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
@@ -785,12 +785,15 @@ static int otx2_cq_init(struct otx2_nic *pfvf, u16 qidx)
 		aq->cq.drop = RQ_DROP_LVL_CQ(pfvf->hw.rq_skid, cq->cqe_cnt);
 		aq->cq.drop_ena = 1;
 
-		/* Enable receive CQ backpressure */
-		aq->cq.bp_ena = 1;
-		aq->cq.bpid = pfvf->bpid[0];
-
-		/* Set backpressure level is same as cq pass level */
-		aq->cq.bp = RQ_PASS_LVL_CQ(pfvf->hw.rq_skid, qset->rqe_cnt);
+		if (!is_otx2_lbkvf(pfvf->pdev)) {
+			/* Enable receive CQ backpressure */
+			aq->cq.bp_ena = 1;
+			aq->cq.bpid = pfvf->bpid[0];
+
+			/* Set backpressure level is same as cq pass level */
+			aq->cq.bp = RQ_PASS_LVL_CQ(pfvf->hw.rq_skid,
+						   qset->rqe_cnt);
+		}
 	}
 
 	/* Fill AQ info */
@@ -1048,7 +1051,7 @@ static int otx2_aura_init(struct otx2_nic *pfvf, int aura_id,
 	aq->aura.fc_hyst_bits = 0; /* Store count on all updates */
 
 	/* Enable backpressure for RQ aura */
-	if (aura_id < pfvf->hw.rqpool_cnt) {
+	if (aura_id < pfvf->hw.rqpool_cnt && !is_otx2_lbkvf(pfvf->pdev)) {
 		aq->aura.bp_ena = 0;
 		/* If NIX1 LF is attached then specify NIX1_RX.
 		 *
@@ -1064,12 +1067,9 @@ static int otx2_aura_init(struct otx2_nic *pfvf, int aura_id,
 		 * In the above description 'One bit per NIX-RX' is written
 		 * presumably by mistake in HRM.
 		 */
-		if (pfvf->nix_blkaddr == BLKADDR_NIX1) {
+		if (pfvf->nix_blkaddr == BLKADDR_NIX1)
 			aq->aura.bp_ena = 1;
-			aq->aura.nix1_bpid = pfvf->bpid[0];
-		} else {
-			aq->aura.nix0_bpid = pfvf->bpid[0];
-		}
+		aq->aura.nix0_bpid = pfvf->bpid[0];
 
 		/* Set backpressure level for RQ's Aura */
 		aq->aura.bp = RQ_BP_LVL_AURA;
-- 
2.31.1

