From d0d533df12f2c4bd237c6cfc769308a657d3272d Mon Sep 17 00:00:00 2001
From: Richard Gong <richard.gong@intel.com>
Date: Sat, 30 Jan 2021 14:08:59 -0600
Subject: [PATCH 099/120] HSD #22012255049: crypto: intel_fcs: correct SDOS
 min. and max. buffer sizes

commit c59581034032804f8ab790d424e9b6687d1ffba0 from
https://github.com/altera-opensource/linux-socfpga.git

SDOS decryption and encryption buffer sizes are not set correctly, which
are for the plaintext data only. The decryption data should include
plaintext data and data header. The encryption data should include date
header, plaintext data, HMAC and padding.

SDOS = Secure Data Object Services
HMAC = Hash-based Message Authentication Code

Signed-off-by: Richard Gong <richard.gong@intel.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/crypto/intel_fcs.c | 31 +++++++++++++++++--------------
 1 file changed, 17 insertions(+), 14 deletions(-)

diff --git a/drivers/crypto/intel_fcs.c b/drivers/crypto/intel_fcs.c
index 1338f0f99f66..ab656236c2d1 100644
--- a/drivers/crypto/intel_fcs.c
+++ b/drivers/crypto/intel_fcs.c
@@ -28,8 +28,11 @@
 #define PS_BUF_SIZE		64
 #define INVALID_STATUS		0xff
 
-#define MIN_SDOS_BUF_SZ		16
-#define MAX_SDOS_BUF_SZ		32768
+#define DEC_MIN_SZ		72
+#define DEC_MAX_SZ		32712
+#define ENC_MIN_SZ		128
+#define ENC_MAX_SZ		32768
+
 
 #define FCS_REQUEST_TIMEOUT (msecs_to_jiffies(SVC_FCS_REQUEST_TIMEOUT_MS))
 #define FCS_COMPLETED_TIMEOUT (msecs_to_jiffies(SVC_COMPLETED_TIMEOUT_MS))
@@ -410,15 +413,15 @@ static long fcs_ioctl(struct file *file, unsigned int cmd,
 			return -EFAULT;
 		}
 
-		if ((data->com_paras.d_encryption.src_size < MIN_SDOS_BUF_SZ) ||
-		    (data->com_paras.d_encryption.src_size > MAX_SDOS_BUF_SZ)) {
+		if (data->com_paras.d_encryption.src_size < DEC_MIN_SZ ||
+		    data->com_paras.d_encryption.src_size > DEC_MAX_SZ) {
 			dev_err(dev, "Invalid SDOS Buffer src size:%d\n",
 				data->com_paras.d_encryption.src_size);
 			return -EFAULT;
 		}
 
-		if ((data->com_paras.d_encryption.dst_size < MIN_SDOS_BUF_SZ) ||
-		    (data->com_paras.d_encryption.dst_size > MAX_SDOS_BUF_SZ)) {
+		if (data->com_paras.d_encryption.dst_size < ENC_MIN_SZ ||
+		    data->com_paras.d_encryption.dst_size > ENC_MAX_SZ) {
 			dev_err(dev, "Invalid SDOS Buffer dst size:%d\n",
 				data->com_paras.d_encryption.dst_size);
 			return -EFAULT;
@@ -426,13 +429,13 @@ static long fcs_ioctl(struct file *file, unsigned int cmd,
 
 		/* allocate buffer for both source and destination */
 		s_buf = stratix10_svc_allocate_memory(priv->chan,
-						      MAX_SDOS_BUF_SZ);
+						      DEC_MAX_SZ);
 		if (!s_buf) {
 			dev_err(dev, "failed allocate encrypt src buf\n");
 			return -ENOMEM;
 		}
 		d_buf = stratix10_svc_allocate_memory(priv->chan,
-						      MAX_SDOS_BUF_SZ);
+						      ENC_MAX_SZ);
 		if (!d_buf) {
 			dev_err(dev, "failed allocate encrypt dst buf\n");
 			stratix10_svc_free_memory(priv->chan, s_buf);
@@ -520,15 +523,15 @@ static long fcs_ioctl(struct file *file, unsigned int cmd,
 			return -EFAULT;
 		}
 
-		if ((data->com_paras.d_encryption.src_size < MIN_SDOS_BUF_SZ) ||
-		    (data->com_paras.d_encryption.src_size > MAX_SDOS_BUF_SZ)) {
+		if (data->com_paras.d_encryption.src_size < ENC_MIN_SZ ||
+		    data->com_paras.d_encryption.src_size > ENC_MAX_SZ) {
 			dev_err(dev, "Invalid SDOS Buffer src size:%d\n",
 				data->com_paras.d_encryption.src_size);
 			return -EFAULT;
 		}
 
-		if ((data->com_paras.d_encryption.dst_size < MIN_SDOS_BUF_SZ) ||
-		    (data->com_paras.d_encryption.dst_size > MAX_SDOS_BUF_SZ)) {
+		if (data->com_paras.d_encryption.dst_size < DEC_MIN_SZ ||
+		    data->com_paras.d_encryption.dst_size > DEC_MAX_SZ) {
 			dev_err(dev, "Invalid SDOS Buffer dst size:%d\n",
 				data->com_paras.d_encryption.dst_size);
 			return -EFAULT;
@@ -536,13 +539,13 @@ static long fcs_ioctl(struct file *file, unsigned int cmd,
 
 		/* allocate buffer for both source and destination */
 		s_buf = stratix10_svc_allocate_memory(priv->chan,
-						      MAX_SDOS_BUF_SZ);
+						      ENC_MAX_SZ);
 		if (!s_buf) {
 			dev_err(dev, "failed allocate decrypt src buf\n");
 			return -ENOMEM;
 		}
 		d_buf = stratix10_svc_allocate_memory(priv->chan,
-						      MAX_SDOS_BUF_SZ);
+						      DEC_MAX_SZ);
 		if (!d_buf) {
 			dev_err(dev, "failed allocate decrypt dst buf\n");
 			stratix10_svc_free_memory(priv->chan, s_buf);
-- 
2.31.1

