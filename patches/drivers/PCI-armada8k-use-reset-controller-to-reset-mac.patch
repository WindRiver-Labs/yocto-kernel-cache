From 03dae6b10b1fbf0e3566b3819d2a07214c95e555 Mon Sep 17 00:00:00 2001
From: Ben Peled <bpeled@marvell.com>
Date: Mon, 26 Apr 2021 10:42:34 +0300
Subject: [PATCH 1510/1921] PCI: armada8k: use reset controller to reset mac

change mac reset and mac reset bits to reset controller

Signed-off-by: Ben Peled <bpeled@marvell.com>
Change-Id: I993e8eb2a82582e3ebe261ed9179f0d44acd4cb2
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/50460
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Stefan Chulski <stefanc@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/pci/controller/dwc/pcie-armada8k.c | 31 +++++++---------------
 1 file changed, 10 insertions(+), 21 deletions(-)

diff --git a/drivers/pci/controller/dwc/pcie-armada8k.c b/drivers/pci/controller/dwc/pcie-armada8k.c
index 75d81f265a47..90bc79a6564e 100644
--- a/drivers/pci/controller/dwc/pcie-armada8k.c
+++ b/drivers/pci/controller/dwc/pcie-armada8k.c
@@ -22,7 +22,7 @@
 #include <linux/resource.h>
 #include <linux/of_pci.h>
 #include <linux/of_irq.h>
-#include <linux/mfd/syscon.h>
+#include <linux/reset.h>
 #include <linux/regmap.h>
 #include <linux/of_gpio.h>
 
@@ -36,11 +36,10 @@ struct armada8k_pcie {
 	struct clk *clk_reg;
 	struct phy *phy[ARMADA8K_PCIE_MAX_LANES];
 	unsigned int phy_count;
-	struct regmap *sysctrl_base;
-	u32 mac_rest_bitmask;
 	struct work_struct recover_link_work;
 	enum of_gpio_flags flags;
 	struct gpio_desc *reset_gpio;
+	struct reset_control *reset;
 };
 
 #define PCIE_VENDOR_REGS_OFFSET		0x8000
@@ -266,13 +265,11 @@ static void armada8k_pcie_recover_link(struct work_struct *ws)
 	msleep(100);
 
 	/* Reset mac */
-	regmap_update_bits_base(pcie->sysctrl_base, UNIT_SOFT_RESET_CONFIG_REG,
-				pcie->mac_rest_bitmask, 0, NULL, false, true);
+	reset_control_assert(pcie->reset);
 	udelay(1);
-	regmap_update_bits_base(pcie->sysctrl_base, UNIT_SOFT_RESET_CONFIG_REG,
-				pcie->mac_rest_bitmask, pcie->mac_rest_bitmask,
-				NULL, false, true);
+	reset_control_deassert(pcie->reset);
 	udelay(1);
+
 	ret = armada8k_pcie_host_init(pp);
 	if (ret) {
 		dev_err(pcie->pci->dev, "failed to initialize host: %d\n", ret);
@@ -325,7 +322,7 @@ static irqreturn_t armada8k_pcie_irq_handler(int irq, void *arg)
 		 * initiate a link retrain. If link retrains were
 		 * possible, that is.
 		 */
-		if (pcie->sysctrl_base && pcie->mac_rest_bitmask)
+		if (pcie->reset)
 			schedule_work(&pcie->recover_link_work);
 
 		dev_dbg(pci->dev, "%s: link went down\n", __func__);
@@ -436,18 +433,10 @@ static int armada8k_pcie_probe(struct platform_device *pdev)
 	if (gpio_is_valid(reset_gpio))
 		pcie->reset_gpio = gpio_to_desc(reset_gpio);
 
-	pcie->sysctrl_base = syscon_regmap_lookup_by_phandle(pdev->dev.of_node,
-						       "marvell,system-controller");
-	if (IS_ERR(pcie->sysctrl_base)) {
-		dev_warn(dev, "failed to find marvell,system-controller\n");
-		pcie->sysctrl_base = 0x0;
-	}
-
-	ret = of_property_read_u32(pdev->dev.of_node, "marvell,mac-reset-bit-mask",
-				   &pcie->mac_rest_bitmask);
-	if (ret < 0) {
-		dev_warn(dev, "couldn't find mac reset bit mask: %d\n", ret);
-		pcie->mac_rest_bitmask = 0x0;
+	pcie->reset = devm_reset_control_get_exclusive(&pdev->dev, NULL);
+	if (IS_ERR(pcie->reset)) {
+		dev_warn(dev, "failed to find mac reset\n");
+		pcie->reset = 0x0;
 	}
 	ret = armada8k_pcie_setup_phys(pcie);
 	if (ret)
-- 
2.31.1

