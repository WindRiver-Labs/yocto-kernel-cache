From ba542c6a11024536c2a6a6311160843575f5a232 Mon Sep 17 00:00:00 2001
From: Siew Chin Lim <elly.siew.chin.lim@intel.com>
Date: Thu, 26 Aug 2021 01:52:41 +0800
Subject: [PATCH 04/42] crypto: intel_fcs: update for importing the service key
 object

commit 160618e0fc0024aa6295f4893f15fd34737059eb from
https://github.com/altera-opensource/linux-socfpga/commits/socfpga-5.4.124-lts

Update to support importing the service key object.

Signed-off-by: Richard Gong <richard.gong@intel.com>
Signed-off-by: Siew Chin Lim <elly.siew.chin.lim@intel.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/crypto/intel_fcs.c           | 76 ++++++++++++++++++++++++++++
 include/uapi/linux/intel_fcs-ioctl.h | 18 +++++++
 2 files changed, 94 insertions(+)

diff --git a/drivers/crypto/intel_fcs.c b/drivers/crypto/intel_fcs.c
index 3005d9f81d65..305329010bc6 100644
--- a/drivers/crypto/intel_fcs.c
+++ b/drivers/crypto/intel_fcs.c
@@ -1117,6 +1117,82 @@ static long fcs_ioctl(struct file *file, unsigned int cmd,
 
 		 break;
 
+	case INTEL_FCS_DEV_CRYPTO_IMPORT_KEY:
+		 if (copy_from_user(data, (void __user *)arg, sizeof(*data))) {
+			 dev_err(dev, "failure on copy_from_user\n");
+			 return -EFAULT;
+		 }
+
+		 /* Allocate memory for header + key object */
+		 tsz = sizeof(struct fcs_crypto_key_header);
+		 datasz = data->com_paras.k_import.obj_data_sz + tsz;
+
+		 s_buf = stratix10_svc_allocate_memory(priv->chan, datasz);
+		 if (!s_buf) {
+			 dev_err(dev, "failed to allocate key import buffer\n");
+			 return -ENOMEM;
+		 }
+
+		 ps_buf = stratix10_svc_allocate_memory(priv->chan, PS_BUF_SIZE);
+		 if (!ps_buf) {
+			 dev_err(dev, "failed allocate p-status buffer\n");
+			 fcs_close_services(priv, s_buf, NULL);
+			 return -ENOMEM;
+		 }
+
+		 /* copy session ID from the header */
+		 memcpy(s_buf, &data->com_paras.k_import.hd.sid, tsz);
+		 ret = copy_from_user(s_buf + tsz,
+				      data->com_paras.k_import.obj_data,
+				      data->com_paras.k_import.obj_data_sz);
+		 if (ret) {
+			 dev_err(dev, "failed copy buf ret=%d\n", ret);
+			 fcs_close_services(priv, ps_buf, NULL);
+			 fcs_close_services(priv, s_buf, NULL);
+			 return -EFAULT;
+		 }
+
+		 msg->payload = s_buf;
+		 msg->payload_length = datasz;
+		 msg->command = COMMAND_FCS_CRYPTO_IMPORT_KEY;
+		 priv->client.receive_cb = fcs_vab_callback;
+
+		 ret = fcs_request_service(priv, (void *)msg,
+					   FCS_REQUEST_TIMEOUT);
+		 dev_dbg(dev, "request service ret=%d\n", ret);
+
+		 if (!ret && !priv->status) {
+			 /* to query the complete status */
+			 msg->payload = ps_buf;
+			 msg->payload_length = PS_BUF_SIZE;
+			 msg->command = COMMAND_POLL_SERVICE_STATUS;
+			 priv->client.receive_cb = fcs_data_callback;
+			 ret = fcs_request_service(priv, (void *)msg,
+						  FCS_COMPLETED_TIMEOUT);
+			 dev_dbg(dev, "request service ret=%d\n", ret);
+			 if (!ret && !priv->status)
+				data->status = 0;
+			 else {
+				data->status = priv->status;
+				if (priv->kbuf)
+					data->status |= ((*(u32 *)priv->kbuf) & 0xFF)
+							<< 16;
+			 }
+		 } else {
+			 data->status = priv->status;
+		 }
+
+		 if (copy_to_user((void __user *)arg, data, sizeof(*data))) {
+			 dev_err(dev, "failure on copy_to_user\n");
+			 fcs_close_services(priv, ps_buf, NULL);
+			 fcs_close_services(priv, s_buf, NULL);
+			 return -EFAULT;
+		 }
+
+		 fcs_close_services(priv, ps_buf, NULL);
+		 fcs_close_services(priv, s_buf, NULL);
+		 break;
+
 	default:
 		dev_warn(dev, "shouldn't be here [0x%x]\n", cmd);
 		break;
diff --git a/include/uapi/linux/intel_fcs-ioctl.h b/include/uapi/linux/intel_fcs-ioctl.h
index 52f526fe8257..e14cfdcdf860 100644
--- a/include/uapi/linux/intel_fcs-ioctl.h
+++ b/include/uapi/linux/intel_fcs-ioctl.h
@@ -222,6 +222,18 @@ struct fcs_crypto_service_session {
 	uint32_t sid;
 };
 
+struct fcs_crypto_key_header {
+	uint32_t sid;
+	uint32_t res1;
+	uint32_t res2;
+};
+
+struct fcs_crypto_key_import {
+	struct fcs_crypto_key_header hd;
+	char *obj_data;
+	uint32_t obj_data_sz;
+};
+
 /**
  * struct intel_fcs_dev_ioct: common structure passed to Linux
  *	kernel driver for all commands.
@@ -259,6 +271,7 @@ struct intel_fcs_dev_ioctl {
 		struct fcs_attestation_certificate_reload	c_reload;
 		struct fcs_rom_patch_sha384 sha384;
 		struct fcs_crypto_service_session	s_session;
+		struct fcs_crypto_key_import		k_import;
 	} com_paras;
 };
 
@@ -307,6 +320,7 @@ enum intel_fcs_command_code {
 	INTEL_FCS_DEV_GET_ROM_PATCH_SHA384_CMD,
 	INTEL_FCS_DEV_CRYPTO_OPEN_SESSION_CMD = 0xA0,
 	INTEL_FCS_DEV_CRYPTO_CLOSE_SESSION_CMD,
+	INTEL_FCS_DEV_CRYPTO_IMPORT_KEY_CMD,
 };
 
 #define INTEL_FCS_DEV_VERSION_REQUEST \
@@ -377,5 +391,9 @@ enum intel_fcs_command_code {
 	_IOWR(INTEL_FCS_IOCTL, \
 	      INTEL_FCS_DEV_CRYPTO_CLOSE_SESSION_CMD, struct intel_fcs_dev_ioctl)
 
+#define INTEL_FCS_DEV_CRYPTO_IMPORT_KEY \
+	_IOWR(INTEL_FCS_IOCTL, \
+	      INTEL_FCS_DEV_CRYPTO_IMPORT_KEY_CMD, struct intel_fcs_dev_ioctl)
+
 #endif
 
-- 
2.31.1

