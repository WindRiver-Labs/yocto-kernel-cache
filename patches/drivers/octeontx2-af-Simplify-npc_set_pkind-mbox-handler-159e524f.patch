From d554a270ea9c248ef31bcd99e4754d40d2a5f4cd Mon Sep 17 00:00:00 2001
From: Hariprasad Kelam <hkelam@marvell.com>
Date: Thu, 20 Feb 2020 15:39:37 +0530
Subject: [PATCH 0367/1921] octeontx2-af: Simplify npc_set_pkind mbox handler

Refactor  npc_set_pkind mbox handler to use npc_set_parse_mode

Change-Id: I1f9fa3977d32efc57d3b0d7fe2b5fe068b5f0bed
Signed-off-by: Hariprasad Kelam <hkelam@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/23590
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../ethernet/marvell/octeontx2/af/rvu_npc.c   | 35 +++++++++++--------
 1 file changed, 21 insertions(+), 14 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c
index a6e342e494b0..ebeab6988c8e 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c
@@ -2616,12 +2616,11 @@ bool rvu_npc_write_default_rule(struct rvu *rvu, int blkaddr, int nixlf,
 	return enable;
 }
 
-int rvu_mbox_handler_npc_set_pkind(struct rvu *rvu,
-				   struct npc_set_pkind *req,
-				   struct msg_rsp *rsp)
+int rvu_npc_set_parse_mode(struct rvu *rvu, u16 pcifunc, u64 mode, u8 dir,
+			   u64 pkind)
+
 {
-	struct rvu_pfvf *pfvf = rvu_get_pfvf(rvu, req->hdr.pcifunc);
-	u16 pcifunc = req->hdr.pcifunc;
+	struct rvu_pfvf *pfvf = rvu_get_pfvf(rvu, pcifunc);
 	int pf = rvu_get_pf(pcifunc);
 	bool enable_higig2 = false;
 	int blkaddr, nixlf, rc;
@@ -2632,9 +2631,9 @@ int rvu_mbox_handler_npc_set_pkind(struct rvu *rvu,
 	rxpkind = rvu_npc_get_pkind(rvu, pf);
 	txpkind = NPC_TX_DEF_PKIND;
 
-	if (req->mode & OTX2_PRIV_FLAGS_EDSA) {
+	if (mode & OTX2_PRIV_FLAGS_EDSA) {
 		rxpkind = NPC_RX_EDSA_PKIND;
-	} else if (req->mode & OTX2_PRIV_FLAGS_HIGIG) {
+	} else if (mode & OTX2_PRIV_FLAGS_HIGIG) {
 		/* Silicon does not support enabling higig in time stamp mode */
 		if (pfvf->hw_rx_tstamp_en ||
 		    rvu_nix_is_ptp_tx_enabled(rvu, pcifunc))
@@ -2643,14 +2642,14 @@ int rvu_mbox_handler_npc_set_pkind(struct rvu *rvu,
 		rxpkind = NPC_RX_HIGIG_PKIND;
 		txpkind = NPC_TX_HIGIG_PKIND;
 		enable_higig2 = true;
-	} else if (req->mode & OTX2_PRIV_FLAGS_CUSTOM) {
-		rxpkind = req->pkind;
-		txpkind = req->pkind;
+	} else if (mode & OTX2_PRIV_FLAGS_CUSTOM) {
+		rxpkind = pkind;
+		txpkind = pkind;
 	}
 
-	if (req->dir & PKIND_RX) {
+	if (dir & PKIND_RX) {
 		/* rx pkind set req valid only for cgx mapped PFs */
-		if (!is_cgx_config_permitted(rvu, req->hdr.pcifunc))
+		if (!is_cgx_config_permitted(rvu, pcifunc))
 			return 0;
 		rvu_get_cgx_lmac_id(pfvf->cgx_lmac, &cgx_id, &lmac_id);
 
@@ -2660,9 +2659,9 @@ int rvu_mbox_handler_npc_set_pkind(struct rvu *rvu,
 			return rc;
 	}
 
-	if (req->dir & PKIND_TX) {
+	if (dir & PKIND_TX) {
 		/* Tx pkind set request valid if PCIFUNC has NIXLF attached */
-		rc = nix_get_nixlf(rvu, req->hdr.pcifunc, &nixlf, &blkaddr);
+		rc = nix_get_nixlf(rvu, pcifunc, &nixlf, &blkaddr);
 		if (rc)
 			return rc;
 
@@ -2675,3 +2674,11 @@ int rvu_mbox_handler_npc_set_pkind(struct rvu *rvu,
 
 	return 0;
 }
+
+int rvu_mbox_handler_npc_set_pkind(struct rvu *rvu,
+				   struct npc_set_pkind *req,
+				   struct msg_rsp *rsp)
+{
+	return rvu_npc_set_parse_mode(rvu, req->hdr.pcifunc, req->mode,
+				      req->dir, req->pkind);
+}
-- 
2.31.1

