From 1cd550ba5b5bac321836b53b1d08e7d2ec904e39 Mon Sep 17 00:00:00 2001
From: Richard Gong <richard.gong@intel.com>
Date: Mon, 12 Jul 2021 06:50:57 -0500
Subject: [PATCH 30/42] crypto: intel_fcs: update for ECDH request

commit ec9eaf49ee8a882006f8f28f67352f862b9660ff from
https://github.com/altera-opensource/linux-socfpga/commits/socfpga-5.4.124-lts

Update to support ECDH request.

Signed-off-by: Richard Gong <richard.gong@intel.com>
Signed-off-by: Siew Chin Lim <elly.siew.chin.lim@intel.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/crypto/intel_fcs.c           | 82 ++++++++++++++++++++++++++++
 include/uapi/linux/intel_fcs-ioctl.h |  5 ++
 2 files changed, 87 insertions(+)

diff --git a/drivers/crypto/intel_fcs.c b/drivers/crypto/intel_fcs.c
index 12eae7726c2f..01858f46ba58 100644
--- a/drivers/crypto/intel_fcs.c
+++ b/drivers/crypto/intel_fcs.c
@@ -2059,6 +2059,88 @@ static long fcs_ioctl(struct file *file, unsigned int cmd,
 		 fcs_close_services(priv, NULL, d_buf);
 		 break;
 
+	case INTEL_FCS_DEV_CRYPTO_ECDH_REQUEST:
+		if (copy_from_user(data, (void __user *)arg, sizeof(*data))) {
+			dev_err(dev, "failure on copy_from_user\n");
+			return -EFAULT;
+		}
+
+		sid = data->com_paras.ecdsa_data.sid;
+		cid = data->com_paras.ecdsa_data.cid;
+		kuid = data->com_paras.ecdsa_data.kuid;
+		in_sz = data->com_paras.ecdsa_data.src_size;
+		out_sz = data->com_paras.ecdsa_data.dst_size;
+
+		msg->command = COMMAND_FCS_CRYPTO_ECDH_REQUEST_INIT;
+		msg->arg[0] = sid;
+		msg->arg[1] = cid;
+		msg->arg[2] = kuid;
+		msg->arg[3] = CRYPTO_ECC_PARAM_SZ;
+		msg->arg[4] = data->com_paras.ecdsa_data.ecc_algorithm & 0xF;
+		priv->client.receive_cb = fcs_vab_callback;
+
+		ret = fcs_request_service(priv, (void *)msg,
+					   FCS_REQUEST_TIMEOUT);
+		if (ret || priv->status) {
+			dev_err(dev, "failed to send the cmd=%d,ret=%d, status=%d\n",
+				COMMAND_FCS_CRYPTO_ECDH_REQUEST_INIT,
+				ret, priv->status);
+		};
+
+		s_buf = stratix10_svc_allocate_memory(priv->chan, in_sz);
+		if (!s_buf) {
+			dev_err(dev, "failed allocate source buf\n");
+			return -ENOMEM;
+		}
+
+		d_buf = stratix10_svc_allocate_memory(priv->chan, out_sz);
+		if (!d_buf) {
+			dev_err(dev, "failed allocate destation buf\n");
+			fcs_close_services(priv, s_buf, NULL);
+			return -ENOMEM;
+		}
+
+		memcpy(s_buf, data->com_paras.ecdsa_data.src,
+		       data->com_paras.ecdsa_data.src_size);
+
+		msg->command = COMMAND_FCS_CRYPTO_ECDH_REQUEST_FINALIZE;
+		msg->arg[0] = sid;
+		msg->arg[1] = cid;
+		msg->payload = s_buf;
+		msg->payload_length = in_sz;
+		msg->payload_output = d_buf;
+		msg->payload_length_output = out_sz;
+		priv->client.receive_cb = fcs_attestation_callback;
+
+		ret = fcs_request_service(priv, (void *)msg,
+					   10 * FCS_REQUEST_TIMEOUT);
+		if (!ret && !priv->status) {
+			if (priv->size > out_sz) {
+				dev_err(dev, "returned size %d is incorrect\n",
+					priv->size);
+				fcs_close_services(priv, s_buf, d_buf);
+				return -EFAULT;
+			}
+
+			memcpy(data->com_paras.ecdsa_data.dst,
+			       priv->kbuf, priv->size);
+			data->com_paras.ecdsa_data.dst_size = priv->size;
+		} else {
+			data->com_paras.ecdsa_data.dst = NULL;
+			data->com_paras.ecdsa_data.dst_size = 0;
+		}
+
+		data->status = priv->status;
+
+		if (copy_to_user((void __user *)arg, data, sizeof(*data))) {
+			dev_err(dev, "failure on copy_to_user\n");
+			fcs_close_services(priv, s_buf, d_buf);
+			ret = -EFAULT;
+		}
+
+		fcs_close_services(priv, s_buf, d_buf);
+		break;
+
 	default:
 		dev_warn(dev, "shouldn't be here [0x%x]\n", cmd);
 		break;
diff --git a/include/uapi/linux/intel_fcs-ioctl.h b/include/uapi/linux/intel_fcs-ioctl.h
index fe6350be0a9a..4db34d85419c 100644
--- a/include/uapi/linux/intel_fcs-ioctl.h
+++ b/include/uapi/linux/intel_fcs-ioctl.h
@@ -454,6 +454,7 @@ enum intel_fcs_command_code {
 	INTEL_FCS_DEV_CRYPTO_ECDSA_HASH_VERIFY_CMD,
 	INTEL_FCS_DEV_CRYPTO_ECDSA_SHA2_DATA_VERIFY_CMD,
 	INTEL_FCS_DEV_CRYPTO_ECDSA_GET_PUBLIC_KEY_CMD,
+	INTEL_FCS_DEV_CRYPTO_ECDH_REQUEST_CMD,
 };
 
 #define INTEL_FCS_DEV_VERSION_REQUEST \
@@ -572,5 +573,9 @@ enum intel_fcs_command_code {
 	_IOWR(INTEL_FCS_IOCTL, \
 	      INTEL_FCS_DEV_CRYPTO_ECDSA_GET_PUBLIC_KEY_CMD, struct intel_fcs_dev_ioctl)
 
+#define INTEL_FCS_DEV_CRYPTO_ECDH_REQUEST \
+	_IOWR(INTEL_FCS_IOCTL, \
+	      INTEL_FCS_DEV_CRYPTO_ECDH_REQUEST_CMD, struct intel_fcs_dev_ioctl)
+
 #endif
 
-- 
2.31.1

