From d11f79b31c7386df43de1639a517bbc802decc1d Mon Sep 17 00:00:00 2001
From: Subbaraya Sundeep <sbhatta@marvell.com>
Date: Mon, 21 Oct 2019 20:08:10 +0530
Subject: [PATCH 377/767] octeontx2-pf: Use BLKTYPE in register macros

commit 671aef6d85d317e805ac179c3d6d2983835e9ea1 from
git@git.assembla.com:cavium/WindRiver.linux.git

Use BLKTYPE instead of BLKADDR in register offset
macros so that NIX1 block registers can also be
accessed when required.

Change-Id: I4f32885fe2fa28beb3483f84c3b13d4eb5818c04
Signed-off-by: Subbaraya Sundeep <sbhatta@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/17664
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.c       | 10 +++---
 .../marvell/octeontx2/nic/otx2_common.h       | 36 ++++++++++++++++---
 .../ethernet/marvell/octeontx2/nic/otx2_pf.c  |  4 +--
 .../ethernet/marvell/octeontx2/nic/otx2_reg.h |  9 +++--
 .../marvell/octeontx2/nic/otx2_txrx.c         |  2 +-
 5 files changed, 45 insertions(+), 16 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
index 2d5ef65d40c2..468fb81bbea2 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
@@ -630,7 +630,7 @@ static int otx2_sq_init(struct otx2_nic *pfvf, u16 qidx, u16 sqb_aura)
 	sq->aura_id = sqb_aura;
 	sq->aura_fc_addr = pool->fc_addr->base;
 	sq->lmt_addr = (__force u64 *)(pfvf->reg_base + LMT_LF_LMTLINEX(qidx));
-	sq->io_addr = (__force u64)(pfvf->reg_base + NIX_LF_OP_SENDX(0));
+	sq->io_addr = (__force u64)otx2_get_regaddr(pfvf, NIX_LF_OP_SENDX(0));
 
 	sq->stats.bytes = 0;
 	sq->stats.pkts = 0;
@@ -1312,10 +1312,10 @@ static inline void otx2_nix_rq_op_stats(struct queue_stats *stats,
 	u64 incr = (u64)qidx << 32;
 	atomic64_t *ptr;
 
-	ptr = (__force atomic64_t *)(pfvf->reg_base + NIX_LF_RQ_OP_OCTS);
+	ptr = (__force atomic64_t *)otx2_get_regaddr(pfvf, NIX_LF_RQ_OP_OCTS);
 	stats->bytes = atomic64_fetch_add_relaxed(incr, ptr);
 
-	ptr = (__force atomic64_t *)(pfvf->reg_base + NIX_LF_RQ_OP_PKTS);
+	ptr = (__force atomic64_t *)otx2_get_regaddr(pfvf, NIX_LF_RQ_OP_PKTS);
 	stats->pkts = atomic64_fetch_add_relaxed(incr, ptr);
 }
 
@@ -1325,10 +1325,10 @@ static inline void otx2_nix_sq_op_stats(struct queue_stats *stats,
 	u64 incr = (u64)qidx << 32;
 	atomic64_t *ptr;
 
-	ptr = (__force atomic64_t *)(pfvf->reg_base + NIX_LF_SQ_OP_OCTS);
+	ptr = (__force atomic64_t *)otx2_get_regaddr(pfvf, NIX_LF_SQ_OP_OCTS);
 	stats->bytes = atomic64_fetch_add_relaxed(incr, ptr);
 
-	ptr = (__force atomic64_t *)(pfvf->reg_base + NIX_LF_SQ_OP_PKTS);
+	ptr = (__force atomic64_t *)otx2_get_regaddr(pfvf, NIX_LF_SQ_OP_PKTS);
 	stats->pkts = atomic64_fetch_add_relaxed(incr, ptr);
 }
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index 8bdbb6a1cab3..14f9f4b537dd 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -301,15 +301,41 @@ static inline void otx2_setup_dev_hw_settings(struct otx2_nic *pfvf)
 		pfvf->cq_qcount_wait = 0x0;
 }
 
+static inline void __iomem *otx2_get_regaddr(struct otx2_nic *nic, u64 offset)
+{
+	u64 blkaddr;
+
+	switch ((offset >> RVU_FUNC_BLKADDR_SHIFT) & RVU_FUNC_BLKADDR_MASK) {
+	case BLKTYPE_NIX:
+		blkaddr = BLKADDR_NIX0;
+		break;
+	case BLKTYPE_NPA:
+		blkaddr = BLKADDR_NPA;
+		break;
+	default:
+		blkaddr = BLKADDR_RVUM;
+		break;
+	};
+
+	offset &= ~(RVU_FUNC_BLKADDR_MASK << RVU_FUNC_BLKADDR_SHIFT);
+	offset |= (blkaddr << RVU_FUNC_BLKADDR_SHIFT);
+
+	return nic->reg_base + offset;
+}
+
 /* Register read/write APIs */
 static inline void otx2_write64(struct otx2_nic *nic, u64 offset, u64 val)
 {
-	writeq(val, nic->reg_base + offset);
+	void __iomem *addr = otx2_get_regaddr(nic, offset);
+
+	writeq(val, addr);
 }
 
 static inline u64 otx2_read64(struct otx2_nic *nic, u64 offset)
 {
-	return readq(nic->reg_base + offset);
+	void __iomem *addr = otx2_get_regaddr(nic, offset);
+
+	return readq(addr);
 }
 
 /* Mbox bounce buffer APIs */
@@ -407,8 +433,8 @@ static inline __uint128_t otx2_read128(const void __iomem *addr)
 /* Alloc pointer from pool/aura */
 static inline u64 otx2_aura_allocptr(struct otx2_nic *pfvf, int aura)
 {
-	atomic64_t *ptr = (__force atomic64_t *)(pfvf->reg_base
-				+ NPA_LF_AURA_OP_ALLOCX(0));
+	atomic64_t *ptr = (__force atomic64_t *)otx2_get_regaddr(pfvf,
+			   NPA_LF_AURA_OP_ALLOCX(0));
 	u64 incr = (u64)aura | BIT_ULL(63);
 
 	return atomic64_fetch_add_relaxed(incr, ptr);
@@ -419,7 +445,7 @@ static inline void otx2_aura_freeptr(struct otx2_nic *pfvf,
 				     int aura, s64 buf)
 {
 	otx2_write128((u64)buf, (u64)aura | BIT_ULL(63),
-		      pfvf->reg_base + NPA_LF_AURA_OP_FREE0);
+		      otx2_get_regaddr(pfvf, NPA_LF_AURA_OP_FREE0));
 }
 
 /* Update page ref count */
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index b5d61638b434..ad644607bbb2 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -1153,7 +1153,7 @@ static irqreturn_t otx2_q_intr_handler(int irq, void *data)
 
 	/* CQ */
 	for (qidx = 0; qidx < pf->qset.cq_cnt; qidx++) {
-		ptr = pf->reg_base + NIX_LF_CQ_OP_INT;
+		ptr = otx2_get_regaddr(pf, NIX_LF_CQ_OP_INT);
 		val = atomic64_fetch_add_relaxed((qidx << 44), ptr);
 
 		otx2_write64(pf, NIX_LF_CQ_OP_INT, (qidx << 44) |
@@ -1178,7 +1178,7 @@ static irqreturn_t otx2_q_intr_handler(int irq, void *data)
 
 	/* SQ */
 	for (qidx = 0; qidx < pf->hw.tx_queues; qidx++) {
-		ptr = pf->reg_base + NIX_LF_SQ_OP_INT;
+		ptr = otx2_get_regaddr(pf, NIX_LF_SQ_OP_INT);
 		val = atomic64_fetch_add_relaxed((qidx << 44), ptr);
 		otx2_write64(pf, NIX_LF_SQ_OP_INT, (qidx << 44) |
 			     (val & NIX_SQINT_BITS));
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_reg.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_reg.h
index cfdd85cf2b4d..e84cf3cc67fd 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_reg.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_reg.h
@@ -58,8 +58,11 @@
 #define RVU_VF_MSIX_VECX_CTL(a)             (0x008 | (a) << 4)
 #define RVU_VF_MSIX_PBAX(a)                 (0xF0000 | (a) << 3)
 
+#define RVU_FUNC_BLKADDR_SHIFT		20
+#define RVU_FUNC_BLKADDR_MASK		0x1FULL
+
 /* NPA LF registers */
-#define NPA_LFBASE			(BLKADDR_NPA << 20)
+#define NPA_LFBASE			(BLKTYPE_NPA << RVU_FUNC_BLKADDR_SHIFT)
 #define NPA_LF_AURA_OP_ALLOCX(a)	(NPA_LFBASE | 0x10 | (a) << 3)
 #define NPA_LF_AURA_OP_FREE0            (NPA_LFBASE | 0x20)
 #define NPA_LF_AURA_OP_FREE1            (NPA_LFBASE | 0x28)
@@ -90,7 +93,7 @@
 #define NPA_LF_QINTX_ENA_W1C(a)         (NPA_LFBASE | 0x330 | (a) << 12)
 
 /* NIX LF registers */
-#define	NIX_LFBASE			(BLKADDR_NIX0 << 20)
+#define	NIX_LFBASE			(BLKTYPE_NIX << RVU_FUNC_BLKADDR_SHIFT)
 #define	NIX_LF_RX_SECRETX(a)		(NIX_LFBASE | 0x0 | (a) << 3)
 #define	NIX_LF_CFG			(NIX_LFBASE | 0x100)
 #define	NIX_LF_GINT			(NIX_LFBASE | 0x200)
@@ -148,7 +151,7 @@
 #define NIX_AF_TL3_TL2X_LINKX_CFG(a, b)	(0x1700 | (a) << 16 | (b) << 3)
 
 /* LMT LF registers */
-#define LMT_LFBASE			BIT_ULL(20)
+#define LMT_LFBASE			BIT_ULL(RVU_FUNC_BLKADDR_SHIFT)
 #define LMT_LF_LMTLINEX(a)		(LMT_LFBASE | 0x000 | (a) << 12)
 #define LMT_LF_LMTCANCEL		(LMT_LFBASE | 0x400)
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
index 209fe2212239..37885d9eeea8 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
@@ -30,7 +30,7 @@ static inline u64 otx2_nix_cq_op_status(struct otx2_nic *pfvf, int cq_idx)
 	atomic64_t *ptr;
 	u64 status;
 
-	ptr = (__force atomic64_t *)(pfvf->reg_base + NIX_LF_CQ_OP_STATUS);
+	ptr = (__force atomic64_t *)otx2_get_regaddr(pfvf, NIX_LF_CQ_OP_STATUS);
 
 	status = atomic64_fetch_add_relaxed(incr, ptr);
 
-- 
2.31.1

