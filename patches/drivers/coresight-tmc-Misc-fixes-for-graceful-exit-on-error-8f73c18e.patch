From a96348736c6bbedf91d7443a742dbab16ecf9f59 Mon Sep 17 00:00:00 2001
From: Linu Cherian <lcherian@marvell.com>
Date: Fri, 31 Jan 2020 11:18:45 +0530
Subject: [PATCH 0675/1921] coresight: tmc: Misc fixes for graceful exit on
 error

- Avoid redundant hrtimer_init called for every timer setup

- Ensure necessary free/unregister APIs are called for secure
  trace buffer as well whenever we free the non secure counter part

- Ensure we do necessary error checks during buffer read
  in CS_MODE_READ_PREVBOOT mode.

Change-Id: I87217c140815b08e124e98d5da96e4b203bb0391
Signed-off-by: Linu Cherian <lcherian@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/22626
Reviewed-on: https://sj1git1.cavium.com/22965
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/32250
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../hwtracing/coresight/coresight-tmc-etr.c    | 18 ++++++++++++++++--
 drivers/hwtracing/coresight/coresight-tmc.c    |  7 ++++---
 drivers/hwtracing/coresight/coresight-tmc.h    |  1 +
 3 files changed, 21 insertions(+), 5 deletions(-)

diff --git a/drivers/hwtracing/coresight/coresight-tmc-etr.c b/drivers/hwtracing/coresight/coresight-tmc-etr.c
index a234fa3563e8..c455da9c0ae7 100644
--- a/drivers/hwtracing/coresight/coresight-tmc-etr.c
+++ b/drivers/hwtracing/coresight/coresight-tmc-etr.c
@@ -273,6 +273,16 @@ static enum hrtimer_restart tmc_etr_timer_handler_global(struct hrtimer *t)
 	return HRTIMER_RESTART;
 }
 
+/* Timer init API common for both global and per core mode */
+void tmc_etr_timer_init(struct tmc_drvdata *drvdata)
+{
+	struct hrtimer *timer;
+
+	timer = is_etm_sync_mode_sw_global() ?
+		tmc_etr_tsync_global_timer() : &drvdata->timer;
+	hrtimer_init(timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+}
+
 /* Timer setup API common for both global and per core mode
  *
  * Global mode: Timer gets started only if its not active already.
@@ -303,7 +313,6 @@ static void tmc_etr_timer_setup(void *data)
 
 	timer = mode_global ?
 		tmc_etr_tsync_global_timer() : &drvdata->timer;
-	hrtimer_init(timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
 	timer->function = mode_global ?
 		tmc_etr_timer_handler_global : tmc_etr_timer_handler_percore;
 	dev_dbg(&drvdata->csdev->dev, "Starting sync timer, mode:%s period:%lld ns\n",
@@ -1720,6 +1729,9 @@ static void tmc_free_etr_buffer(void *config)
 	tmc_unregister_drvbuf(drvdata, etr_buf->hwaddr,
 					      etr_buf->size);
 
+	if (etr_buf->s_hwaddr)
+		tmc_free_secbuf(drvdata, etr_buf->s_hwaddr, etr_buf->size);
+
 	tmc_free_etr_buf(etr_perf->etr_buf);
 
 free_etr_perf_buffer:
@@ -2038,7 +2050,9 @@ int tmc_read_prepare_etr(struct tmc_drvdata *drvdata)
 
 	if (drvdata->mode == CS_MODE_READ_PREVBOOT) {
 		/* Initialize drvdata for reading trace data from last boot */
-		tmc_enable_etr_sink_sysfs(drvdata->csdev);
+		ret = tmc_enable_etr_sink_sysfs(drvdata->csdev);
+		if (ret)
+			return ret;
 		/* Update the buffer offset, len */
 		tmc_etr_sync_sysfs_buf(drvdata);
 		return 0;
diff --git a/drivers/hwtracing/coresight/coresight-tmc.c b/drivers/hwtracing/coresight/coresight-tmc.c
index acd45df61dcb..841484a72a8e 100644
--- a/drivers/hwtracing/coresight/coresight-tmc.c
+++ b/drivers/hwtracing/coresight/coresight-tmc.c
@@ -501,9 +501,10 @@ static int tmc_probe(struct amba_device *adev, const struct amba_id *id)
 	/* Update the smp target cpu */
 	drvdata->rc_cpu = is_etm_sync_mode_sw_global() ? SYNC_GLOBAL_CORE :
 		drvdata->cpu;
-	/* Used for SW sync insertion(global mode) */
-	if (!is_etm_sync_mode_hw())
-		tmc_etr_add_cpumap(drvdata);
+	if (!is_etm_sync_mode_hw()) {
+		tmc_etr_add_cpumap(drvdata); /* Used for global sync mode */
+		tmc_etr_timer_init(drvdata);
+	}
 
 	devid = readl_relaxed(drvdata->base + CORESIGHT_DEVID);
 	drvdata->config_type = BMVAL(devid, 6, 7);
diff --git a/drivers/hwtracing/coresight/coresight-tmc.h b/drivers/hwtracing/coresight/coresight-tmc.h
index a8b5f6337504..7542a4114893 100644
--- a/drivers/hwtracing/coresight/coresight-tmc.h
+++ b/drivers/hwtracing/coresight/coresight-tmc.h
@@ -331,6 +331,7 @@ ssize_t tmc_etb_get_sysfs_trace(struct tmc_drvdata *drvdata,
 /* ETR functions */
 int tmc_read_prepare_etr(struct tmc_drvdata *drvdata);
 int tmc_read_unprepare_etr(struct tmc_drvdata *drvdata);
+void tmc_etr_timer_init(struct tmc_drvdata *drvdata);
 void tmc_etr_add_cpumap(struct tmc_drvdata *drvdata);
 extern const struct coresight_ops tmc_etr_cs_ops;
 ssize_t tmc_etr_get_sysfs_trace(struct tmc_drvdata *drvdata,
-- 
2.31.1

