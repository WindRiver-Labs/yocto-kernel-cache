From 5b33e4779a070ddf6fcdd757ac90e251fd45949d Mon Sep 17 00:00:00 2001
From: Srujana Challa <schalla@marvell.com>
Date: Thu, 21 Jan 2021 19:24:17 +0530
Subject: [PATCH 1251/1921] octeontx2-af: add mailbox to configure reassembly
 timeout

Adds a new mailbox to configure the time limit for reassembly
entries using CPT_AF_RXC_TIME_CFG and CPT_AF_RXC_DFRG registers.

Signed-off-by: Srujana Challa <schalla@marvell.com>
Change-Id: I57e1846495fdfae8a8dc558e520d04015bbd3b08
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/41635
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/mbox.h  | 13 +++++
 .../ethernet/marvell/octeontx2/af/rvu_cpt.c   | 51 ++++++++++++++++---
 .../ethernet/marvell/octeontx2/af/rvu_reg.h   |  1 +
 3 files changed, 57 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
index e119f536afc8..0e6b20f1573e 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
@@ -222,6 +222,8 @@ M(CPT_RD_WR_REGISTER,	0xA02, cpt_rd_wr_register,  cpt_rd_wr_reg_msg,	\
 M(CPT_INLINE_IPSEC_CFG,	0xA04, cpt_inline_ipsec_cfg,			\
 			       cpt_inline_ipsec_cfg_msg, msg_rsp)	\
 M(CPT_STATS,            0xA05, cpt_sts, cpt_sts_req, cpt_sts_rsp)	\
+M(CPT_RXC_TIME_CFG,     0xA06, cpt_rxc_time_cfg, cpt_rxc_time_cfg_req,  \
+			       msg_rsp)                                 \
 /* REE mbox IDs (range 0xE00 - 0xFFF) */				\
 M(REE_CONFIG_LF,	0xE01, ree_config_lf, ree_lf_req_msg,		\
 				msg_rsp)				\
@@ -1716,6 +1718,17 @@ struct cpt_sts_rsp {
 	u64 diag;
 };
 
+/* Mailbox message request format to configure reassembly timeout. */
+struct cpt_rxc_time_cfg_req {
+	struct mbox_msghdr hdr;
+	int blkaddr;
+	u32 step;
+	u16 zombie_thres;
+	u16 zombie_limit;
+	u16 active_thres;
+	u16 active_limit;
+};
+
 /* REE mailbox error codes
  * Range 1001 - 1100.
  */
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
index 9095df3ae5a3..e09ebfec5346 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
@@ -146,6 +146,14 @@ void rvu_cpt_unregister_interrupts(struct rvu *rvu)
 		}
 }
 
+static bool is_cpt_blkaddr(int blkaddr)
+{
+	if (blkaddr != BLKADDR_CPT0 && blkaddr != BLKADDR_CPT1)
+		return false;
+
+	return true;
+}
+
 static bool is_cpt_pf(u16 pcifunc)
 {
 	if (rvu_get_pf(pcifunc) != cpt_pf_num)
@@ -249,8 +257,8 @@ int rvu_mbox_handler_cpt_lf_alloc(struct rvu *rvu,
 	u64 val;
 
 	blkaddr = req->blkaddr ? req->blkaddr : BLKADDR_CPT0;
-	if (blkaddr != BLKADDR_CPT0 && blkaddr != BLKADDR_CPT1)
-		return -ENODEV;
+	if (!is_cpt_blkaddr(blkaddr))
+		return -EINVAL;
 
 	if (req->eng_grpmsk == 0x0)
 		return CPT_AF_ERR_GRP_INVALID;
@@ -470,8 +478,8 @@ int rvu_mbox_handler_cpt_rd_wr_register(struct rvu *rvu,
 	struct rvu_block *block;
 
 	blkaddr = req->blkaddr ? req->blkaddr : BLKADDR_CPT0;
-	if (blkaddr != BLKADDR_CPT0 && blkaddr != BLKADDR_CPT1)
-		return -ENODEV;
+	if (!is_cpt_blkaddr(blkaddr))
+		return -EINVAL;
 
 	/* This message is accepted only if sent from CPT PF/VF */
 	if (!is_cpt_pf(req->hdr.pcifunc) &&
@@ -606,8 +614,8 @@ int rvu_mbox_handler_cpt_sts(struct rvu *rvu, struct cpt_sts_req *req,
 	int blkaddr;
 
 	blkaddr = req->blkaddr ? req->blkaddr : BLKADDR_CPT0;
-	if (blkaddr != BLKADDR_CPT0 && blkaddr != BLKADDR_CPT1)
-		return -ENODEV;
+	if (!is_cpt_blkaddr(blkaddr))
+		return -EINVAL;
 
 	/* This message is accepted only if sent from CPT PF/VF */
 	if (!is_cpt_pf(req->hdr.pcifunc) &&
@@ -635,6 +643,33 @@ int rvu_mbox_handler_cpt_sts(struct rvu *rvu, struct cpt_sts_req *req,
 	return 0;
 }
 
+int rvu_mbox_handler_cpt_rxc_time_cfg(struct rvu *rvu,
+				      struct cpt_rxc_time_cfg_req *req,
+				      struct msg_rsp *rsp)
+{
+	u64 dfrg_reg;
+	int blkaddr;
+
+	blkaddr = req->blkaddr ? req->blkaddr : BLKADDR_CPT0;
+	if (!is_cpt_blkaddr(blkaddr))
+		return -EINVAL;
+
+	/* This message is accepted only if sent from CPT PF/VF */
+	if (!is_cpt_pf(req->hdr.pcifunc) &&
+	    !is_cpt_vf(req->hdr.pcifunc))
+		return CPT_AF_ERR_ACCESS_DENIED;
+
+	dfrg_reg = (u64)req->zombie_thres << 48;
+	dfrg_reg |= (u64)req->zombie_limit << 32;
+	dfrg_reg |= (u64)req->active_thres << 16;
+	dfrg_reg |= (u64)req->active_limit;
+
+	rvu_write64(rvu, blkaddr, CPT_AF_RXC_TIME_CFG, req->step);
+	rvu_write64(rvu, blkaddr, CPT_AF_RXC_DFRG, dfrg_reg);
+
+	return 0;
+}
+
 static void cpt_lf_disable_iqueue(struct rvu *rvu, int blkaddr, int slot)
 {
 	u64 inprog, grp_ptr;
@@ -690,8 +725,8 @@ int rvu_cpt_lf_teardown(struct rvu *rvu, u16 pcifunc, int lf, int slot)
 	u64 reg;
 
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, pcifunc);
-	if (blkaddr != BLKADDR_CPT0 && blkaddr != BLKADDR_CPT1)
-		return -EINVAL;
+	if (blkaddr < 0)
+		return blkaddr;
 
 	/* Enable BAR2 ALIAS for this pcifunc. */
 	reg = BIT_ULL(16) | pcifunc;
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h
index eb2eb238aaf9..f73a6201b867 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h
@@ -715,6 +715,7 @@
 #define CPT_AF_CTX_PSH_LATENCY_PC       (0x49458ull)
 #define CPT_AF_RXC_TIME                 (0x50010ull)
 #define CPT_AF_RXC_TIME_CFG             (0x50018ull)
+#define CPT_AF_RXC_DFRG                 (0x50020ull)
 #define CPT_AF_RXC_ACTIVE_STS           (0x50028ull)
 #define CPT_AF_RXC_ZOMBIE_STS           (0x50030ull)
 #define CPT_AF_X2PX_LINK_CFG(a)         (0x51000ull | (u64)(a) << 3)
-- 
2.31.1

