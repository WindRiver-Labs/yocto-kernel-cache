From 93a1b1a6194a2c0339324bb61fa31a493e9af51f Mon Sep 17 00:00:00 2001
From: Radha Mohan Chintakuntla <radhac@marvell.com>
Date: Thu, 22 Apr 2021 22:50:35 -0700
Subject: [PATCH 1489/1921] octeontx2-npa: Fix freeing IRQ vectors

The IRQ handlers need to be freed before freeing the vectors. Otherwise
it will cause a BUG_ON() condition when any mailbox with AF fails and we
have to return in probe function.

Signed-off-by: Radha Mohan Chintakuntla <radhac@marvell.com>
Change-Id: I64adbb512df1962201697c1b17c1b6734d119460
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/50481
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Satananda Burla <sburla@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/soc/marvell/octeontx2-npa/npa.c | 17 ++++++++++++-----
 1 file changed, 12 insertions(+), 5 deletions(-)

diff --git a/drivers/soc/marvell/octeontx2-npa/npa.c b/drivers/soc/marvell/octeontx2-npa/npa.c
index 08e0c186a653..7a7750c88c64 100644
--- a/drivers/soc/marvell/octeontx2-npa/npa.c
+++ b/drivers/soc/marvell/octeontx2-npa/npa.c
@@ -1212,7 +1212,8 @@ static int npa_register_mbox_intr(struct npa_dev_t *npa_pf_dev, bool probe_af)
 	req = otx2_af_mbox_alloc_msg_ready(&npa_pf_dev->afpf_mbox);
 	if (!req) {
 		otx2_disable_afpf_mbox_intr(npa_pf_dev);
-		return -ENOMEM;
+		err = -ENOMEM;
+		goto err_free_intr;
 	}
 
 	err = npa_sync_mbox_msg(&npa_pf_dev->afpf_mbox);
@@ -1229,7 +1230,8 @@ static int npa_register_mbox_intr(struct npa_dev_t *npa_pf_dev, bool probe_af)
 	    otx2_af_mbox_alloc_msg_attach_resources(&npa_pf_dev->afpf_mbox);
 	if (!attach) {
 		mutex_unlock(&npa_pf_dev->lock);
-		return -ENOMEM;
+		err = -ENOMEM;
+		goto err_free_intr;
 	}
 
 	attach->npalf = true;
@@ -1237,25 +1239,30 @@ static int npa_register_mbox_intr(struct npa_dev_t *npa_pf_dev, bool probe_af)
 	err = npa_sync_mbox_msg(&npa_pf_dev->afpf_mbox);
 	if (err) {
 		mutex_unlock(&npa_pf_dev->lock);
-		return err;
+		goto err_free_intr;
 	}
 
 	/* Get NPA MSIX vector offsets */
 	msix = otx2_af_mbox_alloc_msg_msix_offset(&npa_pf_dev->afpf_mbox);
 	if (!msix) {
 		mutex_unlock(&npa_pf_dev->lock);
-		return -ENOMEM;
+		err = -ENOMEM;
+		goto err_free_intr;
 	}
 
 	err = npa_sync_mbox_msg(&npa_pf_dev->afpf_mbox);
 	if (err) {
 		mutex_unlock(&npa_pf_dev->lock);
-		return err;
+		goto err_free_intr;
 	}
 
 	mutex_unlock(&npa_pf_dev->lock);
 
 	return 0;
+
+err_free_intr:
+	otx2_free_afpf_mbox_intr(npa_pf_dev);
+	return err;
 }
 
 static void npa_afpf_mbox_destroy(struct npa_dev_t *npa_pf_dev)
-- 
2.31.1

