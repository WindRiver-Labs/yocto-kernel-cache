From 6fde730974177b2ba7842bfd3a2966451a3194bd Mon Sep 17 00:00:00 2001
From: Naga Sureshkumar Relli <naga.sureshkumar.relli@xilinx.com>
Date: Tue, 25 Feb 2020 23:21:45 -0700
Subject: [PATCH 1242/1852] mtd: rawnand: pl353: Fix column and row address
 calculation

commit 6f1d1fdff4b3bb1e8e87896ccda3a3e0ec881a8a from
https://github.com/Xilinx/linux-xlnx.git

The existing column address claculation is ignoring the 5th address cycle.
Ex: if flash address requested is 0x00001ffc, then the column is 0x1 and
row address should be 0xffc00000 which is totally of 5 address cycles.
but the existing implementation is splitting the column address as 0x1
and row address as 0x00000ffc which is incorrect.
update it properly inorder to read bbt correctly.

Signed-off-by: Naga Sureshkumar Relli <naga.sureshkumar.relli@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/mtd/nand/raw/pl353_nand.c | 15 ++++++++-------
 1 file changed, 8 insertions(+), 7 deletions(-)

diff --git a/drivers/mtd/nand/raw/pl353_nand.c b/drivers/mtd/nand/raw/pl353_nand.c
index 599b17276066..1f175b26724c 100644
--- a/drivers/mtd/nand/raw/pl353_nand.c
+++ b/drivers/mtd/nand/raw/pl353_nand.c
@@ -815,14 +815,15 @@ static int pl353_nand_exec_op_cmd(struct nand_chip *chip,
 			i = nand_subop_get_addr_start_off(subop, op_id);
 			naddrs = nand_subop_get_num_addr_cyc(subop,
 							     op_id);
-			for (; i < naddrs; i++) {
-				val = instr->ctx.addr.addrs[i];
+			val = instr->ctx.addr.addrs[i];
+			for (i = 0; i < min_t(unsigned int, 4, naddrs); i++)
+				col |= instr->ctx.addr.addrs[i] << (8 * i);
 
-				if (i < 2)
-					col |= GET_ADDR(i, val);
-				else
-					row |= GET_ADDR(i - 2, val);
-			}
+			if (naddrs >= 5)
+				row = instr->ctx.addr.addrs[4];
+
+			if (naddrs >= 6)
+				row |= (instr->ctx.addr.addrs[5] << 8);
 
 			break;
 
-- 
2.31.1

