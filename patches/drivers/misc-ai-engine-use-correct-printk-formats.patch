From 19ed4013b0df5847e6c4d158382c2e175275f10c Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Thu, 18 Jun 2020 17:51:34 -0700
Subject: [PATCH 1401/1852] misc: ai-engine: use correct printk formats
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Correct printk format specifiers for size_t is %zu or %zx. Otherwise,
it gives warngins as below:

drivers/misc/xilinx-ai-engine/ai-engine-part.c:74:24: warning: format ‘%lu’ expects argument of type ‘long unsigned int’, but argument 3 has type ‘size_t {aka unsigned int}’ [-Wformat=]
   dev_err(&apart->dev, "Invalid reg operation len %lu.\n", len);
                        ^
...

Reported-by: kernel test robot <lkp@intel.com>
Signed-off-by: Hyun Kwon <hyun.kwon@xilinx.com>
Acked-by: Wendy Liang <wendy.liang@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/misc/xilinx-ai-engine/ai-engine-part.c | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/drivers/misc/xilinx-ai-engine/ai-engine-part.c b/drivers/misc/xilinx-ai-engine/ai-engine-part.c
index 555b68c9f841..6564491673fd 100644
--- a/drivers/misc/xilinx-ai-engine/ai-engine-part.c
+++ b/drivers/misc/xilinx-ai-engine/ai-engine-part.c
@@ -65,13 +65,13 @@ static int aie_part_reg_validation(struct aie_partition *apart, size_t offset,
 	adev = apart->adev;
 	if (offset % sizeof(u32)) {
 		dev_err(&apart->dev,
-			"Invalid reg off(0x%lx), not 32bit aligned.\n",
+			"Invalid reg off(0x%zx), not 32bit aligned.\n",
 			offset);
 		return -EINVAL;
 	}
 
 	if (len % sizeof(u32)) {
-		dev_err(&apart->dev, "Invalid reg operation len %lu.\n", len);
+		dev_err(&apart->dev, "Invalid reg operation len %zu.\n", len);
 		return -EINVAL;
 	}
 
@@ -79,7 +79,7 @@ static int aie_part_reg_validation(struct aie_partition *apart, size_t offset,
 	regend64 = regoff + len;
 	if (regend64 >= BIT_ULL(adev->row_shift)) {
 		dev_err(&apart->dev,
-			"Invalid reg operation len %lu.\n", len);
+			"Invalid reg operation len %zu.\n", len);
 		return -EINVAL;
 	}
 
@@ -113,7 +113,7 @@ static int aie_part_reg_validation(struct aie_partition *apart, size_t offset,
 		    (regend32 >= regs->soff && regend32 <= regs->eoff)) {
 			if (!writable) {
 				dev_err(&apart->dev,
-					"reg 0x%lx,0x%lx not writable.\n",
+					"reg 0x%zx,0x%zx not writable.\n",
 					offset, len);
 				return -EINVAL;
 			}
@@ -150,7 +150,7 @@ static int aie_part_write_register(struct aie_partition *apart, size_t offset,
 
 	ret = aie_part_reg_validation(apart, offset, len, 1);
 	if (ret < 0) {
-		dev_err(&apart->dev, "failed to write to 0x%lx,0x%lx.\n",
+		dev_err(&apart->dev, "failed to write to 0x%zx,0x%zx.\n",
 			offset, len);
 		return ret;
 	}
@@ -190,7 +190,7 @@ static int aie_part_read_register(struct aie_partition *apart, size_t offset,
 
 	ret = aie_part_reg_validation(apart, offset, len, 0);
 	if (ret) {
-		dev_err(&apart->dev, "Invalid read request 0x%lx,0x%lx.\n",
+		dev_err(&apart->dev, "Invalid read request 0x%zx,0x%zx.\n",
 			offset, len);
 		return -EINVAL;
 	}
-- 
2.31.1

