From 6248344c522d808ae114466f2e7ea9d065830f8d Mon Sep 17 00:00:00 2001
From: Aleksey Makarov <amakarov@marvell.com>
Date: Mon, 17 Dec 2018 13:31:49 +0530
Subject: [PATCH 056/767] octeontx2-pf: Implement ndo_tx_timeout callback

commit d38ad9e42e8b71f12894db4bd4ff46e95a78c975 from
git@git.assembla.com:cavium/WindRiver.linux.git

This patch implements .ndo_tx_timeout() for OcteonTX2
network driver.  On the timeout event, the implementation
just reinitializes the interface by calling stop()/open().

Also check for CQ errors after reading CQ status for CQE count
and trigger interface reset if there is a unrecoverable error.

Change-Id: Ia41fac6a916153f17e474e02efdbbd469c47327e
Signed-off-by: Aleksey Makarov <amakarov@marvell.com>
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/nic/otx2_common.c  |  7 +++++++
 .../ethernet/marvell/octeontx2/nic/otx2_common.h  |  2 ++
 .../net/ethernet/marvell/octeontx2/nic/otx2_pf.c  | 15 +++++++++++++++
 .../ethernet/marvell/octeontx2/nic/otx2_txrx.c    | 13 +++++++++++++
 4 files changed, 37 insertions(+)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
index 0d6107bf0c2b..8a2b8a258f5d 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
@@ -208,6 +208,13 @@ dma_addr_t otx2_alloc_rbuf(struct otx2_nic *pfvf, struct otx2_pool *pool,
 	return iova;
 }
 
+void otx2_tx_timeout(struct net_device *netdev)
+{
+	struct otx2_nic *pfvf = netdev_priv(netdev);
+
+	schedule_work(&pfvf->reset_task);
+}
+
 static int otx2_get_link(struct otx2_nic *pfvf)
 {
 	int link = 0;
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index 24e7837b4869..48678cb8f2fe 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -102,6 +102,7 @@ struct otx2_nic {
 	u16			pcifunc;
 	u16			rx_chan_base;
 	u16			tx_chan_base;
+	struct work_struct	reset_task;
 };
 
 /* Register read/write APIs */
@@ -307,6 +308,7 @@ int otx2_hw_set_mac_addr(struct otx2_nic *pfvf, struct net_device *netdev);
 int otx2_set_mac_address(struct net_device *netdev, void *p);
 int otx2_change_mtu(struct net_device *netdev, int new_mtu);
 int otx2_hw_set_mtu(struct otx2_nic *pfvf, int mtu);
+void otx2_tx_timeout(struct net_device *netdev);
 
 /* RVU block related APIs */
 int otx2_attach_npa_nix(struct otx2_nic *pfvf);
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index 4e11e20ce6a3..039dddf8872c 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -640,6 +640,18 @@ static void otx2_set_rx_mode(struct net_device *netdev)
 	otx2_sync_mbox_msg_busy_poll(&pf->mbox);
 }
 
+static void otx2_reset_task(struct work_struct *work)
+{
+	struct otx2_nic *pf = container_of(work, struct otx2_nic, reset_task);
+
+	if (!netif_running(pf->netdev))
+		return;
+
+	otx2_stop(pf->netdev);
+	otx2_open(pf->netdev);
+	netif_trans_update(pf->netdev);
+}
+
 static const struct net_device_ops otx2_netdev_ops = {
 	.ndo_open		= otx2_open,
 	.ndo_stop		= otx2_stop,
@@ -647,6 +659,7 @@ static const struct net_device_ops otx2_netdev_ops = {
 	.ndo_set_mac_address    = otx2_set_mac_address,
 	.ndo_change_mtu		= otx2_change_mtu,
 	.ndo_set_rx_mode	= otx2_set_rx_mode,
+	.ndo_tx_timeout		= otx2_tx_timeout,
 };
 
 static int otx2_probe(struct pci_dev *pdev, const struct pci_device_id *id)
@@ -778,6 +791,8 @@ static int otx2_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	netdev->min_mtu = OTX2_MIN_MTU;
 	netdev->max_mtu = OTX2_MAX_MTU;
 
+	INIT_WORK(&pf->reset_task, otx2_reset_task);
+
 	err = register_netdev(netdev);
 	if (err) {
 		dev_err(dev, "Failed to register netdevice\n");
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
index 769945f2c3ac..f2a12eccba52 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.c
@@ -274,6 +274,19 @@ int otx2_napi_handler(struct otx2_cq_queue *cq,
 	s64 bufptr;
 
 	cq_status = otx2_nix_cq_op_status(pfvf, cq->cq_idx);
+	if (cq_status & BIT_ULL(63)) {
+		dev_err(pfvf->dev, "CQ operation error");
+		pfvf->intf_down = true;
+		schedule_work(&pfvf->reset_task);
+		return 0;
+	}
+	if (cq_status & BIT_ULL(46)) {
+		dev_err(pfvf->dev, "CQ stopped due to error");
+		pfvf->intf_down = true;
+		schedule_work(&pfvf->reset_task);
+		return 0;
+	}
+
 	cq_head = (cq_status >> 20) & 0xFFFFF;
 	cq_tail = cq_status & 0xFFFFF;
 
-- 
2.31.1

