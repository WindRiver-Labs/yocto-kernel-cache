From 2fc8ddab6b1ffae518628f1f2d39b39715bac67e Mon Sep 17 00:00:00 2001
From: Naveen Mamindlapalli <naveenm@marvell.com>
Date: Tue, 28 Apr 2020 16:53:02 +0530
Subject: [PATCH 0463/1921] octeontx2-bphy-netdev: netdev cleanup in char dev
 close

added cleanup of netdev in char device close function to handle
application crash.

Change-Id: If63bb80043a7421c61f7bb6744ec415a8ea91aca
Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/27654
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../marvell/octeontx2/bphy/otx2_rfoe.c        | 40 +++++++++++++++++--
 1 file changed, 36 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
index cdee13dd4eb7..134c726d1964 100644
--- a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
+++ b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
@@ -1237,13 +1237,14 @@ static int otx2_rfoe_parse_and_init_intf(struct otx2_rfoe_cdev_priv *cdev,
 		if (drv_ctx->valid) {
 			netdev = drv_ctx->netdev;
 			priv = netdev_priv(netdev);
+			unregister_netdev(netdev);
 			for (idx = 0; idx < PACKET_TYPE_MAX; idx++) {
 				ft_cfg = &priv->rx_ft_cfg[idx];
 				netif_napi_del(&ft_cfg->napi);
 			}
-			unregister_netdev(netdev);
 			kfree(priv->rfoe_common);
 			free_netdev(netdev);
+			drv_ctx->valid = 0;
 		}
 	}
 	return ret;
@@ -1282,7 +1283,7 @@ static long otx2_rfoe_cdev_ioctl(struct file *filp, unsigned int cmd,
 		}
 		ret = otx2_rfoe_parse_and_init_intf(cdev, &intf_cfg[0]);
 		if (ret == 0) {
-			/* Enable GPINT(1) bits */
+			/* Enable GPINT Rx and Tx interrupts */
 			writeq(0xFFFFFFFF,
 			       bphy_reg_base + PSM_INT_GP_ENA_W1S(1));
 
@@ -1303,16 +1304,17 @@ static long otx2_rfoe_cdev_ioctl(struct file *filp, unsigned int cmd,
 			if (drv_ctx->valid) {
 				netdev = drv_ctx->netdev;
 				priv = netdev_priv(netdev);
+				unregister_netdev(netdev);
 				for (idx = 0; idx < PACKET_TYPE_MAX; idx++) {
 					ft_cfg = &priv->rx_ft_cfg[idx];
 					netif_napi_del(&ft_cfg->napi);
 				}
-				unregister_netdev(netdev);
 				kfree(priv->rfoe_common);
 				free_netdev(netdev);
+				drv_ctx->valid = 0;
 			}
 		}
-		/* Disable GPINT bits */
+		/* Disable GPINT Rx and Tx interrupts */
 		writeq(0xFFFFFFFF,
 		       bphy_reg_base + PSM_INT_GP_ENA_W1C(1));
 
@@ -1356,8 +1358,38 @@ static int otx2_rfoe_cdev_open(struct inode *inode, struct file *filp)
 static int otx2_rfoe_cdev_release(struct inode *inode, struct file *filp)
 {
 	struct otx2_rfoe_cdev_priv *cdev = filp->private_data;
+	struct otx2_rfoe_drv_ctx *drv_ctx = NULL;
+	struct otx2_rfoe_ndev_priv *priv;
+	struct net_device *netdev;
+	struct rx_ft_cfg *ft_cfg;
+	int i, idx;
 
 	mutex_lock(&cdev->mutex_lock);
+
+	if (!cdev->odp_intf_cfg)
+		goto cdev_release_exit;
+
+	for (i = 0; i < RFOE_MAX_INTF; i++) {
+		drv_ctx = &rfoe_drv_ctx[i];
+		if (drv_ctx->valid) {
+			netdev = drv_ctx->netdev;
+			priv = netdev_priv(netdev);
+			unregister_netdev(netdev);
+			for (idx = 0; idx < PACKET_TYPE_MAX; idx++) {
+				ft_cfg = &priv->rx_ft_cfg[idx];
+				netif_napi_del(&ft_cfg->napi);
+			}
+			kfree(priv->rfoe_common);
+			free_netdev(netdev);
+			drv_ctx->valid = 0;
+		}
+	}
+
+	/* Disable GPINT Rx and Tx interrupts */
+	writeq(0xFFFFFFFF, bphy_reg_base + PSM_INT_GP_ENA_W1C(1));
+	cdev->odp_intf_cfg = 0;
+
+cdev_release_exit:
 	cdev->is_open = 0;
 	mutex_unlock(&cdev->mutex_lock);
 
-- 
2.31.1

