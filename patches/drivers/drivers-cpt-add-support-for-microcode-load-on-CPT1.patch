From 26c945dea29f6fd3f13b453adf661cb31284fdf0 Mon Sep 17 00:00:00 2001
From: Srujana Challa <schalla@marvell.com>
Date: Mon, 29 Jun 2020 15:19:07 +0530
Subject: [PATCH 0521/1921] drivers: cpt - add support for microcode load on
 CPT1

adds support to mirror the microcode and engine groups
on block CPT1.

Change-Id: I37f270dc197725130e45668c64e6ad52687e00ca
Signed-off-by: Srujana Challa <schalla@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/31172
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Mahipal Challa <mchalla@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../marvell/octeontx2/otx2_cpt_mbox_common.c  |  19 ++-
 drivers/crypto/marvell/octeontx2/otx2_cptpf.h |   3 +
 .../marvell/octeontx2/otx2_cptpf_main.c       |  30 ++++-
 .../marvell/octeontx2/otx2_cptpf_ucode.c      | 113 ++++++++++++++----
 drivers/crypto/marvell/octeontx2/otx2_cptvf.h |   1 +
 5 files changed, 140 insertions(+), 26 deletions(-)

diff --git a/drivers/crypto/marvell/octeontx2/otx2_cpt_mbox_common.c b/drivers/crypto/marvell/octeontx2/otx2_cpt_mbox_common.c
index ba6a86f8a177..1c8cd36cd2e7 100644
--- a/drivers/crypto/marvell/octeontx2/otx2_cpt_mbox_common.c
+++ b/drivers/crypto/marvell/octeontx2/otx2_cpt_mbox_common.c
@@ -48,6 +48,20 @@ static inline int get_vf_id(struct pci_dev *pdev)
 	return 0;
 }
 
+static inline u8 cpt_get_blkaddr(struct pci_dev *pdev)
+{
+	struct otx2_cptpf_dev *cptpf;
+	struct otx2_cptvf_dev *cptvf;
+
+	if (pdev->is_physfn) {
+		cptpf = (struct otx2_cptpf_dev *) pci_get_drvdata(pdev);
+		return cptpf->blkaddr;
+	}
+
+	cptvf = (struct otx2_cptvf_dev *) pci_get_drvdata(pdev);
+	return cptvf->blkaddr;
+}
+
 char *otx2_cpt_get_mbox_opcode_str(int msg_opcode)
 {
 	char *str = "Unknown";
@@ -147,7 +161,6 @@ int otx2_cpt_attach_rscrs_msg(struct pci_dev *pdev)
 		return -EFAULT;
 	}
 
-	memset(req, 0, sizeof(*req));
 	req->hdr.id = MBOX_MSG_ATTACH_RESOURCES;
 	req->hdr.sig = OTX2_MBOX_REQ_SIG;
 	req->hdr.pcifunc = OTX2_CPT_RVU_PFFUNC(get_pf_id(pdev),
@@ -178,7 +191,6 @@ int otx2_cpt_detach_rsrcs_msg(struct pci_dev *pdev)
 		return -EFAULT;
 	}
 
-	memset(req, 0, sizeof(*req));
 	req->hdr.id = MBOX_MSG_DETACH_RESOURCES;
 	req->hdr.sig = OTX2_MBOX_REQ_SIG;
 	req->hdr.pcifunc = OTX2_CPT_RVU_PFFUNC(get_pf_id(pdev),
@@ -207,7 +219,6 @@ int otx2_cpt_msix_offset_msg(struct pci_dev *pdev)
 		return -EFAULT;
 	}
 
-	memset(req, 0, sizeof(*req));
 	req->id = MBOX_MSG_MSIX_OFFSET;
 	req->sig = OTX2_MBOX_REQ_SIG;
 	req->pcifunc = OTX2_CPT_RVU_PFFUNC(get_pf_id(pdev), get_vf_id(pdev));
@@ -251,6 +262,7 @@ int otx2_cpt_add_read_af_reg(struct pci_dev *pdev, u64 reg, u64 *val)
 	reg_msg->is_write = 0;
 	reg_msg->reg_offset = reg;
 	reg_msg->ret_val = val;
+	reg_msg->blkaddr = cpt_get_blkaddr(pdev);
 
 	return 0;
 }
@@ -275,6 +287,7 @@ int otx2_cpt_add_write_af_reg(struct pci_dev *pdev, u64 reg, u64 val)
 	reg_msg->is_write = 1;
 	reg_msg->reg_offset = reg;
 	reg_msg->val = val;
+	reg_msg->blkaddr = cpt_get_blkaddr(pdev);
 
 	return 0;
 }
diff --git a/drivers/crypto/marvell/octeontx2/otx2_cptpf.h b/drivers/crypto/marvell/octeontx2/otx2_cptpf.h
index 5132109d2a4e..ed748d6aa7ef 100644
--- a/drivers/crypto/marvell/octeontx2/otx2_cptpf.h
+++ b/drivers/crypto/marvell/octeontx2/otx2_cptpf.h
@@ -74,6 +74,9 @@ struct otx2_cptpf_dev {
 	u8 crypto_eng_grp;	/* Symmetric crypto engine group number */
 	u8 sso_pf_func_ovrd;	/* SSO PF_FUNC override bit */
 	u8 kvf_limits;		/* Kernel VF limits */
+	/* BLKADDR_CPT0/BLKADDR_CPT1 or 0 for BLKADDR_CPT0 */
+	u8 blkaddr;
+	bool cpt1_implemented;
 };
 
 irqreturn_t otx2_cptpf_afpf_mbox_intr(int irq, void *arg);
diff --git a/drivers/crypto/marvell/octeontx2/otx2_cptpf_main.c b/drivers/crypto/marvell/octeontx2/otx2_cptpf_main.c
index 6a7000edf35a..823d757ce845 100644
--- a/drivers/crypto/marvell/octeontx2/otx2_cptpf_main.c
+++ b/drivers/crypto/marvell/octeontx2/otx2_cptpf_main.c
@@ -265,7 +265,7 @@ static void cptpf_vfpf_mbox_destroy(struct otx2_cptpf_dev *cptpf)
 	otx2_mbox_destroy(&cptpf->vfpf_mbox);
 }
 
-static int cptpf_device_reset(struct otx2_cptpf_dev *cptpf)
+static int cptx_device_reset(struct otx2_cptpf_dev *cptpf)
 {
 	int timeout = 10, ret;
 	u64 reg;
@@ -291,11 +291,39 @@ static int cptpf_device_reset(struct otx2_cptpf_dev *cptpf)
 	return ret;
 }
 
+static int cptpf_device_reset(struct otx2_cptpf_dev *cptpf)
+{
+	int ret = 0;
+
+	if (cptpf->cpt1_implemented) {
+		cptpf->blkaddr = BLKADDR_CPT1;
+		ret = cptx_device_reset(cptpf);
+		if (ret)
+			return ret;
+	}
+	cptpf->blkaddr = BLKADDR_CPT0;
+	ret = cptx_device_reset(cptpf);
+
+	return ret;
+}
+
+static void cpt_check_block_implemented(struct otx2_cptpf_dev *cptpf)
+{
+	u64 cfg;
+
+	cfg = otx2_cpt_read64(cptpf->reg_base, BLKADDR_RVUM, 0,
+			      RVU_PF_BLOCK_ADDRX_DISC(BLKADDR_CPT1));
+	if (cfg & BIT_ULL(11))
+		cptpf->cpt1_implemented = true;
+}
+
 static int cptpf_device_init(struct otx2_cptpf_dev *cptpf)
 {
 	union otx2_cptx_af_constants1 af_cnsts1 = {0};
 	int ret = 0;
 
+	/* check if 'implemented' bit is set for block BLKADDR_CPT1 */
+	cpt_check_block_implemented(cptpf);
 	/* Reset the CPT PF device */
 	ret = cptpf_device_reset(cptpf);
 	if (ret)
diff --git a/drivers/crypto/marvell/octeontx2/otx2_cptpf_ucode.c b/drivers/crypto/marvell/octeontx2/otx2_cptpf_ucode.c
index f3e7603b41e3..807bc397fc8d 100644
--- a/drivers/crypto/marvell/octeontx2/otx2_cptpf_ucode.c
+++ b/drivers/crypto/marvell/octeontx2/otx2_cptpf_ucode.c
@@ -223,9 +223,9 @@ static int is_mem_zero(const char *ptr, int size)
 	return 1;
 }
 
-static int cpt_set_ucode_base(struct otx2_cpt_eng_grp_info *eng_grp, void *obj)
+static int cptx_set_ucode_base(struct otx2_cpt_eng_grp_info *eng_grp,
+			       struct otx2_cptpf_dev *cptpf)
 {
-	struct otx2_cptpf_dev *cptpf = obj;
 	struct otx2_cpt_engs_rsvd *engs;
 	dma_addr_t dma_addr;
 	int i, bit, ret;
@@ -259,18 +259,30 @@ static int cpt_set_ucode_base(struct otx2_cpt_eng_grp_info *eng_grp, void *obj)
 	return 0;
 }
 
-static int cpt_detach_and_disable_cores(struct otx2_cpt_eng_grp_info *eng_grp,
-					void *obj)
+static int cpt_set_ucode_base(struct otx2_cpt_eng_grp_info *eng_grp, void *obj)
 {
 	struct otx2_cptpf_dev *cptpf = obj;
-	struct otx2_cpt_bitmap bmap;
-	int i, timeout = 10;
-	int busy, ret;
-	u64 reg;
+	int ret;
 
-	bmap = get_cores_bmap(&cptpf->pdev->dev, eng_grp);
-	if (!bmap.size)
-		return -EINVAL;
+	if (cptpf->cpt1_implemented) {
+		cptpf->blkaddr = BLKADDR_CPT1;
+		ret = cptx_set_ucode_base(eng_grp, cptpf);
+		if (ret)
+			return ret;
+	}
+	cptpf->blkaddr = BLKADDR_CPT0;
+	ret = cptx_set_ucode_base(eng_grp, cptpf);
+
+	return ret;
+}
+
+static int cptx_detach_and_disable_cores(struct otx2_cpt_eng_grp_info *eng_grp,
+					 struct otx2_cptpf_dev *cptpf,
+					 struct otx2_cpt_bitmap bmap)
+{
+	int i, busy, ret;
+	int timeout = 10;
+	u64 reg;
 
 	/* Detach the cores from group */
 	for_each_set_bit(i, bmap.bits, bmap.size) {
@@ -323,18 +335,36 @@ static int cpt_detach_and_disable_cores(struct otx2_cpt_eng_grp_info *eng_grp,
 	return 0;
 }
 
-static int cpt_attach_and_enable_cores(struct otx2_cpt_eng_grp_info *eng_grp,
-				       void *obj)
+static int cpt_detach_and_disable_cores(struct otx2_cpt_eng_grp_info *eng_grp,
+					void *obj)
 {
 	struct otx2_cptpf_dev *cptpf = obj;
 	struct otx2_cpt_bitmap bmap;
-	int i, ret;
-	u64 reg;
+	int ret;
 
 	bmap = get_cores_bmap(&cptpf->pdev->dev, eng_grp);
 	if (!bmap.size)
 		return -EINVAL;
 
+	if (cptpf->cpt1_implemented) {
+		cptpf->blkaddr = BLKADDR_CPT1;
+		ret = cptx_detach_and_disable_cores(eng_grp, cptpf, bmap);
+		if (ret)
+			return ret;
+	}
+	cptpf->blkaddr = BLKADDR_CPT0;
+	ret = cptx_detach_and_disable_cores(eng_grp, cptpf, bmap);
+
+	return ret;
+}
+
+static int cptx_attach_and_enable_cores(struct otx2_cpt_eng_grp_info *eng_grp,
+					struct otx2_cptpf_dev *cptpf,
+					struct otx2_cpt_bitmap bmap)
+{
+	int i, ret;
+	u64 reg;
+
 	/* Attach the cores to the group */
 	for_each_set_bit(i, bmap.bits, bmap.size) {
 		ret = otx2_cpt_read_af_reg(cptpf->pdev, CPT_AF_EXEX_CTL2(i),
@@ -365,6 +395,29 @@ static int cpt_attach_and_enable_cores(struct otx2_cpt_eng_grp_info *eng_grp,
 	return ret;
 }
 
+static int cpt_attach_and_enable_cores(struct otx2_cpt_eng_grp_info *eng_grp,
+				       void *obj)
+{
+	struct otx2_cptpf_dev *cptpf = obj;
+	struct otx2_cpt_bitmap bmap;
+	int ret;
+
+	bmap = get_cores_bmap(&cptpf->pdev->dev, eng_grp);
+	if (!bmap.size)
+		return -EINVAL;
+
+	if (cptpf->cpt1_implemented) {
+		cptpf->blkaddr = BLKADDR_CPT1;
+		ret = cptx_attach_and_enable_cores(eng_grp, cptpf, bmap);
+		if (ret)
+			return ret;
+	}
+	cptpf->blkaddr = BLKADDR_CPT0;
+	ret = cptx_attach_and_enable_cores(eng_grp, cptpf, bmap);
+
+	return ret;
+}
+
 static int process_tar_file(struct device *dev,
 			    struct tar_arch_info_t *tar_arch, char *filename,
 			    const u8 *data, int size)
@@ -2024,16 +2077,12 @@ void otx2_cpt_set_eng_grps_is_rdonly(struct otx2_cpt_eng_grps *eng_grps,
 	mutex_unlock(&eng_grps->lock);
 }
 
-int otx2_cpt_disable_all_cores(struct otx2_cptpf_dev *cptpf)
+static int cptx_disable_all_cores(struct otx2_cptpf_dev *cptpf, int total_cores)
 {
-	int i, ret, busy, total_cores;
-	int timeout = 10;
+	int timeout = 10, ret;
+	int i, busy;
 	u64 reg;
 
-	total_cores = cptpf->eng_grps.avail.max_se_cnt +
-		      cptpf->eng_grps.avail.max_ie_cnt +
-		      cptpf->eng_grps.avail.max_ae_cnt;
-
 	/* Disengage the cores from groups */
 	for (i = 0; i < total_cores; i++) {
 		ret = otx2_cpt_add_write_af_reg(cptpf->pdev,
@@ -2079,6 +2128,26 @@ int otx2_cpt_disable_all_cores(struct otx2_cptpf_dev *cptpf)
 	return ret;
 }
 
+int otx2_cpt_disable_all_cores(struct otx2_cptpf_dev *cptpf)
+{
+	int total_cores, ret;
+
+	total_cores = cptpf->eng_grps.avail.max_se_cnt +
+		      cptpf->eng_grps.avail.max_ie_cnt +
+		      cptpf->eng_grps.avail.max_ae_cnt;
+
+	if (cptpf->cpt1_implemented) {
+		cptpf->blkaddr = BLKADDR_CPT1;
+		ret = cptx_disable_all_cores(cptpf, total_cores);
+		if (ret)
+			return ret;
+	}
+	cptpf->blkaddr = BLKADDR_CPT0;
+	ret = cptx_disable_all_cores(cptpf, total_cores);
+
+	return ret;
+}
+
 void otx2_cpt_cleanup_eng_grps(struct pci_dev *pdev,
 			       struct otx2_cpt_eng_grps *eng_grps)
 {
diff --git a/drivers/crypto/marvell/octeontx2/otx2_cptvf.h b/drivers/crypto/marvell/octeontx2/otx2_cptvf.h
index 8ecd4130461f..51a661bc4c1b 100644
--- a/drivers/crypto/marvell/octeontx2/otx2_cptvf.h
+++ b/drivers/crypto/marvell/octeontx2/otx2_cptvf.h
@@ -25,6 +25,7 @@ struct otx2_cptvf_dev {
 	struct otx2_mbox	pfvf_mbox;
 	struct work_struct	pfvf_mbox_work;
 	struct workqueue_struct *pfvf_mbox_wq;
+	u8 blkaddr;
 };
 
 irqreturn_t otx2_cptvf_pfvf_mbox_intr(int irq, void *arg);
-- 
2.31.1

