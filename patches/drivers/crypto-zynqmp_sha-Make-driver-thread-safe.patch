From ae974e7b785d001762a19ed75b22ee3cb8ac7591 Mon Sep 17 00:00:00 2001
From: Bharath Mulagondla <bharath.mulagondla@xilinx.com>
Date: Wed, 11 Nov 2020 16:24:01 +0530
Subject: [PATCH 1742/1852] crypto: zynqmp_sha: Make driver thread-safe

commit 61e889430e4c71c59bc43d5b4a23ef1f5845cd70 from
https://github.com/Xilinx/linux-xlnx.git

The current implementation of the driver is not thread-safe. Added
a mutex where init acquires the lock and final releases it. This
way no other thread can change the state of the driver in between.

Signed-off-by: Bharath Mulagondla <bharath.mulagondla@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/crypto/zynqmp-sha.c | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/drivers/crypto/zynqmp-sha.c b/drivers/crypto/zynqmp-sha.c
index be66a77f3af2..f759ef0569e9 100644
--- a/drivers/crypto/zynqmp-sha.c
+++ b/drivers/crypto/zynqmp-sha.c
@@ -21,6 +21,7 @@
 #include <crypto/hash.h>
 #include <crypto/internal/hash.h>
 #include <linux/firmware/xlnx-zynqmp.h>
+#include <linux/mutex.h>
 
 #define ZYNQMP_SHA3_INIT	1
 #define ZYNQMP_SHA3_UPDATE	2
@@ -61,6 +62,8 @@ struct zynqmp_sha_drv {
 	struct list_head	dev_list;
 	/* the lock protects queue and dev list*/
 	spinlock_t		lock;
+	/* the hw_engine_mutex makes the driver thread-safe */
+	struct mutex		hw_engine_mutex;
 };
 
 static struct zynqmp_sha_drv zynqmp_sha = {
@@ -96,8 +99,13 @@ static int zynqmp_sha_init(struct ahash_request *req)
 	dev_dbg(dd->dev, "init: digest size: %d\n",
 		crypto_ahash_digestsize(tfm));
 
+	ret = mutex_lock_interruptible(&zynqmp_sha.hw_engine_mutex);
+	if (ret)
+		goto end;
+
 	ret = eemi_ops->sha_hash(0, 0, ZYNQMP_SHA3_INIT);
 
+end:
 	return ret;
 }
 
@@ -124,8 +132,14 @@ static int zynqmp_sha_update(struct ahash_request *req)
 	 __flush_cache_user_range((unsigned long)kbuf,
 				  (unsigned long)kbuf + dma_size);
 	ret = eemi_ops->sha_hash(dma_addr, req->nbytes, ZYNQMP_SHA3_UPDATE);
+	if (ret) {
+		mutex_unlock(&zynqmp_sha.hw_engine_mutex);
+		goto end;
+	}
+
 	dma_free_coherent(dd->dev, dma_size, kbuf, dma_addr);
 
+end:
 	return ret;
 }
 
@@ -149,6 +163,7 @@ static int zynqmp_sha_final(struct ahash_request *req)
 	memcpy(req->result, kbuf, 48);
 	dma_free_coherent(dd->dev, dma_size, kbuf, dma_addr);
 
+	mutex_unlock(&zynqmp_sha.hw_engine_mutex);
 	return ret;
 }
 
@@ -243,6 +258,7 @@ static int zynqmp_sha_probe(struct platform_device *pdev)
 	platform_set_drvdata(pdev, sha_dd);
 	INIT_LIST_HEAD(&sha_dd->list);
 	spin_lock_init(&sha_dd->lock);
+	mutex_init(&zynqmp_sha.hw_engine_mutex);
 	crypto_init_queue(&sha_dd->queue, ZYNQMP_SHA_QUEUE_LENGTH);
 	spin_lock(&zynqmp_sha.lock);
 	list_add_tail(&sha_dd->list, &zynqmp_sha.dev_list);
-- 
2.31.1

