From bfcb08d680e18d5efab12604860c74bd292379a7 Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Thu, 19 Sep 2019 18:20:50 +0530
Subject: [PATCH 350/767] net: thunderx: Fix RSS flow hash settings display

commit a185939033b0ab921159c5a416da46949b026313 from
git@git.assembla.com:cavium/WindRiver.linux.git

This patch fixes RSS flow hash settings display (via ethtool)
by reading the current RSS configuration in HW and then
decode if it's 2-tuple or 4-tuple config.

Also fixed issue wrt 64K queue size, currently SQ when configured
to use descriptor ring size of 64K it's not working as a circular
queue resulting in corruption and SMMu faults.

Change-Id: I4165b4246fb59c723a7a82f59c574227c94a7df2
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/16096
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[Kevin: Just some minor context mods in order to port to linux-yocto]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../ethernet/cavium/thunder/nicvf_ethtool.c   | 34 +++++++++++--------
 1 file changed, 19 insertions(+), 15 deletions(-)

diff --git a/drivers/net/ethernet/cavium/thunder/nicvf_ethtool.c b/drivers/net/ethernet/cavium/thunder/nicvf_ethtool.c
index 5e0b16bb95a0..61c4fcdf7e25 100644
--- a/drivers/net/ethernet/cavium/thunder/nicvf_ethtool.c
+++ b/drivers/net/ethernet/cavium/thunder/nicvf_ethtool.c
@@ -514,25 +514,42 @@ static int nicvf_set_ringparam(struct net_device *netdev,
 static int nicvf_get_rss_hash_opts(struct nicvf *nic,
 				   struct ethtool_rxnfc *info)
 {
+	u64 rss_cfg = nicvf_reg_read(nic, NIC_VNIC_RSS_CFG);
+
 	info->data = 0;
 
+	if (!(rss_cfg & BIT_ULL(RSS_HASH_IP)))
+		return 0;
+
+	info->data = RXH_IP_SRC | RXH_IP_DST;
+
 	switch (info->flow_type) {
 	case TCP_V4_FLOW:
 	case TCP_V6_FLOW:
+		if (rss_cfg & BIT_ULL(RSS_HASH_TCP))
+			info->data |= RXH_L4_B_0_1 | RXH_L4_B_2_3;
+		break;
 	case UDP_V4_FLOW:
 	case UDP_V6_FLOW:
+		if (rss_cfg & BIT_ULL(RSS_HASH_UDP))
+			info->data |= RXH_L4_B_0_1 | RXH_L4_B_2_3;
+		break;
 	case SCTP_V4_FLOW:
 	case SCTP_V6_FLOW:
 		info->data |= RXH_L4_B_0_1 | RXH_L4_B_2_3;
 		/* Fall through */
+	case AH_ESP_V4_FLOW:
+	case AH_V4_FLOW:
+	case ESP_V4_FLOW:
 	case IPV4_FLOW:
+	case AH_ESP_V6_FLOW:
+	case AH_V6_FLOW:
+	case ESP_V6_FLOW:
 	case IPV6_FLOW:
-		info->data |= RXH_IP_SRC | RXH_IP_DST;
 		break;
 	default:
 		return -EINVAL;
 	}
-
 	return 0;
 }
 
@@ -598,19 +615,6 @@ static int nicvf_set_rss_hash_opts(struct nicvf *nic,
 			return -EINVAL;
 		}
 		break;
-	case SCTP_V4_FLOW:
-	case SCTP_V6_FLOW:
-		switch (info->data & (RXH_L4_B_0_1 | RXH_L4_B_2_3)) {
-		case 0:
-			rss_cfg &= ~(1ULL << RSS_HASH_L4ETC);
-			break;
-		case (RXH_L4_B_0_1 | RXH_L4_B_2_3):
-			rss_cfg |= (1ULL << RSS_HASH_L4ETC);
-			break;
-		default:
-			return -EINVAL;
-		}
-		break;
 	case IPV4_FLOW:
 	case IPV6_FLOW:
 		rss_cfg = RSS_HASH_IP;
-- 
2.31.1

