From 3a76c379f0316c1d2dcb917c254a99610236844f Mon Sep 17 00:00:00 2001
From: Bharat Kumar Gogada <bharat.kumar.gogada@xilinx.com>
Date: Mon, 13 Jan 2020 15:26:29 +0530
Subject: [PATCH 0833/1852] PCI: XDMA PL PCIe: Program hwirq to MSI data

commit 7e7fc4f9638028cea2329db52410139e5584785d from
https://github.com/Xilinx/linux-xlnx.git

If EP supports multi MSI it is allowed to change MSI data depending
on number of MSI's being requested, MSI data is used to retrieve
virq.
data->irq holds virq, so if virq is 0xE1 and programmed as MSI data and if
EP supports multi MSI, it can send msi data as 0xE0 this leads to invoking
wrong irq handler and not handling current interrupt.
Programming hwirq is doesn't cause this as it always start with zero.

Signed-off-by: Bharat Kumar Gogada <bharat.kumar.gogada@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
State: not-upstreamable
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/pci/controller/pcie-xdma-pl.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/drivers/pci/controller/pcie-xdma-pl.c b/drivers/pci/controller/pcie-xdma-pl.c
index 4e93b5ac3562..a32df034a9ac 100644
--- a/drivers/pci/controller/pcie-xdma-pl.c
+++ b/drivers/pci/controller/pcie-xdma-pl.c
@@ -326,7 +326,10 @@ static irqreturn_t xilinx_pcie_intr_handler(int irq, void *data)
 
 			if (IS_ENABLED(CONFIG_PCI_MSI)) {
 				/* Handle MSI Interrupt */
-				generic_handle_irq(msi_data);
+				val = irq_find_mapping(port->msi.dev_domain,
+						       msi_data);
+				if (val)
+					generic_handle_irq(val);
 			}
 		}
 	}
@@ -388,7 +391,7 @@ static void xilinx_compose_msi_msg(struct irq_data *data, struct msi_msg *msg)
 	msi_addr = virt_to_phys((void *)msi->msi_pages);
 	msg->address_lo = lower_32_bits(msi_addr);
 	msg->address_hi = upper_32_bits(msi_addr);
-	msg->data = data->irq;
+	msg->data = data->hwirq;
 }
 
 static int xilinx_msi_set_affinity(struct irq_data *irq_data,
-- 
2.31.1

