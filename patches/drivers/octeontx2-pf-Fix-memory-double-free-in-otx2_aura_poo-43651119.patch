From 680f3da92c9ec028ed0767c93b9b3a1c0b11931c Mon Sep 17 00:00:00 2001
From: Subbaraya Sundeep <sbhatta@marvell.com>
Date: Mon, 24 Feb 2020 14:32:59 +0530
Subject: [PATCH 0370/1921] octeontx2-pf: Fix memory double free in
 otx2_aura_pool_free

Memory double free problem occurs when otx2_aura_pool_free
is called twice because of the dangling pointer. This patch
fixes it by setting freed pointer to NULL as well. Also
interrupt status is cleared in interrupt handler immediately
since upcoming interrupts may be lost in HW until status bit
is zeroed by SW.

Change-Id: Ic8c1c3ca12da39032db9e0af7dadea83f114b758
Signed-off-by: Subbaraya Sundeep <sbhatta@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/23763
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c | 1 +
 drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c     | 5 +++--
 2 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
index 0d9d7dbaaf12..1486ddf5e7b3 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
@@ -1001,6 +1001,7 @@ void otx2_aura_pool_free(struct otx2_nic *pfvf)
 		qmem_free(pfvf->dev, pool->fc_addr);
 	}
 	devm_kfree(pfvf->dev, pfvf->qset.pool);
+	pfvf->qset.pool = NULL;
 }
 
 static int otx2_aura_init(struct otx2_nic *pfvf, int aura_id,
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
index f8072161827d..695704fa1be4 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
@@ -211,6 +211,9 @@ static irqreturn_t otx2vf_vfaf_mbox_intr_handler(int irq, void *vf_irq)
 	struct otx2_mbox *mbox;
 	struct mbox_hdr *hdr;
 
+	/* Clear the IRQ */
+	otx2_write64(vf, RVU_VF_INT, BIT_ULL(0));
+
 	/* Read latest mbox data */
 	smp_rmb();
 
@@ -240,8 +243,6 @@ static irqreturn_t otx2vf_vfaf_mbox_intr_handler(int irq, void *vf_irq)
 		       ALIGN(sizeof(struct mbox_hdr), sizeof(u64)));
 		queue_work(vf->mbox_wq, &vf->mbox.mbox_up_wrk);
 	}
-	/* Clear the IRQ */
-	otx2_write64(vf, RVU_VF_INT, BIT_ULL(0));
 
 	return IRQ_HANDLED;
 }
-- 
2.31.1

