From 55cdefbb2cc9430effb6aa7b63e3a1fb0c810794 Mon Sep 17 00:00:00 2001
From: Srujana Challa <schalla@marvell.com>
Date: Mon, 27 Apr 2020 19:32:36 +0530
Subject: [PATCH 0501/1921] octeontx2-af: Update CPT_LF_ALLOC mbox

Add eng_grpmsk field to CPT_LF_ALLOC mbox msg so that user may specify
the engine groups to which the LF may submit instructions.

Change-Id: Ia1f5386b9b5e6c921364607914d82a5c551449bc
Signed-off-by: Srujana Challa <schalla@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/28262
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../marvell/octeontx2/otx2_cptpf_mbox.c       | 19 +++++++++-
 .../net/ethernet/marvell/octeontx2/af/mbox.h  | 16 +-------
 .../ethernet/marvell/octeontx2/af/rvu_cpt.c   | 38 ++-----------------
 3 files changed, 24 insertions(+), 49 deletions(-)

diff --git a/drivers/crypto/marvell/octeontx2/otx2_cptpf_mbox.c b/drivers/crypto/marvell/octeontx2/otx2_cptpf_mbox.c
index f87193081df1..4a5565624733 100644
--- a/drivers/crypto/marvell/octeontx2/otx2_cptpf_mbox.c
+++ b/drivers/crypto/marvell/octeontx2/otx2_cptpf_mbox.c
@@ -17,7 +17,7 @@
  * CPT PF driver version, It will be incremented by 1 for every feature
  * addition in CPT PF driver.
  */
-#define OTX2_CPT_PF_DRV_VERSION 0x1
+#define OTX2_CPT_PF_DRV_VERSION 0x2
 
 static void dump_mbox_msg(struct mbox_msghdr *msg, int size)
 {
@@ -424,6 +424,19 @@ static int reply_kcrypto_limits_msg(struct otx2_cptpf_dev *cptpf,
 	return 0;
 }
 
+static int check_cpt_lf_alloc_req(struct otx2_cptpf_dev *cptpf,
+				  struct otx2_cptvf_info *vf,
+				  struct mbox_msghdr *req, int size)
+{
+	struct cpt_lf_alloc_req_msg *alloc_req =
+					(struct cpt_lf_alloc_req_msg *)req;
+
+	if (alloc_req->eng_grpmsk == 0x0)
+		alloc_req->eng_grpmsk = OTX2_CPT_ALL_ENG_GRPS_MASK;
+
+	return forward_to_af(cptpf, vf, req, size);
+}
+
 static int cptpf_handle_vf_req(struct otx2_cptpf_dev *cptpf,
 			       struct otx2_cptvf_info *vf,
 			       struct mbox_msghdr *req, int size)
@@ -459,6 +472,10 @@ static int cptpf_handle_vf_req(struct otx2_cptpf_dev *cptpf,
 		err = reply_kcrypto_limits_msg(cptpf, vf, req);
 		break;
 
+	case MBOX_MSG_CPT_LF_ALLOC:
+		err = check_cpt_lf_alloc_req(cptpf, vf, req, size);
+		break;
+
 	default:
 		err = forward_to_af(cptpf, vf, req, size);
 		break;
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
index e23b571c961b..a42d54ee2a8d 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
@@ -203,13 +203,10 @@ M(TIM_ENABLE_RING,	0x803, tim_enable_ring, tim_ring_req, tim_enable_rsp)\
 M(TIM_DISABLE_RING,	0x804, tim_disable_ring, tim_ring_req, msg_rsp)	\
 /* CPT mbox IDs (range 0xA00 - 0xBFF) */				\
 M(CPT_LF_ALLOC,		0xA00, cpt_lf_alloc, cpt_lf_alloc_req_msg,	\
-			       cpt_lf_alloc_rsp_msg)			\
+			       msg_rsp)			\
 M(CPT_LF_FREE,		0xA01, cpt_lf_free, msg_req, msg_rsp)		\
 M(CPT_RD_WR_REGISTER,	0xA02, cpt_rd_wr_register,  cpt_rd_wr_reg_msg,	\
 			       cpt_rd_wr_reg_msg)			\
-M(CPT_SET_CRYPTO_GRP,	0xA03, cpt_set_crypto_grp,			\
-			       cpt_set_crypto_grp_req_msg,		\
-			       cpt_set_crypto_grp_req_msg)		\
 M(CPT_INLINE_IPSEC_CFG,	0xA04, cpt_inline_ipsec_cfg,			\
 			       cpt_inline_ipsec_cfg_msg, msg_rsp)	\
 /* NPC mbox IDs (range 0x6000 - 0x7FFF) */				\
@@ -1548,20 +1545,11 @@ struct cpt_rd_wr_reg_msg {
 	u8 is_write;
 };
 
-struct cpt_set_crypto_grp_req_msg {
-	struct mbox_msghdr hdr;
-	u8 crypto_eng_grp;
-};
-
 struct cpt_lf_alloc_req_msg {
 	struct mbox_msghdr hdr;
 	u16 nix_pf_func;
 	u16 sso_pf_func;
-};
-
-struct cpt_lf_alloc_rsp_msg {
-	struct mbox_msghdr hdr;
-	u8 crypto_eng_grp;
+	u16 eng_grpmsk;
 };
 
 #define CPT_INLINE_INBOUND      0
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
index 551c1652d852..2a8a58bd865f 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
@@ -17,15 +17,6 @@
 /* CPT PF device id */
 #define	PCI_DEVID_OTX2_CPT_PF	0xA0FD
 
-/* Maximum supported microcode groups */
-#define CPT_MAX_ENGINE_GROUPS	8
-
-/* Invalid engine group */
-#define INVALID_ENGINE_GRP	0xFF
-
-/* Number of engine group for symmetric crypto */
-static int crypto_eng_grp = INVALID_ENGINE_GRP;
-
 /* CPT PF number */
 static int cpt_pf_num = -1;
 
@@ -226,15 +217,15 @@ int rvu_cpt_register_interrupts(struct rvu *rvu)
 
 int rvu_mbox_handler_cpt_lf_alloc(struct rvu *rvu,
 				  struct cpt_lf_alloc_req_msg *req,
-				  struct cpt_lf_alloc_rsp_msg *rsp)
+				  struct msg_rsp *rsp)
 {
 	u16 pcifunc = req->hdr.pcifunc;
-	int num_lfs, slot, grp_mask;
 	struct rvu_block *block;
 	int cptlf, blkaddr;
+	int num_lfs, slot;
 	u64 val;
 
-	if (crypto_eng_grp == INVALID_ENGINE_GRP)
+	if (req->eng_grpmsk == 0x0)
 		return CPT_AF_ERR_GRP_INVALID;
 
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, pcifunc);
@@ -271,8 +262,7 @@ int rvu_mbox_handler_cpt_lf_alloc(struct rvu *rvu,
 			return CPT_AF_ERR_LF_INVALID;
 
 		/* Set CPT LF group and priority */
-		grp_mask = 1 << crypto_eng_grp;
-		val = (u64) grp_mask << 48 | 1;
+		val = (u64)req->eng_grpmsk << 48 | 1;
 		rvu_write64(rvu, blkaddr, CPT_AF_LFX_CTL(cptlf), val);
 
 		/* Set CPT LF NIX_PF_FUNC and SSO_PF_FUNC */
@@ -280,8 +270,6 @@ int rvu_mbox_handler_cpt_lf_alloc(struct rvu *rvu,
 		      (u64) req->sso_pf_func << 32;
 		rvu_write64(rvu, blkaddr, CPT_AF_LFX_CTL2(cptlf), val);
 	}
-
-	rsp->crypto_eng_grp = crypto_eng_grp;
 	return 0;
 }
 
@@ -429,24 +417,6 @@ int rvu_mbox_handler_cpt_inline_ipsec_cfg(struct rvu *rvu,
 	return ret;
 }
 
-int rvu_mbox_handler_cpt_set_crypto_grp(struct rvu *rvu,
-					struct cpt_set_crypto_grp_req_msg *req,
-					struct cpt_set_crypto_grp_req_msg *rsp)
-{
-	/* This message is accepted only if sent from CPT PF */
-	if (!is_cpt_pf(req->hdr.pcifunc))
-		return CPT_AF_ERR_ACCESS_DENIED;
-
-	rsp->crypto_eng_grp = req->crypto_eng_grp;
-
-	if (req->crypto_eng_grp != INVALID_ENGINE_GRP &&
-	    req->crypto_eng_grp >= CPT_MAX_ENGINE_GROUPS)
-		return CPT_AF_ERR_GRP_INVALID;
-
-	crypto_eng_grp = req->crypto_eng_grp;
-	return 0;
-}
-
 int rvu_mbox_handler_cpt_rd_wr_register(struct rvu *rvu,
 					struct cpt_rd_wr_reg_msg *req,
 					struct cpt_rd_wr_reg_msg *rsp)
-- 
2.31.1

