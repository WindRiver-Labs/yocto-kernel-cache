From 43322eaebcae5589e8d616a38bc84e36402a982f Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Wed, 7 Aug 2019 12:24:48 +0530
Subject: [PATCH 303/767] octeontx2-af: Remove express traffic support

commit 4e5ffa13e724181ad92d3351ba6079e00ae8894d from
git@git.assembla.com:cavium/WindRiver.linux.git

Express traffic (802.3br) support has been permenantly
defeatured. Hence removed all relevant logic.

Change-Id: Idb1b2d67b44a4b67a5737803d47379959f2f66b0
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/13934
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/mbox.h  |  3 +-
 .../net/ethernet/marvell/octeontx2/af/rvu.c   |  3 -
 .../net/ethernet/marvell/octeontx2/af/rvu.h   |  1 -
 .../ethernet/marvell/octeontx2/af/rvu_fixes.c | 18 +---
 .../ethernet/marvell/octeontx2/af/rvu_nix.c   | 92 +++++--------------
 .../ethernet/marvell/octeontx2/af/rvu_reg.h   |  3 -
 .../marvell/octeontx2/af/rvu_validation.c     |  3 +-
 7 files changed, 31 insertions(+), 92 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
index 9a0ec9131d6e..c83105167547 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
@@ -86,7 +86,7 @@ struct mbox_msghdr {
 #define OTX2_MBOX_REQ_SIG (0xdead)
 #define OTX2_MBOX_RSP_SIG (0xbeef)
 	u16 sig;         /* Signature, for validating corrupted msgs */
-#define OTX2_MBOX_VERSION (0x0001)
+#define OTX2_MBOX_VERSION (0x0002)
 	u16 ver;         /* Version of msg's structure for this ID */
 	u16 next_msgoff; /* Offset of next msg within mailbox region */
 	int rc;          /* Msg process'ed response code */
@@ -1427,7 +1427,6 @@ struct tim_enable_rsp {
 struct get_hw_cap_rsp {
 	struct mbox_msghdr hdr;
 	u8 nix_fixed_txschq_mapping; /* Schq mapping fixed or flexible */
-	u8 nix_express_traffic;      /* Are express links supported */
 	u8 nix_shaping;		     /* Is shaping and coloring supported */
 };
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
index f36ced5ea4d2..93823c21813d 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
@@ -63,7 +63,6 @@ static void rvu_setup_hw_capabilities(struct rvu *rvu)
 
 	hw->cap.nix_tx_aggr_lvl = NIX_TXSCH_LVL_TL1;
 	hw->cap.nix_fixed_txschq_mapping = false;
-	hw->cap.nix_express_traffic = true;
 	hw->cap.nix_shaping = true;
 	hw->cap.nix_tx_link_bp = true;
 	hw->cap.nix_rx_multicast = true;
@@ -73,7 +72,6 @@ static void rvu_setup_hw_capabilities(struct rvu *rvu)
 		hw->cap.nix_txsch_per_cgx_lmac = 4;
 		hw->cap.nix_txsch_per_lbk_lmac = 132;
 		hw->cap.nix_txsch_per_sdp_lmac = 76;
-		hw->cap.nix_express_traffic = false;
 		hw->cap.nix_shaping = false;
 		hw->cap.nix_tx_link_bp = false;
 		if (is_rvu_96xx_A0(rvu) || is_rvu_95xx_A0(rvu))
@@ -1523,7 +1521,6 @@ int rvu_mbox_handler_get_hw_cap(struct rvu *rvu, struct msg_req *req,
 	struct rvu_hwinfo *hw = rvu->hw;
 
 	rsp->nix_fixed_txschq_mapping = hw->cap.nix_fixed_txschq_mapping;
-	rsp->nix_express_traffic = hw->cap.nix_express_traffic;
 	rsp->nix_shaping = hw->cap.nix_shaping;
 
 	return 0;
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
index c4f0b4b4cd9d..6cb284b8027c 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
@@ -343,7 +343,6 @@ struct hw_cap {
 	u16	nix_txsch_per_lbk_lmac; /* Max Q's transmitting to LBK LMAC */
 	u16	nix_txsch_per_sdp_lmac; /* Max Q's transmitting to SDP LMAC */
 	bool	nix_fixed_txschq_mapping; /* Schq mapping fixed or flexible */
-	bool	nix_express_traffic;	 /* Are express links supported */
 	bool	nix_shaping;		 /* Is shaping and coloring supported */
 	bool	nix_tx_link_bp;		 /* Can link backpressure TL queues ? */
 	bool	nix_rx_multicast;	 /* Rx packet replication support */
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c
index a27d7e5de5a0..2b4dd817ca2a 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_fixes.c
@@ -188,16 +188,13 @@ static void rvu_nix_scan_tl2_link_mapping(struct rvu *rvu,
 		chan = link_cfg & 0x3F;
 		tx_stall->tl2_link_map[tl2] = chan << LINK_CHAN_SHIFT;
 
-		/* Check for normal or express link */
-		link_cfg = rvu_rd64(rvu, blkaddr, NIX_AF_SMQX_CFG(smq)) &
-				    BIT_ULL(48);
-		tx_stall->tl2_link_map[tl2] |=
-			(link & 0x7F) | (link_cfg ? (1 << LINK_TYPE_SHIFT) : 0);
+		/* Save link info */
+		tx_stall->tl2_link_map[tl2] |= (link & 0x7F);
 
 		/* Workaround assumes TL2 transmits to only one link.
 		 * So assume the first link enabled is the only one.
 		 */
-		continue;
+		break;
 	}
 }
 
@@ -490,7 +487,6 @@ static void rvu_nix_restore_tx(struct rvu *rvu, struct nix_hw *nix_hw,
 			       int blkaddr, int tl2)
 {
 	struct nix_tx_stall *tx_stall = nix_hw->tx_stall;
-	struct rvu_hwinfo *hw = rvu->hw;
 	struct nix_txsch *tl2_txsch;
 	int tl, link;
 
@@ -531,9 +527,6 @@ static void rvu_nix_restore_tx(struct rvu *rvu, struct nix_hw *nix_hw,
 	/* Restore link credits */
 	rvu_wr64(rvu, blkaddr, NIX_AF_TX_LINKX_NORM_CREDIT(link),
 		 tx_stall->nlink_credits[link]);
-	if (hw->cap.nix_express_traffic)
-		rvu_wr64(rvu, blkaddr, NIX_AF_TX_LINKX_EXPR_CREDIT(link),
-			 tx_stall->nlink_credits[link]);
 
 	/* Toggle SW_XOFF of every scheduler queue at every level
 	 * which points to this TL2.
@@ -605,10 +598,7 @@ static bool is_link_backpressured(struct nix_tx_stall *tx_stall,
 	if (link >= rvu->hw->cgx_links)
 		return false;
 
-	if (EXPR_LINK(tx_stall->tl2_link_map[tl2]))
-		cfg = rvu_rd64(rvu, blkaddr, NIX_AF_TX_LINKX_EXPR_CREDIT(link));
-	else
-		cfg = rvu_rd64(rvu, blkaddr, NIX_AF_TX_LINKX_NORM_CREDIT(link));
+	cfg = rvu_rd64(rvu, blkaddr, NIX_AF_TX_LINKX_NORM_CREDIT(link));
 
 	/* Check if current credits or pkt count is -ve or simply
 	 * morethan what is configured.
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
index 062dadb94aa0..28018ed2ad67 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
@@ -1324,11 +1324,6 @@ static void nix_get_txschq_range(struct rvu *rvu, u16 pcifunc,
 	}
 }
 
-static int nix_hw_link_count(struct rvu_hwinfo *hw)
-{
-	return hw->cgx_links + hw->lbk_links + hw->sdp_links;
-}
-
 static int nix_check_txschq_alloc_req(struct rvu *rvu, int lvl, u16 pcifunc,
 				      struct nix_hw *nix_hw,
 				      struct nix_txsch_alloc_req *req)
@@ -1346,12 +1341,9 @@ static int nix_check_txschq_alloc_req(struct rvu *rvu, int lvl, u16 pcifunc,
 
 	link = nix_get_tx_link(rvu, pcifunc);
 
-	/* Request count for aggregate level queues should be 1 or 2 */
+	/* For traffic aggregating scheduler level, one queue is enough */
 	if (lvl >= hw->cap.nix_tx_aggr_lvl) {
-		if ((!hw->cap.nix_express_traffic && req_schq > 1) ||
-		    req_schq > 2)
-			return NIX_AF_ERR_TLX_ALLOC_FAIL;
-		if ((link + nix_hw_link_count(hw)) > txsch->schq.max)
+		if (req_schq != 1)
 			return NIX_AF_ERR_TLX_ALLOC_FAIL;
 		return 0;
 	}
@@ -1386,36 +1378,26 @@ static void nix_txsch_alloc(struct rvu *rvu, struct nix_txsch *txsch,
 {
 	struct rvu_hwinfo *hw = rvu->hw;
 	u16 pcifunc = rsp->hdr.pcifunc;
-	int idx, schq, links;
-
-	links = nix_hw_link_count(hw);
+	int idx, schq;
 
 	/* For traffic aggregating levels, queue alloc is based
-	 * on transmit link to which PF_FUNC is mapped to. A max
-	 * of two queues are allocated, one for normal and another
-	 * for express traffic.
+	 * on transmit link to which PF_FUNC is mapped to.
 	 */
 	if (lvl >= hw->cap.nix_tx_aggr_lvl) {
-		/* If express links are not supported,
-		 * then a single TL queue is allocated.
-		 */
-		if (rsp->schq_contig[lvl] && !hw->cap.nix_express_traffic)
+		/* A single TL queue is allocated */
+		if (rsp->schq_contig[lvl]) {
 			rsp->schq_contig[lvl] = 1;
-		if (rsp->schq_contig[lvl] > 1 && hw->cap.nix_express_traffic)
-			rsp->schq_contig[lvl] = 2;
+			rsp->schq_contig_list[lvl][0] = start;
+		}
+
 		/* Both contig and non-contig reqs doesn't make sense here */
 		if (rsp->schq_contig[lvl])
 			rsp->schq[lvl] = 0;
-		if (rsp->schq[lvl] && !hw->cap.nix_express_traffic)
+
+		if (rsp->schq[lvl]) {
 			rsp->schq[lvl] = 1;
-		if (rsp->schq[lvl] > 1 && hw->cap.nix_express_traffic)
-			rsp->schq[lvl] = 2;
-
-		/* Initial TLs for normal links and later for express */
-		for (idx = 0; idx < rsp->schq_contig[lvl]; idx++)
-			rsp->schq_contig_list[lvl][idx] = start + (idx * links);
-		for (idx = 0; idx < rsp->schq[lvl]; idx++)
-			rsp->schq_list[lvl][idx] = start + (idx * links);
+			rsp->schq_list[lvl][0] = start;
+		}
 		return;
 	}
 
@@ -1531,7 +1513,7 @@ int rvu_mbox_handler_nix_txsch_alloc(struct rvu *rvu,
 
 		if (lvl >= hw->cap.nix_tx_aggr_lvl) {
 			start = link;
-			end = txsch->schq.max;
+			end = link;
 		} else if (hw->cap.nix_fixed_txschq_mapping) {
 			nix_get_txschq_range(rvu, pcifunc, link, &start, &end);
 		} else {
@@ -1817,32 +1799,20 @@ static bool is_txschq_shaping_valid(struct rvu_hwinfo *hw, int lvl, u64 reg)
 static void nix_tl1_default_cfg(struct rvu *rvu, struct nix_hw *nix_hw,
 				u16 pcifunc, int blkaddr)
 {
-	struct rvu_hwinfo *hw = rvu->hw;
-	int idx, link, schq, schq_count;
-	u16 schq_list[2];
 	u32 *pfvf_map;
+	int schq;
 
-	link = nix_get_tx_link(rvu, pcifunc);
-	schq_count = (hw->cap.nix_express_traffic) ? 2 : 1;
-	schq_list[0] = link;
-	if (hw->cap.nix_express_traffic)
-		schq_list[1] = nix_hw_link_count(hw) + link;
-
+	schq = nix_get_tx_link(rvu, pcifunc);
 	pfvf_map = nix_hw->txsch[NIX_TXSCH_LVL_TL1].pfvf_map;
-	for (idx = 0; idx < schq_count; idx++) {
-		schq = schq_list[idx];
-		/* Skip if PF has already done the config */
-		if (TXSCH_MAP_FLAGS(pfvf_map[schq]) & NIX_TXSCHQ_CFG_DONE)
-			continue;
-
-		rvu_write64(rvu, blkaddr, NIX_AF_TL1X_TOPOLOGY(schq),
-			    (TXSCH_TL1_DFLT_RR_PRIO << 1));
-		rvu_write64(rvu, blkaddr, NIX_AF_TL1X_SCHEDULE(schq),
-			    TXSCH_TL1_DFLT_RR_QTM);
-		rvu_write64(rvu, blkaddr, NIX_AF_TL1X_CIR(schq), 0x00);
-		pfvf_map[schq] = TXSCH_SET_FLAG(pfvf_map[schq],
-						NIX_TXSCHQ_CFG_DONE);
-	}
+	/* Skip if PF has already done the config */
+	if (TXSCH_MAP_FLAGS(pfvf_map[schq]) & NIX_TXSCHQ_CFG_DONE)
+		return;
+	rvu_write64(rvu, blkaddr, NIX_AF_TL1X_TOPOLOGY(schq),
+		    (TXSCH_TL1_DFLT_RR_PRIO << 1));
+	rvu_write64(rvu, blkaddr, NIX_AF_TL1X_SCHEDULE(schq),
+		    TXSCH_TL1_DFLT_RR_QTM);
+	rvu_write64(rvu, blkaddr, NIX_AF_TL1X_CIR(schq), 0x00);
+	pfvf_map[schq] = TXSCH_SET_FLAG(pfvf_map[schq], NIX_TXSCHQ_CFG_DONE);
 }
 
 int rvu_mbox_handler_nix_txschq_cfg(struct rvu *rvu,
@@ -3100,9 +3070,6 @@ int rvu_mbox_handler_nix_set_hw_frs(struct rvu *rvu, struct nix_frs_cfg *req,
 	cfg &= ~(0xFFFFFULL << 12);
 	cfg |=  ((lmac_fifo_len - req->maxlen) / 16) << 12;
 	rvu_write64(rvu, blkaddr, NIX_AF_TX_LINKX_NORM_CREDIT(link), cfg);
-	if (hw->cap.nix_express_traffic)
-		rvu_write64(rvu, blkaddr,
-			    NIX_AF_TX_LINKX_EXPR_CREDIT(link), cfg);
 	rvu_nix_update_link_credits(rvu, blkaddr, link, cfg);
 
 	return 0;
@@ -3189,11 +3156,6 @@ static void nix_link_config(struct rvu *rvu, int blkaddr)
 			rvu_write64(rvu, blkaddr,
 				    NIX_AF_TX_LINKX_NORM_CREDIT(link),
 				    tx_credits);
-			if (!hw->cap.nix_express_traffic)
-				continue;
-			rvu_write64(rvu, blkaddr,
-				    NIX_AF_TX_LINKX_EXPR_CREDIT(link),
-				    tx_credits);
 		}
 	}
 
@@ -3205,10 +3167,6 @@ static void nix_link_config(struct rvu *rvu, int blkaddr)
 		tx_credits =  (tx_credits << 12) | (0x1FF << 2) | BIT_ULL(1);
 		rvu_write64(rvu, blkaddr,
 			    NIX_AF_TX_LINKX_NORM_CREDIT(link), tx_credits);
-		if (!hw->cap.nix_express_traffic)
-			continue;
-		rvu_write64(rvu, blkaddr,
-			    NIX_AF_TX_LINKX_EXPR_CREDIT(link), tx_credits);
 	}
 }
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h
index 0d8a096509c4..e73101919964 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h
@@ -242,7 +242,6 @@
 #define NIX_AF_SEB_ECO			(0x0600)
 #define NIX_AF_SEB_TEST_BP		(0x0610)
 #define NIX_AF_NORM_TX_FIFO_STATUS	(0x0620)
-#define NIX_AF_EXPR_TX_FIFO_STATUS	(0x0630)
 #define NIX_AF_SDP_TX_FIFO_STATUS	(0x0640)
 #define NIX_AF_TX_NPC_CAPTURE_CONFIG	(0x0660)
 #define NIX_AF_TX_NPC_CAPTURE_INFO	(0x0670)
@@ -253,10 +252,8 @@
 #define NIX_AF_SQM_DBG_CTL_STATUS		(0x750)
 #define NIX_AF_PSE_CHANNEL_LEVEL                (0x800)
 #define NIX_AF_PSE_SHAPER_CFG                   (0x810)
-#define NIX_AF_TX_EXPR_CREDIT			(0x830)
 #define NIX_AF_MARK_FORMATX_CTL(a)              (0x900 | (a) << 18)
 #define NIX_AF_TX_LINKX_NORM_CREDIT(a)		(0xA00 | (a) << 16)
-#define NIX_AF_TX_LINKX_EXPR_CREDIT(a)		(0xA10 | (a) << 16)
 #define NIX_AF_TX_LINKX_SW_XOFF(a)              (0xA20 | (a) << 16)
 #define NIX_AF_TX_LINKX_HW_XOFF(a)              (0xA30 | (a) << 16)
 #define NIX_AF_SDP_LINK_CREDIT                  (0xa40)
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c
index 4c180a9491f9..ed66a93e33bc 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c
@@ -287,8 +287,7 @@ int rvu_mbox_handler_free_rsrc_cnt(struct rvu *rvu, struct msg_req *req,
 			rvu->pf_limits.tl2->a[pf].val - curlfs;
 	}
 
-	/* Two TL1s available (normal and express DMA) */
-	rsp->schq[NIX_TXSCH_LVL_TL1] = 2;
+	rsp->schq[NIX_TXSCH_LVL_TL1] = 1;
 
 	mutex_unlock(&rvu->rsrc_lock);
 
-- 
2.31.1

