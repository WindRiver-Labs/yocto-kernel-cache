From 52609c67a10e9ee83c73a472eec3e5b3a84105a1 Mon Sep 17 00:00:00 2001
From: Hariprasad Kelam <hkelam@marvell.com>
Date: Thu, 20 May 2021 13:45:38 +0530
Subject: [PATCH 02/23] octeontx2-af: Refactor vf flags

commit 5e3fee23448255114daaa2f6bd82992754744111 from
git@git.assembla.com:cavium/WindRiver.linux.git

Current implementation is such that 'pf_set_vf_cfg' is
set true in following cases if pf sets 'vf mac or vf vlan'.

Once 'pf_set_vf_cfg" is set , AF driver rejects mac address
changes from vf saying that PF set mac address cannot be
overwritten. Which is wrong as above condition will occur
in case of 'pf set vf vlan' also.

Fix this by checking 'pf_set_vf_mac' flag which will be
set true only in case of pf sets vf mac.

Change-Id: I4ecc47ff546f2f557029c28b99d5a772ed2a5784
Signed-off-by: Hariprasad Kelam <hkelam@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/52274
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/af/rvu.h        | 3 ++-
 drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c    | 2 +-
 drivers/net/ethernet/marvell/octeontx2/af/rvu_npc_fs.c | 6 ++++--
 3 files changed, 7 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
index be7c815f54c2..a9f740dbb88f 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
@@ -264,7 +264,6 @@ struct rvu_pfvf {
 	u16		minlen;
 
 	bool		hw_rx_tstamp_en; /* Is rx_tstamp enabled */
-	u8		pf_set_vf_cfg;
 	u8		mac_addr[ETH_ALEN]; /* MAC address of this PF/VF */
 	u8		default_mac[ETH_ALEN]; /* MAC address from FWdata */
 
@@ -291,6 +290,8 @@ struct rvu_pfvf {
 
 enum rvu_pfvf_flags {
 	NIXLF_INITIALIZED = 0,
+	PF_SET_VF_MAC,
+	PF_SET_VF_CFG,
 };
 
 struct nix_txsch {
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
index c2670378ae52..68c15707596b 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
@@ -3383,7 +3383,7 @@ int rvu_mbox_handler_nix_set_mac_addr(struct rvu *rvu,
 	pfvf = rvu_get_pfvf(rvu, pcifunc);
 
 	/* VF can't overwrite admin(PF) changes */
-	if (from_vf && pfvf->pf_set_vf_cfg) {
+	if (from_vf && test_bit(PF_SET_VF_MAC, &pfvf->flags)) {
 		dev_warn(rvu->dev,
 			 "MAC address set by admin(PF) cannot be overwritten by VF");
 		return -EPERM;
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc_fs.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc_fs.c
index 43697b5b9af5..e781bbbd14dd 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc_fs.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc_fs.c
@@ -1112,9 +1112,11 @@ static int npc_install_flow(struct rvu *rvu, int blkaddr, u16 target,
 	if (pf_set_vfs_mac) {
 		ether_addr_copy(pfvf->default_mac, req->packet.dmac);
 		ether_addr_copy(pfvf->mac_addr, req->packet.dmac);
+		set_bit(PF_SET_VF_MAC, &pfvf->flags);
 	}
 
-	if (pfvf->pf_set_vf_cfg && req->vtag0_type == NIX_AF_LFX_RX_VTAG_TYPE7)
+	if (test_bit(PF_SET_VF_CFG, &pfvf->flags) &&
+	    req->vtag0_type == NIX_AF_LFX_RX_VTAG_TYPE7)
 		rule->vfvlan_cfg = true;
 
 	return 0;
@@ -1175,7 +1177,7 @@ int rvu_mbox_handler_npc_install_flow(struct rvu *rvu,
 
 	/* PF installing for its VF */
 	if (req->hdr.pcifunc && !from_vf && req->vf)
-		pfvf->pf_set_vf_cfg = 1;
+		set_bit(PF_SET_VF_CFG, &pfvf->flags);
 
 	/* update req destination mac addr */
 	if ((req->features & BIT_ULL(NPC_DMAC)) &&
-- 
2.31.1

