From 1cd3353d6cffdca2392813ccc504f5c4bb54944c Mon Sep 17 00:00:00 2001
From: Tomasz Duszynski <tduszynski@marvell.com>
Date: Thu, 4 Apr 2019 11:54:08 +0200
Subject: [PATCH 149/767] octeontx2-vf: Add support for AF attached VFs (LBK)

commit dadbdd280c4494853b8feaf8b2a72a2bc4555b73 from
git@git.assembla.com:cavium/WindRiver.linux.git

AF VFs work in pairs and communicate over consecutive loopback channels.
By default ATF configures 8 VFs on AF thus 8 network devices named
lbk0, lbk1, ..., lbk7 are created. They differ from ordinary VF by not
being backed up by a physical MAC (CGX).

Change-Id: Iad1e923f4cb45689d6026bc78007d0dd1a7aab20
Signed-off-by: Tomasz Duszynski <tduszynski@marvell.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.h       |  1 +
 .../ethernet/marvell/octeontx2/nic/otx2_vf.c  | 24 +++++++++++++++++++
 2 files changed, 25 insertions(+)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index 55126dc74c42..fc2ee1b24e0e 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -20,6 +20,7 @@
 /* PCI device IDs */
 #define PCI_DEVID_OCTEONTX2_RVU_PF              0xA063
 #define PCI_DEVID_OCTEONTX2_RVU_VF		0xA064
+#define PCI_DEVID_OCTEONTX2_RVU_AFVF		0xA0F8
 
 #define PCI_SUBSYS_DEVID_96XX_RVU_PFVF		0xB200
 
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
index b50295c4382e..872cc6749584 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
@@ -20,6 +20,7 @@
 #define DRV_VERSION	"1.0"
 
 static const struct pci_device_id otx2_vf_id_table[] = {
+	{ PCI_DEVICE(PCI_VENDOR_ID_CAVIUM, PCI_DEVID_OCTEONTX2_RVU_AFVF) },
 	{ PCI_DEVICE(PCI_VENDOR_ID_CAVIUM, PCI_DEVID_OCTEONTX2_RVU_VF) },
 	{ }
 };
@@ -346,23 +347,37 @@ static int otx2vf_vfaf_mbox_init(struct otx2_nic *vf)
 
 static int otx2vf_open(struct net_device *netdev)
 {
+	struct otx2_nic *vf;
 	int err;
 
 	err = otx2_open(netdev);
 	if (err)
 		return err;
 
+	/* LBKs do not receive link events so tell everyone we are up here */
+	vf = netdev_priv(netdev);
+	if (vf->tx_chan_base < SDP_CHAN_BASE) {
+		pr_info("%s NIC Link is UP\n", netdev->name);
+		netif_carrier_on(netdev);
+		netif_tx_start_all_queues(netdev);
+	}
+
 	return 0;
 }
 
 static int otx2vf_stop(struct net_device *netdev)
 {
+	struct otx2_nic *vf;
 	int err;
 
 	err = otx2_stop(netdev);
 	if (err)
 		return err;
 
+	vf = netdev_priv(netdev);
+	if (vf->tx_chan_base < SDP_CHAN_BASE)
+		pr_info("%s NIC Link is DOWN\n", netdev->name);
+
 	return 0;
 }
 
@@ -532,6 +547,15 @@ static int otx2vf_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 
 	INIT_WORK(&vf->reset_task, otx2vf_reset_task);
 
+	if (id->device == PCI_DEVID_OCTEONTX2_RVU_AFVF) {
+		int n;
+
+		n = (vf->pcifunc >> RVU_PFVF_FUNC_SHIFT) & RVU_PFVF_FUNC_MASK;
+		/* Need to subtract 1 to get proper VF number */
+		n -= 1;
+		snprintf(netdev->name, sizeof(netdev->name), "lbk%d", n);
+	}
+
 	err = register_netdev(netdev);
 	if (err) {
 		dev_err(dev, "Failed to register netdevice\n");
-- 
2.31.1

