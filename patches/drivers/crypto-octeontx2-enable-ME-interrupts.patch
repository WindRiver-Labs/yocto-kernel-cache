From c111bbd7d2ff5d473d72c6ccb19ae89eff17adf8 Mon Sep 17 00:00:00 2001
From: Srujana Challa <schalla@marvell.com>
Date: Mon, 22 Mar 2021 14:26:50 +0000
Subject: [PATCH 1347/1921] crypto: octeontx2: enable ME interrupts

Due to lack of ME interrupts handler in CPT PF driver, vfio-pci
driver is getting timed out with below log when it waits for
pending bit clearance during function level reset.
"vfio-pci 0002:10:00.1: timed out waiting for pending transaction;
performing function level reset anyway"
So, this patch adds support to handle ME interrupt handler.

Signed-off-by: Srujana Challa <schalla@marvell.com>
Change-Id: I7a32f14e9e91945edb0e288ea0d5c490a207879e
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/48389
Reviewed-by: Jerin Jacob Kollanukkaran <jerinj@marvell.com>
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../marvell/octeontx2/otx2_cptpf_main.c       | 101 ++++++++++++++----
 1 file changed, 83 insertions(+), 18 deletions(-)

diff --git a/drivers/crypto/marvell/octeontx2/otx2_cptpf_main.c b/drivers/crypto/marvell/octeontx2/otx2_cptpf_main.c
index 6455f6bdc64b..142649e6b606 100644
--- a/drivers/crypto/marvell/octeontx2/otx2_cptpf_main.c
+++ b/drivers/crypto/marvell/octeontx2/otx2_cptpf_main.c
@@ -15,34 +15,57 @@
 #define OTX2_CPT_DRV_NAME "octeontx2-cpt"
 #define OTX2_CPT_DRV_VERSION "1.0"
 
-static void cptpf_enable_vf_flr_intrs(struct otx2_cptpf_dev *cptpf)
+static void cptpf_enable_vf_flr_me_intrs(struct otx2_cptpf_dev *cptpf)
 {
-	/* Clear interrupt if any */
+	int vfs = cptpf->max_vfs;
+
+	/* Clear FLR interrupt if any */
 	otx2_cpt_write64(cptpf->reg_base, BLKADDR_RVUM, 0, RVU_PF_VFFLR_INTX(0),
-			~0x0ULL);
-	otx2_cpt_write64(cptpf->reg_base, BLKADDR_RVUM, 0, RVU_PF_VFFLR_INTX(1),
-			~0x0ULL);
+			 INTR_MASK(vfs));
 
 	/* Enable VF FLR interrupts */
 	otx2_cpt_write64(cptpf->reg_base, BLKADDR_RVUM, 0,
-			 RVU_PF_VFFLR_INT_ENA_W1SX(0), ~0x0ULL);
+			 RVU_PF_VFFLR_INT_ENA_W1SX(0), INTR_MASK(vfs));
+	/* Clear ME interrupt if any */
+	otx2_cpt_write64(cptpf->reg_base, BLKADDR_RVUM, 0, RVU_PF_VFME_INTX(0),
+			 INTR_MASK(vfs));
+	/* Enable VF ME interrupts */
 	otx2_cpt_write64(cptpf->reg_base, BLKADDR_RVUM, 0,
-			 RVU_PF_VFFLR_INT_ENA_W1SX(1), ~0x0ULL);
+			 RVU_PF_VFME_INT_ENA_W1SX(0), INTR_MASK(vfs));
+
+	if (vfs <= 64)
+		return;
+
+	otx2_cpt_write64(cptpf->reg_base, BLKADDR_RVUM, 0, RVU_PF_VFFLR_INTX(1),
+			 INTR_MASK(vfs - 64));
+	otx2_cpt_write64(cptpf->reg_base, BLKADDR_RVUM, 0,
+			 RVU_PF_VFFLR_INT_ENA_W1SX(1), INTR_MASK(vfs - 64));
+
+	otx2_cpt_write64(cptpf->reg_base, BLKADDR_RVUM, 0, RVU_PF_VFME_INTX(1),
+			 INTR_MASK(vfs - 64));
+	otx2_cpt_write64(cptpf->reg_base, BLKADDR_RVUM, 0,
+			 RVU_PF_VFME_INT_ENA_W1SX(1), INTR_MASK(vfs - 64));
 }
 
-static void cptpf_disable_vf_flr_intrs(struct otx2_cptpf_dev *cptpf)
+static void cptpf_disable_vf_flr_me_intrs(struct otx2_cptpf_dev *cptpf)
 {
+	int vfs = cptpf->max_vfs;
+
 	/* Disable VF FLR interrupts */
 	otx2_cpt_write64(cptpf->reg_base, BLKADDR_RVUM, 0,
-			 RVU_PF_VFFLR_INT_ENA_W1CX(0), ~0x0ULL);
+			 RVU_PF_VFFLR_INT_ENA_W1CX(0), INTR_MASK(vfs));
+	/* Disable VF ME interrupts */
 	otx2_cpt_write64(cptpf->reg_base, BLKADDR_RVUM, 0,
-			 RVU_PF_VFFLR_INT_ENA_W1CX(1), ~0x0ULL);
+			 RVU_PF_VFME_INT_ENA_W1CX(0), INTR_MASK(vfs));
 
-	/* Clear interrupt if any */
-	otx2_cpt_write64(cptpf->reg_base, BLKADDR_RVUM, 0, RVU_PF_VFFLR_INTX(0),
-			 ~0x0ULL);
-	otx2_cpt_write64(cptpf->reg_base, BLKADDR_RVUM, 0, RVU_PF_VFFLR_INTX(1),
-			 ~0x0ULL);
+	if (vfs <= 64)
+		return;
+
+	otx2_cpt_write64(cptpf->reg_base, BLKADDR_RVUM, 0,
+			 RVU_PF_VFFLR_INT_ENA_W1CX(1), INTR_MASK(vfs - 64));
+
+	otx2_cpt_write64(cptpf->reg_base, BLKADDR_RVUM, 0,
+			 RVU_PF_VFME_INT_ENA_W1CX(1), INTR_MASK(vfs - 64));
 }
 
 static void cptpf_enable_afpf_mbox_intrs(struct otx2_cptpf_dev *cptpf)
@@ -175,6 +198,33 @@ static irqreturn_t cptpf_vf_flr_intr(int __always_unused irq, void *arg)
 	return IRQ_HANDLED;
 }
 
+static irqreturn_t cptpf_vf_me_intr(int __always_unused irq, void *arg)
+{
+	struct otx2_cptpf_dev *cptpf = arg;
+	int reg, vf, num_reg = 1;
+	u64 intr;
+
+	if (cptpf->max_vfs > 64)
+		num_reg = 2;
+
+	for (reg = 0; reg < num_reg; reg++) {
+		intr = otx2_cpt_read64(cptpf->reg_base, BLKADDR_RVUM, 0,
+				       RVU_PF_VFME_INTX(reg));
+		if (!intr)
+			continue;
+		for (vf = 0; vf < 64; vf++) {
+			if (!(intr & BIT_ULL(vf)))
+				continue;
+			otx2_cpt_write64(cptpf->reg_base, BLKADDR_RVUM, 0,
+					 RVU_PF_VFTRPENDX(reg), BIT_ULL(vf));
+			/* Clear interrupt */
+			otx2_cpt_write64(cptpf->reg_base, BLKADDR_RVUM, 0,
+					 RVU_PF_VFME_INTX(reg), BIT_ULL(vf));
+		}
+	}
+	return IRQ_HANDLED;
+}
+
 static void cptpf_unregister_interrupts(struct otx2_cptpf_dev *cptpf)
 {
 	int i;
@@ -219,6 +269,21 @@ static int cptpf_register_interrupts(struct otx2_cptpf_dev *cptpf)
 		goto err;
 	cptpf->irq_registered[RVU_PF_INT_VEC_VFFLR1] = true;
 
+	/* Register VF ME interrupt handler */
+	ret = request_irq(pci_irq_vector(cptpf->pdev,
+			  RVU_PF_INT_VEC_VFME0), cptpf_vf_me_intr, 0,
+			  "CPTPF ME0", cptpf);
+	if (ret)
+		goto err;
+	cptpf->irq_registered[RVU_PF_INT_VEC_VFME0] = true;
+
+	ret = request_irq(pci_irq_vector(cptpf->pdev,
+			  RVU_PF_INT_VEC_VFME1), cptpf_vf_me_intr, 0,
+			  "CPTPF ME1", cptpf);
+	if (ret)
+		goto err;
+	cptpf->irq_registered[RVU_PF_INT_VEC_VFME1] = true;
+
 	/* Register AF-PF mailbox interrupt handler */
 	ret = request_irq(pci_irq_vector(cptpf->pdev,
 			  RVU_PF_INT_VEC_AFPF_MBOX), otx2_cptpf_afpf_mbox_intr,
@@ -660,7 +725,7 @@ static int otx2_cptpf_probe(struct pci_dev *pdev,
 		goto destroy_flr;
 
 	/* Enable VF FLR interrupts */
-	cptpf_enable_vf_flr_intrs(cptpf);
+	cptpf_enable_vf_flr_me_intrs(cptpf);
 
 	/* Enable AF-PF mailbox interrupts */
 	cptpf_enable_afpf_mbox_intrs(cptpf);
@@ -692,7 +757,7 @@ static int otx2_cptpf_probe(struct pci_dev *pdev,
 unregister_interrupts:
 	cptpf_disable_vfpf_mbox_intrs(cptpf);
 	cptpf_disable_afpf_mbox_intrs(cptpf);
-	cptpf_disable_vf_flr_intrs(cptpf);
+	cptpf_disable_vf_flr_me_intrs(cptpf);
 	cptpf_unregister_interrupts(cptpf);
 destroy_flr:
 	cptpf_flr_wq_destroy(cptpf);
@@ -738,7 +803,7 @@ static void otx2_cptpf_remove(struct pci_dev *pdev)
 	/* Disable AF-PF mailbox interrupt */
 	cptpf_disable_afpf_mbox_intrs(cptpf);
 	/* Disable VF FLR interrupts */
-	cptpf_disable_vf_flr_intrs(cptpf);
+	cptpf_disable_vf_flr_me_intrs(cptpf);
 	/* Unregister CPT interrupts */
 	cptpf_unregister_interrupts(cptpf);
 	/* Destroy FLR work queue */
-- 
2.31.1

