From 3c69791e5079223f8b4a519fa1c1c544de198dd2 Mon Sep 17 00:00:00 2001
From: Nishad Saraf <nishad.saraf@xilinx.com>
Date: Tue, 6 Oct 2020 00:35:37 -0700
Subject: [PATCH 1694/1852] misc: xilinx-ai-engine: Fix for-loop control limits

commit 133466a4a279defcf30a673d8338d618c25b6b3e from
https://github.com/Xilinx/linux-xlnx.git

This patch fixes the start value of loop control variables, and
terminating condition of for-loops in aie_get_error_count() API.

Signed-off-by: Nishad Saraf <nishad.saraf@xilinx.com>
Reviewed-by: Wendy Liang <wendy.liang@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 .../xilinx-ai-engine/ai-engine-interrupt.c    | 40 +++++++++++--------
 1 file changed, 23 insertions(+), 17 deletions(-)

diff --git a/drivers/misc/xilinx-ai-engine/ai-engine-interrupt.c b/drivers/misc/xilinx-ai-engine/ai-engine-interrupt.c
index 5d5677df2021..3e0444bc13d3 100644
--- a/drivers/misc/xilinx-ai-engine/ai-engine-interrupt.c
+++ b/drivers/misc/xilinx-ai-engine/ai-engine-interrupt.c
@@ -824,27 +824,33 @@ static u32 aie_get_module_error_count(struct aie_partition *apart,
  */
 static u32 aie_get_error_count(struct aie_partition *apart)
 {
-	const struct aie_error_attr *core_errors = apart->adev->core_errors;
-	const struct aie_error_attr *mem_errors = apart->adev->mem_errors;
-	const struct aie_error_attr *shim_errors = apart->adev->shim_errors;
+	const struct aie_error_attr *core_errs = apart->adev->core_errors;
+	const struct aie_error_attr *mem_errs = apart->adev->mem_errors;
+	const struct aie_error_attr *shim_errs = apart->adev->shim_errors;
 	struct aie_location loc;
-	u32 count = 0;
+	u32 ttype, num = 0;
 
-	for (loc.col = 0; loc.col < apart->range.size.col; loc.col++) {
-		loc.row = 0;
-		count += aie_get_module_error_count(apart, loc, AIE_PL_MOD,
-						    shim_errors);
-
-		for (; loc.row < apart->range.size.row - 1; loc.row++) {
-			count += aie_get_module_error_count(apart, loc,
-							    AIE_CORE_MOD,
-							    core_errors);
-			count += aie_get_module_error_count(apart, loc,
-							    AIE_MEM_MOD,
-							    mem_errors);
+	for (loc.col = apart->range.start.col;
+	     loc.col < apart->range.size.col; loc.col++) {
+		for (loc.row = apart->range.start.row;
+		     loc.row < apart->range.size.row; loc.row++) {
+			ttype = apart->adev->ops->get_tile_type(&loc);
+			if (ttype == AIE_TILE_TYPE_TILE) {
+				num += aie_get_module_error_count(apart, loc,
+								  AIE_CORE_MOD,
+								  core_errs);
+				num += aie_get_module_error_count(apart, loc,
+								  AIE_MEM_MOD,
+								  mem_errs);
+			} else {
+				num += aie_get_module_error_count(apart, loc,
+								  AIE_PL_MOD,
+								  shim_errs);
+			}
 		}
 	}
-	return count;
+
+	return num;
 }
 
 /**
-- 
2.31.1

