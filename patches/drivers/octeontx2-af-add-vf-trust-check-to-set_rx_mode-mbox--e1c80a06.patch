From 0a62db8d5076980c7e4499b0823139d67bbe7da1 Mon Sep 17 00:00:00 2001
From: Naveen Mamindlapalli <naveenm@marvell.com>
Date: Tue, 20 Apr 2021 00:15:53 +0530
Subject: [PATCH 1503/1921] octeontx2-af: add vf trust check to set_rx_mode
 mbox handler

This patch checks VF trust setting when multicast or promisc
mode is enabled by VF driver. Untrusted VF can't enable promisc
or multicast mode. When VF trust setting is disabled by PF, then
the multicast and promisc entries will be disabled for that VF.

Change-Id: Ib6793c9446eb68a60f1408c1723a3290f7b11d8a
Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/50689
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/rvu.c   | 24 +++++++++++++++++--
 .../ethernet/marvell/octeontx2/af/rvu_nix.c   |  5 ++++
 2 files changed, 27 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
index 5f9c26afd355..cb12c31482d0 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
@@ -2084,9 +2084,11 @@ int rvu_mbox_handler_ndc_sync_op(struct rvu *rvu,
 int rvu_mbox_handler_set_vf_perm(struct rvu *rvu, struct set_vf_perm *req,
 				 struct msg_rsp *rsp)
 {
+	struct rvu_hwinfo *hw = rvu->hw;
 	u16 pcifunc = req->hdr.pcifunc;
 	struct rvu_pfvf *pfvf;
-	int target;
+	int blkaddr, nixlf;
+	u16 target;
 
 	/* Only PF can add VF permissions */
 	if ((pcifunc & RVU_PFVF_FUNC_MASK) || is_afvf(pcifunc))
@@ -2095,11 +2097,29 @@ int rvu_mbox_handler_set_vf_perm(struct rvu *rvu, struct set_vf_perm *req,
 	target = (pcifunc & ~RVU_PFVF_FUNC_MASK) | (req->vf + 1);
 	pfvf = rvu_get_pfvf(rvu, target);
 
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NIX, target);
+	if (blkaddr < 0)
+		return NPA_AF_ERR_AF_LF_INVALID;
+
+	nixlf = rvu_get_lf(rvu, &hw->block[blkaddr], pcifunc, 0);
+	if (nixlf < 0)
+		return NPA_AF_ERR_AF_LF_INVALID;
+
 	if (req->flags & RESET_VF_PERM)
 		pfvf->flags &= RVU_CLEAR_VF_PERM;
 	else if (test_bit(PF_SET_VF_TRUSTED, &pfvf->flags) ^
-		 (req->flags & VF_TRUSTED))
+		 (req->flags & VF_TRUSTED)) {
 		change_bit(PF_SET_VF_TRUSTED, &pfvf->flags);
+		if (!test_bit(PF_SET_VF_TRUSTED, &pfvf->flags)) {
+			/* Delete multicast and promisc MCAM entries */
+			npc_enadis_default_mce_entry(rvu, target, nixlf,
+						     NIXLF_ALLMULTI_ENTRY,
+						     false);
+			npc_enadis_default_mce_entry(rvu, target, nixlf,
+						     NIXLF_PROMISC_ENTRY,
+						     false);
+		}
+	}
 
 	return 0;
 }
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
index 79009d489580..3aef3707dde6 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
@@ -3646,6 +3646,11 @@ int rvu_mbox_handler_nix_set_rx_mode(struct rvu *rvu, struct nix_rx_mode *req,
 		return 0;
 	}
 
+	/* untrusted VF can't configure promisc/allmulti */
+	if (is_vf(pcifunc) && !test_bit(PF_SET_VF_TRUSTED, &pfvf->flags) &&
+	    (promisc || allmulti))
+		return 0;
+
 	err = nix_get_nixlf(rvu, pcifunc, &nixlf, NULL);
 	if (err)
 		return err;
-- 
2.31.1

