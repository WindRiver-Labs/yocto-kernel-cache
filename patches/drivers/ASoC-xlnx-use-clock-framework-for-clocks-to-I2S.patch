From 570c1798fb9ba362bc32772cfdbd85919458bab3 Mon Sep 17 00:00:00 2001
From: Maruthi Srinivas Bayyavarapu <maruthi.srinivas.bayyavarapu@xilinx.com>
Date: Thu, 28 Feb 2019 05:46:26 -0800
Subject: [PATCH 0530/1852] ASoC: xlnx: use clock framework for clocks to I2S

commit fc452678ffac6d40083dd4c68c8a0ccd70f4ed9c from
https://github.com/Xilinx/linux-xlnx.git

Different exclusive clocks and common clock are associated with I2S
transmitter and receiver. Use clock framework to explicitly enable
and disable them during initialization and deinitialization.

Signed-off-by: Maruthi Srinivas Bayyavarapu <maruthi.srinivas.bayyavarapu@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 sound/soc/xilinx/xlnx_i2s.c | 89 ++++++++++++++++++++++++++++++++++---
 1 file changed, 84 insertions(+), 5 deletions(-)

diff --git a/sound/soc/xilinx/xlnx_i2s.c b/sound/soc/xilinx/xlnx_i2s.c
index eb5a247c2fae..1ae53d1cc2ec 100644
--- a/sound/soc/xilinx/xlnx_i2s.c
+++ b/sound/soc/xilinx/xlnx_i2s.c
@@ -7,6 +7,7 @@
 // Author: Praveen Vuppala <praveenv@xilinx.com>
 // Author: Maruthi Srinivas Bayyavarapu <maruthis@xilinx.com>
 
+#include <linux/clk.h>
 #include <linux/io.h>
 #include <linux/module.h>
 #include <linux/of.h>
@@ -24,6 +25,9 @@
 
 struct xlnx_i2s_dev_data {
 	void __iomem *base;
+	struct clk *axi_clk;
+	struct clk *axis_clk;
+	struct clk *aud_mclk;
 };
 
 static int xlnx_i2s_set_sclkout_div(struct snd_soc_dai *cpu_dai,
@@ -114,9 +118,12 @@ static int xlnx_i2s_probe(struct platform_device *pdev)
 	if (!dev_data)
 		return -ENOMEM;
 
-	dev_data->base = devm_platform_ioremap_resource(pdev, 0);
-	if (IS_ERR(dev_data->base))
-		return PTR_ERR(dev_data->base);
+	dev_data->axi_clk = devm_clk_get(&pdev->dev, "s_axi_ctrl_aclk");
+	if (IS_ERR(dev_data->axi_clk)) {
+		ret = PTR_ERR(dev_data->axi_clk);
+		dev_err(&pdev->dev, "failed to get s_axi_ctrl_aclk(%d)\n", ret);
+		return ret;
+	}
 
 	ret = of_property_read_u32(node, "xlnx,num-channels", &ch);
 	if (ret < 0) {
@@ -149,6 +156,15 @@ static int xlnx_i2s_probe(struct platform_device *pdev)
 		dai_drv->playback.channels_max = ch;
 		dai_drv->playback.rates	= SNDRV_PCM_RATE_8000_192000;
 		dai_drv->ops = &xlnx_i2s_dai_ops;
+
+		dev_data->axis_clk = devm_clk_get(&pdev->dev,
+						  "s_axis_aud_aclk");
+		if (IS_ERR(dev_data->axis_clk)) {
+			ret = PTR_ERR(dev_data->axis_clk);
+			dev_err(&pdev->dev,
+				"failed to get s_axis_aud_aclk(%d)\n", ret);
+			return ret;
+		}
 	} else if (of_device_is_compatible(node, "xlnx,i2s-receiver-1.0")) {
 		dai_drv->name = "xlnx_i2s_capture";
 		dai_drv->capture.stream_name = "Capture";
@@ -157,30 +173,93 @@ static int xlnx_i2s_probe(struct platform_device *pdev)
 		dai_drv->capture.channels_max = ch;
 		dai_drv->capture.rates = SNDRV_PCM_RATE_8000_192000;
 		dai_drv->ops = &xlnx_i2s_dai_ops;
+
+		dev_data->axis_clk = devm_clk_get(&pdev->dev,
+						  "m_axis_aud_aclk");
+		if (IS_ERR(dev_data->axis_clk)) {
+			ret = PTR_ERR(dev_data->axis_clk);
+			dev_err(&pdev->dev,
+				"failed to get m_axis_aud_aclk(%d)\n", ret);
+			return ret;
+		}
 	} else {
 		return -ENODEV;
 	}
 
-	dev_set_drvdata(&pdev->dev, dev_data->base);
+	dev_data->aud_mclk = devm_clk_get(&pdev->dev, "aud_mclk");
+	if (IS_ERR(dev_data->aud_mclk)) {
+		ret = PTR_ERR(dev_data->aud_mclk);
+		dev_err(&pdev->dev, "failed to get aud_mclk(%d)\n", ret);
+		return ret;
+	}
+
+	ret = clk_prepare_enable(dev_data->axi_clk);
+	if (ret) {
+		dev_err(&pdev->dev,
+			"failed to enable s_axi_ctrl_aclk(%d)\n", ret);
+		return ret;
+	}
+
+	ret = clk_prepare_enable(dev_data->axis_clk);
+	if (ret) {
+		dev_err(&pdev->dev,
+			"failed to enable axis_aud_aclk(%d)\n", ret);
+		goto err_axis_clk;
+	}
+
+	ret = clk_prepare_enable(dev_data->aud_mclk);
+	if (ret) {
+		dev_err(&pdev->dev,
+			"failed to enable aud_mclk(%d)\n", ret);
+		goto err_aud_mclk;
+	}
+
+	dev_data->base = devm_platform_ioremap_resource(pdev, 0);
+	if (IS_ERR(dev_data->base)) {
+		ret = PTR_ERR(dev_data->base);
+		goto clk_err;
+	}
+
+	dev_set_drvdata(&pdev->dev, dev_data);
 
 	ret = devm_snd_soc_register_component(&pdev->dev, &xlnx_i2s_component,
 					      dai_drv, 1);
 	if (ret) {
 		dev_err(&pdev->dev, "i2s component registration failed\n");
-		return ret;
+		goto clk_err;
 	}
 
 	dev_info(&pdev->dev, "%s DAI registered\n", dai_drv->name);
 
+	return 0;
+clk_err:
+	clk_disable_unprepare(dev_data->aud_mclk);
+err_aud_mclk:
+	clk_disable_unprepare(dev_data->axis_clk);
+err_axis_clk:
+	clk_disable_unprepare(dev_data->axi_clk);
+
 	return ret;
 }
 
+static int xlnx_i2s_remove(struct platform_device *pdev)
+{
+	struct xlnx_i2s_dev_data *dev_data = dev_get_drvdata(&pdev->dev);
+
+	clk_disable_unprepare(dev_data->aud_mclk);
+	clk_disable_unprepare(dev_data->axis_clk);
+	clk_disable_unprepare(dev_data->axi_clk);
+
+	return 0;
+}
+
 static struct platform_driver xlnx_i2s_aud_driver = {
 	.driver = {
 		.name = DRV_NAME,
 		.of_match_table = xlnx_i2s_of_match,
 	},
 	.probe = xlnx_i2s_probe,
+	.remove = xlnx_i2s_remove,
 };
 
 module_platform_driver(xlnx_i2s_aud_driver);
-- 
2.31.1

