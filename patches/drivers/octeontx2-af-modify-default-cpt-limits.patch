From 5bb25b5646932f920f38174218e8b7d236ab1091 Mon Sep 17 00:00:00 2001
From: SrujanaChalla <schalla@marvell.com>
Date: Thu, 20 Feb 2020 12:56:56 +0530
Subject: [PATCH 485/767] octeontx2-af: modify default cpt limits

commit baed403debab0d478098c25eb64e0cd9a4beb84c from
git@git.assembla.com:cavium/WindRiver.linux.git

This patch fixes the issue "enabling CPT VFs fails with default limits
assignment" caused by below merged patch
https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/21369

Change-Id: I051e18583f6ceb907a79a054c30ce32db22b15ad
Signed-off-by: SrujanaChalla <schalla@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/23589
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Stanislaw Kardach <Stanislaw.Kardach@cavium.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../ethernet/marvell/octeontx2/af/rvu_validation.c | 14 ++++++++++----
 1 file changed, 10 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c
index ffc356f9b479..55ceacd5ae4d 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c
@@ -455,7 +455,8 @@ static struct rvu_quota_ops pf_limit_ops = {
 static void rvu_set_default_limits(struct rvu *rvu)
 {
 	int i, nvfs, cpt_rvus, npa_rvus, sso_rvus, nix_rvus, nsso, nssow, ntim;
-	int ncpt, nnpa, nnix, nsmq = 0, ntl4 = 0, ntl3 = 0, ntl2 = 0;
+	int total_cpt_lfs, ncptpf_cptlfs = 0, nssopf_cptlfs = 0;
+	int nnpa, nnix, nsmq = 0, ntl4 = 0, ntl3 = 0, ntl2 = 0;
 	unsigned short devid;
 
 	/* First pass, count number of SSO/TIM PFs. */
@@ -482,8 +483,13 @@ static void rvu_set_default_limits(struct rvu *rvu)
 	nsso = rvu->pf_limits.sso->max_sum / sso_rvus;
 	nssow = rvu->pf_limits.ssow->max_sum / sso_rvus;
 	ntim = rvu->pf_limits.tim->max_sum / sso_rvus;
+	total_cpt_lfs = rvu->pf_limits.cpt->max_sum;
 	/* Divide CPT among SSO and CPT PFs since cores shouldn't be shared. */
-	ncpt = rvu->pf_limits.cpt->max_sum / (sso_rvus + cpt_rvus);
+	if (total_cpt_lfs) {
+		/* One extra LF needed for inline ipsec inbound configuration */
+		ncptpf_cptlfs = num_online_cpus() + 1;
+		nssopf_cptlfs = (total_cpt_lfs - ncptpf_cptlfs) / sso_rvus;
+	}
 	/* NPA/NIX count depends on DTS VF config. Allocate until run out. */
 	nnpa = rvu->pf_limits.npa->max_sum;
 	nnix = rvu->pf_limits.nix->max_sum;
@@ -530,7 +536,7 @@ static void rvu_set_default_limits(struct rvu *rvu)
 			rvu->pf_limits.sso->a[i].val = nsso;
 			rvu->pf_limits.ssow->a[i].val = nssow;
 			rvu->pf_limits.tim->a[i].val = ntim;
-			rvu->pf_limits.cpt->a[i].val = ncpt;
+			rvu->pf_limits.cpt->a[i].val = nssopf_cptlfs;
 			break;
 		case PCI_DEVID_OCTEONTX2_NPA_RVU_PF:
 			nnpa -= 1 + nvfs;
@@ -539,7 +545,7 @@ static void rvu_set_default_limits(struct rvu *rvu)
 		case PCI_DEVID_OCTEONTX2_CPT_RVU_PF:
 			nnpa -= 1;
 			rvu->pf_limits.npa->a[i].val = nnpa > 0 ? 1 : 0;
-			rvu->pf_limits.cpt->a[i].val = ncpt;
+			rvu->pf_limits.cpt->a[i].val = ncptpf_cptlfs;
 			break;
 		case PCI_DEVID_OCTEONTX2_SDP_RVU_PF:
 			nnix -= 1 + nvfs;
-- 
2.31.1

