From 40e91989c27f4d1cd0d9da2c63fb82295b5717f3 Mon Sep 17 00:00:00 2001
From: Vasileios Bimpikas <vasileios.bimpikas@xilinx.com>
Date: Wed, 9 Jan 2019 14:22:24 +0000
Subject: [PATCH 1159/1852] staging: xroeframer: add sysfs entries for "stats"
 registers

commit cea3c585705ca7b0bd409c81ff9aeaaf8858cd0e from
https://github.com/Xilinx/linux-xlnx.git

This includes the first 2 registers of the stats register bank as sysfs
entries. The rest of the entries will be added on the next patch
and then the "/dev/xroefram/stats" device will be removed from
the driver's code.

Signed-off-by: Vasileios Bimpikas <vasileios.bimpikas@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
State: not-upstreamable
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/staging/xroeframer/Makefile           |   3 +-
 drivers/staging/xroeframer/sysfs_xroe.c       |   4 +
 .../xroeframer/sysfs_xroe_framer_stats.c      | 110 ++++++++++++++++++
 drivers/staging/xroeframer/xroe_framer.h      |   2 +
 4 files changed, 118 insertions(+), 1 deletion(-)
 create mode 100644 drivers/staging/xroeframer/sysfs_xroe_framer_stats.c

diff --git a/drivers/staging/xroeframer/Makefile b/drivers/staging/xroeframer/Makefile
index ed877c2633f6..f7bf07e98243 100644
--- a/drivers/staging/xroeframer/Makefile
+++ b/drivers/staging/xroeframer/Makefile
@@ -8,4 +8,5 @@ framer-objs := 	xroe_framer.o \
 		sysfs_xroe.o \
 		sysfs_xroe_framer_ipv4.o \
 		sysfs_xroe_framer_ipv6.o \
-		sysfs_xroe_framer_udp.o
+		sysfs_xroe_framer_udp.o \
+		sysfs_xroe_framer_stats.o
diff --git a/drivers/staging/xroeframer/sysfs_xroe.c b/drivers/staging/xroeframer/sysfs_xroe.c
index 169e87dc1ec3..9caf5e50b02f 100644
--- a/drivers/staging/xroeframer/sysfs_xroe.c
+++ b/drivers/staging/xroeframer/sysfs_xroe.c
@@ -428,6 +428,9 @@ int xroe_sysfs_init(void)
 	if (ret)
 		return ret;
 	ret = xroe_sysfs_udp_init();
+	if (ret)
+		return ret;
+	ret = xroe_sysfs_stats_init();
 	return ret;
 }
 
@@ -445,6 +448,7 @@ void xroe_sysfs_exit(void)
 	xroe_sysfs_ipv4_exit();
 	xroe_sysfs_ipv6_exit();
 	xroe_sysfs_udp_exit();
+	xroe_sysfs_stats_exit();
 	for (i = 0; i < MAX_NUM_ETH_PORTS; i++)
 		kobject_put(kobj_eth_ports[i]);
 	kobject_put(kobj_framer);
diff --git a/drivers/staging/xroeframer/sysfs_xroe_framer_stats.c b/drivers/staging/xroeframer/sysfs_xroe_framer_stats.c
new file mode 100644
index 000000000000..14a83c36eacb
--- /dev/null
+++ b/drivers/staging/xroeframer/sysfs_xroe_framer_stats.c
@@ -0,0 +1,110 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2019 Xilinx, Inc.
+ *
+ * Vasileios Bimpikas <vasileios.bimpikas@xilinx.com>
+ */
+
+#include <linux/init.h>
+#include <linux/kobject.h>
+#include <linux/module.h>
+#include <linux/stat.h>
+#include <linux/string.h>
+#include <linux/sysfs.h>
+#include "xroe_framer.h"
+
+/**
+ * total_rx_good_pkt_show - Returns the total good rx packet count
+ * @kobj:	The kernel object of the entry
+ * @attr:	The attributes of the kernel object
+ * @buff:	The buffer the value will be written to
+ *
+ * Returns the total good rx packet count
+ *
+ * Return: The number of characters printed on success
+ */
+static ssize_t total_rx_good_pkt_show(struct kobject *kobj,
+				      struct kobj_attribute *attr, char *buff)
+{
+	u32 count;
+
+	count = utils_sysfs_show_wrapper(STATS_TOTAL_RX_GOOD_PKT_CNT_ADDR,
+					 STATS_TOTAL_RX_GOOD_PKT_CNT_OFFSET,
+					 STATS_TOTAL_RX_GOOD_PKT_CNT_MASK,
+					 kobj);
+	return sprintf(buff, "%d\n", count);
+}
+
+/**
+ * total_rx_bad_pkt_show - Returns the total bad rx packet count
+ * @kobj:	The kernel object of the entry
+ * @attr:	The attributes of the kernel object
+ * @buff:	The buffer the value will be written to
+ *
+ * Returns the total bad rx packet count
+ *
+ * Return: The number of characters printed on success
+ */
+static ssize_t total_rx_bad_pkt_show(struct kobject *kobj,
+				     struct kobj_attribute *attr, char *buff)
+{
+	u32 count;
+
+	count = utils_sysfs_show_wrapper(STATS_TOTAL_RX_BAD_PKT_CNT_ADDR,
+					 STATS_TOTAL_RX_BAD_PKT_CNT_OFFSET,
+					 STATS_TOTAL_RX_BAD_PKT_CNT_MASK,
+					 kobj);
+	return sprintf(buff, "%d\n", count);
+}
+
+/* TODO Use DEVICE_ATTR/_RW/_RO macros */
+static struct kobj_attribute total_rx_good_pkt_attribute =
+	__ATTR(total_rx_good_pkt, 0444, total_rx_good_pkt_show, NULL);
+static struct kobj_attribute total_rx_bad_pkt_attribute =
+	__ATTR(total_rx_bad_pkt, 0444, total_rx_bad_pkt_show, NULL);
+
+static struct attribute *attrs[] = {
+	&total_rx_good_pkt_attribute.attr,
+	&total_rx_bad_pkt_attribute.attr,
+	NULL,
+};
+
+static struct attribute_group attr_group = {
+	.attrs = attrs,
+};
+
+struct kobject *kobj_stats;
+
+/**
+ * xroe_sysfs_stats_init - Creates the xroe sysfs "stats" subdirectory & entries
+ *
+ * Return: 0 on success, negative value in case of failure to
+ * create the sysfs group
+ *
+ * Creates the xroe sysfs "stats" subdirectory and entries under "xroe"
+ */
+int xroe_sysfs_stats_init(void)
+{
+	int ret;
+
+	kobj_stats = kobject_create_and_add("stats", root_xroe_kobj);
+	if (!kobj_stats)
+		return -ENOMEM;
+
+	ret = sysfs_create_group(kobj_stats, &attr_group);
+	if (ret)
+		kobject_put(kobj_stats);
+
+	return ret;
+}
+
+/**
+ * xroe_sysfs_stats_exit - Deletes the xroe sysfs "ipv4" subdirectory & entries
+ *
+ * Deletes the xroe sysfs "stats" subdirectory and entries,
+ * under the "xroe" entry
+ */
+void xroe_sysfs_stats_exit(void)
+{
+	kobject_put(kobj_stats);
+}
diff --git a/drivers/staging/xroeframer/xroe_framer.h b/drivers/staging/xroeframer/xroe_framer.h
index 8d1c2da1ea35..fb215d9ddc5a 100644
--- a/drivers/staging/xroeframer/xroe_framer.h
+++ b/drivers/staging/xroeframer/xroe_framer.h
@@ -60,10 +60,12 @@ int xroe_sysfs_init(void);
 int xroe_sysfs_ipv4_init(void);
 int xroe_sysfs_ipv6_init(void);
 int xroe_sysfs_udp_init(void);
+int xroe_sysfs_stats_init(void);
 void xroe_sysfs_exit(void);
 void xroe_sysfs_ipv4_exit(void);
 void xroe_sysfs_ipv6_exit(void);
 void xroe_sysfs_udp_exit(void);
+void xroe_sysfs_stats_exit(void);
 int utils_write32withmask(void __iomem *working_address, u32 value,
 			  u32 mask, u32 offset);
 int utils_check_address_offset(u32 offset, size_t device_size);
-- 
2.31.1

