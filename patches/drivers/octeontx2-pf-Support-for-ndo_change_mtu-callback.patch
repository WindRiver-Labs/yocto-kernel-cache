From ad35d31f7583b2cd91b8ce5ab52777a8c9f9a9c2 Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@marvell.com>
Date: Thu, 7 Feb 2019 15:01:45 +0530
Subject: [PATCH 049/767] octeontx2-pf: Support for ndo_change_mtu callback

commit 0a6ad98ac977452909de6b351ed2645ecdc582a1 from
git@git.assembla.com:cavium/WindRiver.linux.git

Added support to modify MTU for RVU PF netdev interfaces.
MTU range supported is 68 to 9190 bytes.

Change-Id: Ib8492acab8de982c0eddd477d313d012fbfb01b2
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_common.c       | 34 +++++++++++++++++--
 .../marvell/octeontx2/nic/otx2_common.h       |  2 ++
 .../ethernet/marvell/octeontx2/nic/otx2_pf.c  | 11 ++++++
 .../marvell/octeontx2/nic/otx2_txrx.h         |  5 +++
 4 files changed, 50 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
index b2e7a1b3aea9..235ffec3eaf4 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
@@ -44,6 +44,35 @@ int otx2_set_mac_address(struct net_device *netdev, void *p)
 	return 0;
 }
 
+int otx2_hw_set_mtu(struct otx2_nic *pfvf, int mtu)
+{
+	struct nix_frs_cfg *req;
+
+	req = otx2_mbox_alloc_msg_nix_set_hw_frs(&pfvf->mbox);
+	if (!req)
+		return -ENOMEM;
+
+	req->update_smq = true;
+	req->maxlen = mtu + OTX2_ETH_HLEN;
+	return otx2_sync_mbox_msg(&pfvf->mbox);
+}
+
+int otx2_change_mtu(struct net_device *netdev, int new_mtu)
+{
+	struct otx2_nic *pfvf = netdev_priv(netdev);
+	int err;
+
+	if (netif_running(netdev)) {
+		err = otx2_hw_set_mtu(pfvf, new_mtu);
+		if (err)
+			return err;
+	}
+	netdev_info(netdev, "Changing MTU from %d to %d\n",
+		    netdev->mtu, new_mtu);
+	netdev->mtu = new_mtu;
+	return 0;
+}
+
 dma_addr_t otx2_alloc_rbuf(struct otx2_nic *pfvf, struct otx2_pool *pool,
 			   gfp_t gfp)
 {
@@ -113,7 +142,8 @@ int otx2_txschq_config(struct otx2_nic *pfvf, int lvl)
 	if (lvl == NIX_TXSCH_LVL_SMQ) {
 		/* Set min and max Tx packet lengths */
 		req->reg[0] = NIX_AF_SMQX_CFG(schq);
-		req->regval[0] = (pfvf->netdev->mtu << 8) | NIC_HW_MIN_FRS;
+		req->regval[0] = ((pfvf->netdev->mtu  + OTX2_ETH_HLEN) << 8) |
+				   OTX2_MIN_MTU;
 
 		req->regval[0] |= (0x20ULL << 51) | (0x80ULL << 39);
 		req->num_regs++;
@@ -272,7 +302,7 @@ static int otx2_sq_init(struct otx2_nic *pfvf, u16 qidx, u16 sqb_aura)
 	aq->sq.ena = 1;
 	/* Only one SMQ is allocated, map all SQ's to that SMQ  */
 	aq->sq.smq = pfvf->hw.txschq_list[NIX_TXSCH_LVL_SMQ][0];
-	aq->sq.smq_rr_quantum = DMA_BUFFER_LEN / 4;
+	aq->sq.smq_rr_quantum = OTX2_MAX_MTU;
 	aq->sq.default_chan = pfvf->tx_chan_base;
 	aq->sq.sqe_stype = NIX_STYPE_STF; /* Cache SQB */
 	aq->sq.sqb_aura = sqb_aura;
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
index 79b158c0a277..a047beaebcf9 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.h
@@ -290,6 +290,8 @@ void otx2_set_cints_affinity(struct otx2_nic *pfvf);
 
 int otx2_hw_set_mac_addr(struct otx2_nic *pfvf, struct net_device *netdev);
 int otx2_set_mac_address(struct net_device *netdev, void *p);
+int otx2_change_mtu(struct net_device *netdev, int new_mtu);
+int otx2_hw_set_mtu(struct otx2_nic *pfvf, int mtu);
 
 /* RVU block related APIs */
 int otx2_attach_npa_nix(struct otx2_nic *pfvf);
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index f1a3038efc9c..b6d2c6937156 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -506,6 +506,11 @@ static int otx2_open(struct net_device *netdev)
 			goto err_disable_napi;
 	}
 
+	/* Set default MTU in HW */
+	err = otx2_hw_set_mtu(pf, netdev->mtu);
+	if (err)
+		goto err_disable_napi;
+
 	/* Register CQ IRQ handlers */
 	vec = pf->hw.nix_msixoff + NIX_LF_CINT_VEC_START;
 	for (qidx = 0; qidx < pf->hw.cint_cnt; qidx++) {
@@ -608,6 +613,7 @@ static const struct net_device_ops otx2_netdev_ops = {
 	.ndo_stop		= otx2_stop,
 	.ndo_start_xmit		= otx2_xmit,
 	.ndo_set_mac_address    = otx2_set_mac_address,
+	.ndo_change_mtu		= otx2_change_mtu,
 };
 
 static int otx2_probe(struct pci_dev *pdev, const struct pci_device_id *id)
@@ -727,6 +733,11 @@ static int otx2_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	pf->iommu_domain = iommu_get_domain_for_dev(dev);
 
 	netdev->netdev_ops = &otx2_netdev_ops;
+
+	/* MTU range: 68 - 9190 */
+	netdev->min_mtu = OTX2_MIN_MTU;
+	netdev->max_mtu = OTX2_MAX_MTU;
+
 	err = register_netdev(netdev);
 	if (err) {
 		dev_err(dev, "Failed to register netdevice\n");
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.h b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.h
index f66f407b506f..59cab1211926 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.h
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_txrx.h
@@ -13,6 +13,7 @@
 
 #include <linux/etherdevice.h>
 #include <linux/iommu.h>
+#include <linux/if_vlan.h>
 
 #define LBK_CHAN_BASE	0x000
 #define SDP_CHAN_BASE	0x700
@@ -26,6 +27,10 @@
 
 #define OTX2_HEAD_ROOM		OTX2_ALIGN
 
+#define	OTX2_ETH_HLEN		(VLAN_ETH_HLEN + VLAN_HLEN)
+#define OTX2_MIN_MTU		ETH_MIN_MTU
+#define OTX2_MAX_MTU		(9212 - OTX2_ETH_HLEN)
+
 #define OTX2_MAX_FRAGS_IN_SQE	9
 
 struct sg_list {
-- 
2.31.1

