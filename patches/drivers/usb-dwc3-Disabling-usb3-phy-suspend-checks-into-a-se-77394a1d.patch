From 96d18be2fefa61062f4f1d19e4620274543812e9 Mon Sep 17 00:00:00 2001
From: Piyush Mehta <piyush.mehta@xilinx.com>
Date: Thu, 23 Jan 2020 19:51:16 +0530
Subject: [PATCH 1024/1851] usb: dwc3: Disabling usb3 phy suspend checks into a
 separate function

commit df583dc31309baedd674c4d85896cec4fe1a30af from
https://github.com/Xilinx/linux-xlnx.git

This patch updates the code to usb3 phy suspend checks into a
separate function. This function checks for silicon revison and
disables suspend of usb3 phy for silicon revisions lesser than 4.0.

Signed-off-by: Anurag Kumar Vulisha <anurag.kumar.vulisha@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Piyush Mehta <piyush.mehta@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/usb/dwc3/dwc3-of-simple.c | 66 +++++++++++++++++++++++++++++++
 1 file changed, 66 insertions(+)

diff --git a/drivers/usb/dwc3/dwc3-of-simple.c b/drivers/usb/dwc3/dwc3-of-simple.c
index a4376e7c574f..7bb121faea3d 100644
--- a/drivers/usb/dwc3/dwc3-of-simple.c
+++ b/drivers/usb/dwc3/dwc3-of-simple.c
@@ -200,6 +200,44 @@ static int dwc3_simple_set_phydata(struct dwc3_of_simple *simple)
 	return 0;
 }
 
+static int dwc3_dis_u3phy_suspend(struct platform_device *pdev,
+				  struct dwc3_of_simple *simple)
+{
+	char *soc_rev;
+
+	/* The below is only valid for ZynqMP SOC */
+	if (of_device_is_compatible(pdev->dev.of_node,
+				    "xlnx,zynqmp-dwc3")) {
+		/* read Silicon version using nvmem driver */
+		soc_rev = zynqmp_nvmem_get_silicon_version(&pdev->dev,
+							   "soc_revision");
+
+		if (PTR_ERR(soc_rev) == -EPROBE_DEFER)
+			/* Do a deferred probe */
+			return -EPROBE_DEFER;
+		else if (!IS_ERR(soc_rev) && *soc_rev < ZYNQMP_SILICON_V4)
+			/* Add snps,dis_u3_susphy_quirk
+			 * for SOC revison less than v4
+			 */
+			simple->dis_u3_susphy_quirk = true;
+
+		if (!IS_ERR(soc_rev)) {
+			/* Update soc_rev to simple for future use */
+			simple->soc_rev = *soc_rev;
+
+			/* Clean soc_rev if got a valid pointer from nvmem
+			 * driver else we may end up in kernel panic
+			 */
+			kfree(soc_rev);
+		} else {
+			/* Return error */
+			return PTR_ERR(soc_rev);
+		}
+	}
+
+	return 0;
+}
+
 static int dwc3_of_simple_probe(struct platform_device *pdev)
 {
 	struct dwc3_of_simple	*simple;
@@ -222,6 +260,34 @@ static int dwc3_of_simple_probe(struct platform_device *pdev)
 	platform_set_drvdata(pdev, simple);
 	simple->dev = dev;
 
+	if (of_device_is_compatible(pdev->dev.of_node, "xlnx,zynqmp-dwc3") ||
+	    of_device_is_compatible(pdev->dev.of_node, "xlnx,versal-dwc3")) {
+
+		struct resource		*res;
+		void __iomem		*regs;
+
+		res = platform_get_resource(pdev,
+					    IORESOURCE_MEM, 0);
+
+		regs = devm_ioremap_resource(&pdev->dev, res);
+		if (IS_ERR(regs))
+			return PTR_ERR(regs);
+
+		/* Store the usb control regs into simple for further usage */
+		simple->regs = regs;
+
+		/*
+		 * ZynqMP silicon revision lesser than 4.0 needs to disable
+		 * suspend of usb 3.0 phy.
+		 */
+		ret = dwc3_dis_u3phy_suspend(pdev, simple);
+		if (ret)
+			return ret;
+	}
+
+	/* Set phy data for future use */
+	dwc3_simple_set_phydata(simple);
+
 	/*
 	 * Some controllers need to toggle the usb3-otg reset before trying to
 	 * initialize the PHY, otherwise the PHY times out.
-- 
2.31.1

