From 3c84943b70406e836f9c0a8bf8e6c939856ac397 Mon Sep 17 00:00:00 2001
From: Linu Cherian <lcherian@marvell.com>
Date: Thu, 23 Jan 2020 16:53:03 +0530
Subject: [PATCH 453/767] coresight: etr: Enable hardware quirks based on
 Silicon revision

commit 6431615e444199e307d2a4f0d1d53375b767387c from
git@git.assembla.com:cavium/WindRiver.linux.git

- Hardware quirks are now enabled based on Silicon revision
- Renamed and moved related macros to a file which is common
  to both ETM and ETR drivers, since there are cases where
  changes are applicable to both ETM and ETR drivers.

Change-Id: I2adec4234edde2f245f4ff69154bc2022fd226c7
Signed-off-by: Linu Cherian <lcherian@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/22245
[Kevin: Replace MIDR_IS_CPU_MODEL_RANGE with midr_is_cpu_model_range]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/hwtracing/coresight/Makefile          |  3 ++-
 drivers/hwtracing/coresight/coresight-priv.h  | 11 ++++++++
 .../hwtracing/coresight/coresight-quirks.c    | 25 +++++++++++++++++++
 .../hwtracing/coresight/coresight-tmc-etr.c   | 10 ++++----
 drivers/hwtracing/coresight/coresight-tmc.c   |  9 +++----
 drivers/hwtracing/coresight/coresight-tmc.h   |  8 ------
 6 files changed, 46 insertions(+), 20 deletions(-)
 create mode 100644 drivers/hwtracing/coresight/coresight-quirks.c

diff --git a/drivers/hwtracing/coresight/Makefile b/drivers/hwtracing/coresight/Makefile
index 3b435aa42af5..d390c006f61c 100644
--- a/drivers/hwtracing/coresight/Makefile
+++ b/drivers/hwtracing/coresight/Makefile
@@ -2,7 +2,8 @@
 #
 # Makefile for CoreSight drivers.
 #
-obj-$(CONFIG_CORESIGHT) += coresight.o coresight-etm-perf.o
+obj-$(CONFIG_CORESIGHT) += coresight.o coresight-etm-perf.o \
+				coresight-quirks.o
 obj-$(CONFIG_OF) += of_coresight.o
 obj-$(CONFIG_CORESIGHT_LINK_AND_SINK_TMC) += coresight-tmc.o \
 					     coresight-tmc-etf.o \
diff --git a/drivers/hwtracing/coresight/coresight-priv.h b/drivers/hwtracing/coresight/coresight-priv.h
index 83325b0f86f0..374feed83bf7 100644
--- a/drivers/hwtracing/coresight/coresight-priv.h
+++ b/drivers/hwtracing/coresight/coresight-priv.h
@@ -68,6 +68,14 @@ static DEVICE_ATTR_RO(name)
 extern const u32 barrier_pkt[4];
 #define CORESIGHT_BARRIER_PKT_SIZE (sizeof(barrier_pkt))
 
+/* Marvell OcteonTx CN9xxx device */
+#define OCTEONTX_CN9XXX_ETR		0x000cc213
+
+/* Coresight Hardware quirks */
+#define CSETR_QUIRK_BUFFSIZE_8BX	(0x1U << 0) /* 8 byte size multiplier */
+#define CSETR_QUIRK_SECURE_BUFF		(0x1U << 1) /* Trace buffer is Secure */
+#define CSETR_QUIRK_RESET_CTL_REG	(0x1U << 2) /* Reset CTL on reset */
+
 enum etm_addr_type {
 	ETM_ADDR_TYPE_NONE,
 	ETM_ADDR_TYPE_SINGLE,
@@ -201,4 +209,7 @@ static inline void *coresight_get_uci_data(const struct amba_id *id)
 	return 0;
 }
 
+/* Coresight ETM/ETR hardware quirks */
+u32 coresight_get_etr_quirks(unsigned int id);
+
 #endif
diff --git a/drivers/hwtracing/coresight/coresight-quirks.c b/drivers/hwtracing/coresight/coresight-quirks.c
new file mode 100644
index 000000000000..8087dde8d740
--- /dev/null
+++ b/drivers/hwtracing/coresight/coresight-quirks.c
@@ -0,0 +1,25 @@
+// SPDX-License-Identifier: GPL-2.0
+//
+#include <linux/coresight.h>
+#include "coresight-priv.h"
+
+u32 coresight_get_etr_quirks(unsigned int id)
+{
+	u32 options = 0; /* reset */
+
+	if (midr_is_cpu_model_range(read_cpuid_id(),
+				     MIDR_MRVL_OCTEONTX2_96XX,
+				     MIDR_CPU_VAR_REV(0, 0),
+				     MIDR_CPU_VAR_REV(3, 0)) ||
+	    midr_is_cpu_model_range(read_cpuid_id(),
+				     MIDR_MRVL_OCTEONTX2_95XX,
+				     MIDR_CPU_VAR_REV(0, 0),
+				     MIDR_CPU_VAR_REV(2, 0)))
+		options |= CSETR_QUIRK_BUFFSIZE_8BX |
+			CSETR_QUIRK_RESET_CTL_REG;
+
+	if (id == OCTEONTX_CN9XXX_ETR)
+		options |= CSETR_QUIRK_SECURE_BUFF;
+
+	return options;
+}
diff --git a/drivers/hwtracing/coresight/coresight-tmc-etr.c b/drivers/hwtracing/coresight/coresight-tmc-etr.c
index 3fe7967efa51..0c2536ebdeb8 100644
--- a/drivers/hwtracing/coresight/coresight-tmc-etr.c
+++ b/drivers/hwtracing/coresight/coresight-tmc-etr.c
@@ -610,7 +610,7 @@ static int tmc_etr_alloc_flat_buf(struct tmc_drvdata *drvdata,
 		return -ENOMEM;
 	}
 
-	if (!(drvdata->etr_options & CORESIGHT_OPTS_SECURE_BUFF))
+	if (!(drvdata->etr_options & CSETR_QUIRK_SECURE_BUFF))
 		goto skip_secure_buffer;
 
 	/* Register driver allocated dma buffer for necessary
@@ -973,14 +973,14 @@ static void __tmc_etr_enable_hw(struct tmc_drvdata *drvdata)
 
 	CS_UNLOCK(drvdata->base);
 
-	if (drvdata->etr_options & CORESIGHT_OPTS_RESET_CTL_REG)
+	if (drvdata->etr_options & CSETR_QUIRK_RESET_CTL_REG)
 		tmc_disable_hw(drvdata);
 
 	/* Wait for TMCSReady bit to be set */
 	tmc_wait_for_tmcready(drvdata);
 
 	writel_relaxed(etr_buf->size / 4, drvdata->base + TMC_RSZ);
-	if (drvdata && CORESIGHT_OPTS_BUFFSIZE_8BX)
+	if (drvdata && CSETR_QUIRK_BUFFSIZE_8BX)
 		writel_relaxed(etr_buf->size / 8, drvdata->base + TMC_RSZ);
 	else
 		writel_relaxed(etr_buf->size / 4, drvdata->base + TMC_RSZ);
@@ -1000,7 +1000,7 @@ static void __tmc_etr_enable_hw(struct tmc_drvdata *drvdata)
 		axictl |= TMC_AXICTL_SCT_GAT_MODE;
 
 	writel_relaxed(axictl, drvdata->base + TMC_AXICTL);
-	if (drvdata->etr_options & CORESIGHT_OPTS_SECURE_BUFF)
+	if (drvdata->etr_options & CSETR_QUIRK_SECURE_BUFF)
 		tmc_write_dba(drvdata, etr_buf->s_paddr);
 	else
 		tmc_write_dba(drvdata, etr_buf->hwaddr);
@@ -1011,7 +1011,7 @@ static void __tmc_etr_enable_hw(struct tmc_drvdata *drvdata)
 	 */
 	if (tmc_etr_has_cap(drvdata, TMC_ETR_SAVE_RESTORE)) {
 		tmc_write_rrp(drvdata, etr_buf->hwaddr);
-		if (drvdata->etr_options & CORESIGHT_OPTS_SECURE_BUFF)
+		if (drvdata->etr_options & CSETR_QUIRK_SECURE_BUFF)
 			tmc_write_rwp(drvdata, etr_buf->s_paddr);
 		else
 			tmc_write_rwp(drvdata, etr_buf->hwaddr);
diff --git a/drivers/hwtracing/coresight/coresight-tmc.c b/drivers/hwtracing/coresight/coresight-tmc.c
index 17759762abdc..bbeb98bbf8b5 100644
--- a/drivers/hwtracing/coresight/coresight-tmc.c
+++ b/drivers/hwtracing/coresight/coresight-tmc.c
@@ -151,7 +151,7 @@ static ssize_t tmc_read(struct file *file, char __user *data, size_t len,
 	if (actual <= 0)
 		return 0;
 
-	if ((drvdata->etr_options & CORESIGHT_OPTS_SECURE_BUFF) &&
+	if ((drvdata->etr_options & CSETR_QUIRK_SECURE_BUFF) &&
 		tmc_copy_secure_buffer(drvdata, bufp, len))
 		return -EFAULT;
 
@@ -425,11 +425,8 @@ static int tmc_probe(struct amba_device *adev, const struct amba_id *id)
 
 	drvdata->cpu = pdata ? pdata->cpu : 0;
 
-	/* Enable options for Silicon issues */
-	if (id->id == OCTEONTX_CN9XXX_ETR)
-		drvdata->etr_options = CORESIGHT_OPTS_BUFFSIZE_8BX |
-					CORESIGHT_OPTS_SECURE_BUFF |
-					CORESIGHT_OPTS_RESET_CTL_REG;
+	/* Enable fixes for Silicon issues */
+	drvdata->etr_options = coresight_get_etr_quirks(OCTEONTX_CN9XXX_ETR);
 
 	devid = readl_relaxed(drvdata->base + CORESIGHT_DEVID);
 	drvdata->config_type = BMVAL(devid, 6, 7);
diff --git a/drivers/hwtracing/coresight/coresight-tmc.h b/drivers/hwtracing/coresight/coresight-tmc.h
index b66c82d271fa..e987145d44a3 100644
--- a/drivers/hwtracing/coresight/coresight-tmc.h
+++ b/drivers/hwtracing/coresight/coresight-tmc.h
@@ -134,14 +134,6 @@ enum tmc_mem_intf_width {
 #define OCTEONTX_CN9XXX_ETR_CAPS	\
 	(TMC_ETR_SAVE_RESTORE)
 
-/* Marvell OcteonTx CN9xxx device */
-#define OCTEONTX_CN9XXX_ETR		0x000cc213
-
-/* Marvell OcteonTx CN9xxx HW issues */
-#define CORESIGHT_OPTS_BUFFSIZE_8BX	(0x1U << 0) /* 8 byte size multiplier */
-#define CORESIGHT_OPTS_SECURE_BUFF	(0x1U << 1) /* Trace buffer is Secure */
-#define CORESIGHT_OPTS_RESET_CTL_REG	(0x1U << 2) /* Reset CTL on reset */
-
 /* SMC call ids for managing the secure trace buffer */
 
 /* Args: x1 - size, x2 - cpu, x3 - llc lock flag
-- 
2.31.1

