From 9dcba5b5370d344e9e455ac7dc5c9b310459b942 Mon Sep 17 00:00:00 2001
From: Subbaraya Sundeep <sbhatta@marvell.com>
Date: Fri, 23 Oct 2020 18:26:31 +0530
Subject: [PATCH 0908/1921] octeontx2-af: Fix static code analyzer reported
 issues

This patch fixes below issues reported by static code
analyzer:
        Possible null pointer dereference
        Different sizes of operands in bitops
        Returning uninitialized values

Change-Id: Id4093e850284761d5ad888f96c5ba8ec1e2e68a6
Signed-off-by: Subbaraya Sundeep <sbhatta@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/30826
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/cgx.c   |  9 +++++++
 .../net/ethernet/marvell/octeontx2/af/rvu.c   |  3 +++
 .../ethernet/marvell/octeontx2/af/rvu_cgx.c   |  4 ++-
 .../marvell/octeontx2/af/rvu_debugfs.c        |  4 +--
 .../ethernet/marvell/octeontx2/af/rvu_nix.c   | 27 +++++++++++++++----
 .../ethernet/marvell/octeontx2/af/rvu_npc.c   |  8 +++---
 .../ethernet/marvell/octeontx2/af/rvu_tim.c   |  2 +-
 .../marvell/octeontx2/af/rvu_validation.c     | 12 ++++++++-
 .../ethernet/marvell/octeontx2/nic/otx2_pf.c  |  2 +-
 9 files changed, 56 insertions(+), 15 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/cgx.c b/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
index 6b5d99953699..f29105c29f6d 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/cgx.c
@@ -281,6 +281,9 @@ int cgx_lmac_addr_add(u8 cgx_id, u8 lmac_id, u8 *mac_addr)
 	int index, idx;
 	u64 cfg = 0;
 
+	if (!lmac)
+		return -ENODEV;
+
 	mac_ops = cgx_dev->mac_ops;
 	/* Get available index where entry is to be installed */
 	idx = rvu_alloc_rsrc(&lmac->mac_to_index_bmap);
@@ -312,6 +315,9 @@ int cgx_lmac_addr_reset(u8 cgx_id, u8 lmac_id)
 	u8 index = 0;
 	u64 cfg;
 
+	if (!lmac)
+		return -ENODEV;
+
 	mac_ops = cgx_dev->mac_ops;
 	/* Restore index 0 to its default init value as done during
 	 * cgx_lmac_init
@@ -337,6 +343,9 @@ int cgx_lmac_addr_del(u8 cgx_id, u8 lmac_id, u8 index)
 	struct lmac *lmac = lmac_pdata(lmac_id, cgx_dev);
 	struct cgx_mac_ops *mac_ops;
 
+	if (!lmac)
+		return -ENODEV;
+
 	mac_ops = cgx_dev->mac_ops;
 	/* Validate the index */
 	if (index >= lmac->mac_to_index_bmap.max)
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
index 3b07116d9dc4..835d362dfc9f 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
@@ -2569,6 +2569,9 @@ static void rvu_npa_lf_mapped_sso_lf_teardown(struct rvu *rvu, u16 pcifunc)
 
 	pcifunc_arr = kcalloc(rvu->hw->total_pfs + rvu->hw->total_vfs,
 			      sizeof(*pcifunc_arr), GFP_KERNEL);
+	if (!pcifunc_arr)
+		return;
+
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_SSO, 0);
 	if (blkaddr < 0)
 		return;
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
index 300db2bbc2b7..80217ae73206 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
@@ -169,8 +169,10 @@ static int rvu_cgx_send_link_info(int cgx_id, int lmac_id, struct rvu *rvu)
 				&qentry->link_event.link_uinfo);
 	qentry->link_event.cgx_id = cgx_id;
 	qentry->link_event.lmac_id = lmac_id;
-	if (err)
+	if (err) {
+		kfree(qentry);
 		goto skip_add;
+	}
 	list_add_tail(&qentry->evq_node, &rvu->cgx_evq_head);
 skip_add:
 	spin_unlock_irqrestore(&rvu->cgx_evq_lock, flags);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c
index 119f0b587763..e59b34278034 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c
@@ -384,7 +384,7 @@ static ssize_t rvu_dbg_qsize_write(struct file *filp,
 	int ret, lf;
 
 	cmd_buf = memdup_user(buffer, count);
-	if (IS_ERR(cmd_buf))
+	if (IS_ERR_OR_NULL(cmd_buf))
 		return -ENOMEM;
 
 	cmd_buf[count] = '\0';
@@ -401,7 +401,7 @@ static ssize_t rvu_dbg_qsize_write(struct file *filp,
 	if (cmd_buf)
 		ret = -EINVAL;
 
-	if (!strncmp(subtoken, "help", 4) || ret < 0) {
+	if (ret < 0 || !strncmp(subtoken, "help", 4)) {
 		dev_info(rvu->dev, "Use echo <%s-lf > qsize\n", blk_string);
 		goto qsize_write_done;
 	}
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
index 41e71ee436f3..bd0070144b8b 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
@@ -1373,7 +1373,7 @@ handle_txschq_shaper_update(struct rvu *rvu, int blkaddr, int nixlf,
 	u64 dbgval, md_debug0 = 0;
 	unsigned long poll_tmo;
 	bool rate_reg = 0;
-	u16 schq;
+	u32 schq;
 
 	regbase = reg & 0xFFFF;
 	schq = TXSCHQ_IDX(reg, TXSCHQ_IDX_SHIFT);
@@ -2290,8 +2290,12 @@ static int nix_tx_vtag_free(struct rvu *rvu, int blkaddr,
 			    u16 pcifunc, int index)
 {
 	struct nix_hw *nix_hw = get_nix_hw(rvu->hw, blkaddr);
-	struct nix_txvlan *vlan = &nix_hw->txvlan;
+	struct nix_txvlan *vlan;
+
+	if (!nix_hw)
+		return -ENODEV;
 
+	vlan = &nix_hw->txvlan;
 	if (vlan->entry2pfvf_map[index] != pcifunc)
 		return NIX_AF_ERR_PARAM;
 
@@ -2317,6 +2321,9 @@ static void nix_free_tx_vtag_entries(struct rvu *rvu, u16 pcifunc)
 		return;
 
 	nix_hw = get_nix_hw(rvu->hw, blkaddr);
+	if (!nix_hw)
+		return;
+
 	vlan = &nix_hw->txvlan;
 
 	mutex_lock(&vlan->rsrc_lock);
@@ -2360,12 +2367,16 @@ static int nix_tx_vtag_decfg(struct rvu *rvu, int blkaddr,
 			     struct nix_vtag_config *req)
 {
 	struct nix_hw *nix_hw = get_nix_hw(rvu->hw, blkaddr);
-	struct nix_txvlan *vlan = &nix_hw->txvlan;
 	u16 pcifunc = req->hdr.pcifunc;
 	int idx0 = req->tx.vtag0_idx;
 	int idx1 = req->tx.vtag1_idx;
+	struct nix_txvlan *vlan;
 	int err = 0;
 
+	if (!nix_hw)
+		return -ENODEV;
+
+	vlan = &nix_hw->txvlan;
 	if (req->tx.free_vtag0 && req->tx.free_vtag1)
 		if (vlan->entry2pfvf_map[idx0] != pcifunc ||
 		    vlan->entry2pfvf_map[idx1] != pcifunc)
@@ -2392,9 +2403,13 @@ static int nix_tx_vtag_cfg(struct rvu *rvu, int blkaddr,
 			   struct nix_vtag_config_rsp *rsp)
 {
 	struct nix_hw *nix_hw = get_nix_hw(rvu->hw, blkaddr);
-	struct nix_txvlan *vlan = &nix_hw->txvlan;
+	struct nix_txvlan *vlan;
 	u16 pcifunc = req->hdr.pcifunc;
 
+	if (!nix_hw)
+		return -ENODEV;
+
+	vlan = &nix_hw->txvlan;
 	if (req->tx.cfg_vtag0) {
 		rsp->vtag0_idx =
 			nix_tx_vtag_alloc(rvu, blkaddr,
@@ -3440,7 +3455,7 @@ nix_config_link_credits(struct rvu *rvu, int blkaddr, int link,
 	bool restore_tx_en = 0;
 	struct nix_hw *nix_hw;
 	u64 cfg, sw_xoff = 0;
-	u16 schq = 0;
+	u32 schq = 0;
 	u32 credits;
 	int rc;
 
@@ -4421,6 +4436,8 @@ void rvu_nix_unregister_interrupts(struct rvu *rvu)
 	blkaddr = rvu_get_next_nix_blkaddr(rvu, blkaddr);
 	while (blkaddr) {
 		nix_hw = get_nix_hw(rvu->hw, blkaddr);
+		if (!nix_hw)
+			continue;
 		rvu_nix_blk_unregister_interrupts(rvu, nix_hw);
 		blkaddr = rvu_get_next_nix_blkaddr(rvu, blkaddr);
 	}
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c
index 0f58094ba476..ffff8a9352c0 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c
@@ -31,7 +31,7 @@
 #define NPC_KEX_CHAN_MASK	0xFFFULL
 #define NPC_KEX_PF_FUNC_MASK    0xFFFFULL
 
-#define NPC_HW_TSTAMP_OFFSET	8
+#define NPC_HW_TSTAMP_OFFSET	8ULL
 
 static const char def_pfl_name[] = "default";
 
@@ -1922,7 +1922,7 @@ static void npc_map_mcam_entry_and_cntr(struct rvu *rvu, struct npc_mcam *mcam,
 					int blkaddr, u16 entry, u16 cntr)
 {
 	u16 index = entry & (mcam->banksize - 1);
-	u16 bank = npc_get_bank(mcam, entry);
+	u32 bank = npc_get_bank(mcam, entry);
 	struct rvu_hwinfo *hw = rvu->hw;
 
 	/* Set mapping and increment counter's refcnt */
@@ -1939,7 +1939,7 @@ static void npc_unmap_mcam_entry_and_cntr(struct rvu *rvu,
 					  int blkaddr, u16 entry, u16 cntr)
 {
 	u16 index = entry & (mcam->banksize - 1);
-	u16 bank = npc_get_bank(mcam, entry);
+	u32 bank = npc_get_bank(mcam, entry);
 
 	/* Remove mapping and reduce counter's refcnt */
 	mcam->entry2cntr_map[entry] = NPC_MCAM_INVALID_MAP;
@@ -2561,8 +2561,8 @@ int rvu_mbox_handler_npc_mcam_shift_entry(struct rvu *rvu,
 	struct npc_mcam *mcam = &rvu->hw->mcam;
 	u16 pcifunc = req->hdr.pcifunc;
 	u16 old_entry, new_entry;
+	int blkaddr, rc = 0;
 	u16 index, cntr;
-	int blkaddr, rc;
 
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NPC, 0);
 	if (blkaddr < 0)
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c
index e93f2c30f93a..edea6c34bf68 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c
@@ -33,7 +33,7 @@ static inline u64 get_tenns_tsc(void)
 
 static inline u64 get_tenns_clk(void)
 {
-	u64 tsc;
+	u64 tsc = 0;
 
 #if defined(CONFIG_ARM64)
 	asm volatile("mrs %0, cntfrq_el0" : "=r" (tsc));
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c
index 3315ad414386..f30d448d9a9b 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_validation.c
@@ -289,6 +289,9 @@ int rvu_mbox_handler_free_rsrc_cnt(struct rvu *rvu, struct msg_req *req,
 		rsp->schq_nix1[NIX_TXSCH_LVL_TL2] = 1;
 	} else {
 		nix_hw = get_nix_hw(hw, BLKADDR_NIX0);
+		if (!nix_hw)
+			goto err;
+
 		curlfs = rvu_txsch_count_rsrc(rvu, NIX_TXSCH_LVL_SMQ, pcifunc,
 					      RVU_PFVF_PF_SHIFT, nix_hw);
 		rsp->schq[NIX_TXSCH_LVL_SMQ] =
@@ -312,6 +315,9 @@ int rvu_mbox_handler_free_rsrc_cnt(struct rvu *rvu, struct msg_req *req,
 		if (!is_block_implemented(rvu->hw, BLKADDR_NIX1))
 			goto out;
 		nix_hw = get_nix_hw(hw, BLKADDR_NIX1);
+		if (!nix_hw)
+			goto err;
+
 		txsch = &nix_hw->txsch[NIX_TXSCH_LVL_SMQ];
 		rsp->schq_nix1[NIX_TXSCH_LVL_SMQ] =
 				rvu_rsrc_free_count(&txsch->schq);
@@ -332,6 +338,7 @@ int rvu_mbox_handler_free_rsrc_cnt(struct rvu *rvu, struct msg_req *req,
 	rsp->schq_nix1[NIX_TXSCH_LVL_TL1] = 1;
 out:
 	rsp->schq[NIX_TXSCH_LVL_TL1] = 1;
+err:
 	mutex_unlock(&rvu->rsrc_lock);
 
 	return 0;
@@ -768,9 +775,12 @@ int rvu_policy_init(struct rvu *rvu)
 	struct nix_hw *nix_hw = get_nix_hw(rvu->hw, BLKADDR_NIX0);
 	struct pci_dev *pdev = rvu->pdev;
 	struct rvu_hwinfo *hw = rvu->hw;
-	int err, i = 0;
+	int err = -EINVAL, i = 0;
 	u32 max = 0;
 
+	if (!nix_hw)
+		goto error;
+
 	max = hw->block[BLKADDR_SSO].lf.max;
 	rvu->pf_limits.sso = quotas_alloc(rvu->hw->total_pfs, max, max,
 					  0, &rvu->rsrc_lock, &pf_limit_ops);
diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
index cd62e2c6ac3e..ba5aceb53117 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
@@ -2195,7 +2195,7 @@ int otx2_do_set_vf_vlan(struct otx2_nic *pf, int vf, u16 vlan, u8 qos,
 	vtag_req->vtag_size = VTAGSIZE_T4;
 	vtag_req->cfg_type = 0; /* tx vlan cfg */
 	vtag_req->tx.cfg_vtag0 = 1;
-	vtag_req->tx.vtag0 = (ntohs(proto) << 16) | vlan;
+	vtag_req->tx.vtag0 = (((u64)ntohs(proto)) << 16) | vlan;
 
 	err = otx2_sync_mbox_msg(&pf->mbox);
 	if (err)
-- 
2.31.1

