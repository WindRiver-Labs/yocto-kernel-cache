From e4aa4da91734aded38fd559a6f5676190ec2abf8 Mon Sep 17 00:00:00 2001
From: Ovidiu Panait <ovidiu.panait@windriver.com>
Date: Tue, 1 Feb 2022 17:00:26 +0200
Subject: [PATCH 4/5] Revert "dma-buf: make map_atomic and map function
 pointers optional"

This reverts commit a7a64a818c60256340f7834f167d08f50af5df6c.

Revert CVE-2021-44733 patchset, as it introduced the following build errors on
nxp-imx6/7/8:

work-shared/nxp-imx8/kernel-source/drivers/mxc/gpu-viv/hal/kernel/gc_hal_kernel_video_memory.c:2908:6:
error: 'struct dma_buf_ops' has no member named 'map_atomic'
|      .map_atomic = _dmabuf_kmap,
|       ^~~~~~~~~~

Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
---
 drivers/dma-buf/dma-buf.c | 4 ----
 include/linux/dma-buf.h   | 4 ++--
 2 files changed, 2 insertions(+), 6 deletions(-)

diff --git a/drivers/dma-buf/dma-buf.c b/drivers/dma-buf/dma-buf.c
index 4c45e31258f0..d78d5fc173dc 100644
--- a/drivers/dma-buf/dma-buf.c
+++ b/drivers/dma-buf/dma-buf.c
@@ -872,8 +872,6 @@ void *dma_buf_kmap_atomic(struct dma_buf *dmabuf, unsigned long page_num)
 {
 	WARN_ON(!dmabuf);
 
-	if (!dmabuf->ops->map_atomic)
-		return NULL;
 	return dmabuf->ops->map_atomic(dmabuf, page_num);
 }
 EXPORT_SYMBOL_GPL(dma_buf_kmap_atomic);
@@ -909,8 +907,6 @@ void *dma_buf_kmap(struct dma_buf *dmabuf, unsigned long page_num)
 {
 	WARN_ON(!dmabuf);
 
-	if (!dmabuf->ops->map)
-		return NULL;
 	return dmabuf->ops->map(dmabuf, page_num);
 }
 EXPORT_SYMBOL_GPL(dma_buf_kmap);
diff --git a/include/linux/dma-buf.h b/include/linux/dma-buf.h
index 88917fa796e4..085db2fee2d7 100644
--- a/include/linux/dma-buf.h
+++ b/include/linux/dma-buf.h
@@ -39,12 +39,12 @@ struct dma_buf_attachment;
 
 /**
  * struct dma_buf_ops - operations possible on struct dma_buf
- * @map_atomic: [optional] maps a page from the buffer into kernel address
+ * @map_atomic: maps a page from the buffer into kernel address
  *		space, users may not block until the subsequent unmap call.
  *		This callback must not sleep.
  * @unmap_atomic: [optional] unmaps a atomically mapped page from the buffer.
  *		  This Callback must not sleep.
- * @map: [optional] maps a page from the buffer into kernel address space.
+ * @map: maps a page from the buffer into kernel address space.
  * @unmap: [optional] unmaps a page from the buffer.
  * @vmap: [optional] creates a virtual mapping for the buffer into kernel
  *	  address space. Same restrictions as for vmap and friends apply.
-- 
2.34.1

