From e3f1bb4f298666ef55a30d7c8387c25ad2ada9ce Mon Sep 17 00:00:00 2001
From: Shijith Thotton <sthotton@marvell.com>
Date: Tue, 10 Nov 2020 00:31:52 +0530
Subject: [PATCH 0930/1921] octeontx2-af: fixes for SSO FLR

Removed platform specific check in SSO FLR by making use of prefetch
present bit of SSO_AF_CONST1.

Fixed a bug in FLR code, where group LF number was used instead of
workslot number.

Fixes: c32da959998a ("octeontx2-af: enhance SSO FLR for CN10K")

Change-Id: If5d065221d4c552222443d90ebd24229227d0c00
Signed-off-by: Shijith Thotton <sthotton@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/39767
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Jerin Jacob Kollanukkaran <jerinj@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/rvu_reg.h |  3 ++-
 .../net/ethernet/marvell/octeontx2/af/rvu_sso.c | 17 +++++++++++------
 2 files changed, 13 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h
index ecd19ddce473..65963a6df6c8 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h
@@ -520,7 +520,8 @@
 #define SSO_AF_GRPDIS_DIGESTX(a)	(0x900600 | (a) << 3)
 
 #define SSO_AF_CONST1_NO_NSCHED		BIT_ULL(34)
-#define SSO_AF_CONST1_LSW		BIT_ULL(36)
+#define SSO_AF_CONST1_LSW_PRESENT	BIT_ULL(36)
+#define SSO_AF_CONST1_PRF_PRESENT	BIT_ULL(37)
 #define SSO_AF_IAQ_FREE_CNT_MASK	0x3FFFull
 #define SSO_AF_IAQ_RSVD_FREE_MASK	0x3FFFull
 #define SSO_AF_IAQ_RSVD_FREE_SHIFT	16
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_sso.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_sso.c
index 156f9b5720ee..af074937975c 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_sso.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_sso.c
@@ -319,9 +319,9 @@ int rvu_sso_lf_teardown(struct rvu *rvu, u16 pcifunc, int lf, int slot)
 
 	/* Read hardware capabilities */
 	reg = rvu_read64(rvu, blkaddr, SSO_AF_CONST1);
-	has_lsw = reg & SSO_AF_CONST1_LSW;
+	has_lsw = reg & SSO_AF_CONST1_LSW_PRESENT;
 	has_nsched = !(reg & SSO_AF_CONST1_NO_NSCHED);
-	has_prefetch = is_rvu_otx2(rvu) ? 0 : 1;
+	has_prefetch = reg & SSO_AF_CONST1_PRF_PRESENT;
 
 	/* Enable BAR2 ALIAS for this pcifunc. */
 	reg = BIT_ULL(16) | pcifunc;
@@ -359,7 +359,7 @@ int rvu_sso_lf_teardown(struct rvu *rvu, u16 pcifunc, int lf, int slot)
 		    SSOW_LF_GWS_INT_MASK);
 
 	if (has_lsw)
-		rvu_write64(rvu, blkaddr, SSO_AF_HWSX_LSW_CFG(lf), 0x0);
+		rvu_write64(rvu, blkaddr, SSO_AF_HWSX_LSW_CFG(ssow_lf), 0x0);
 
 	/* Prepare WS for GW operations. */
 	rvu_poll_reg(rvu, ssow_blkaddr, SSOW_AF_BAR2_ALIASX(0, SSOW_LF_GWS_TAG),
@@ -382,7 +382,7 @@ int rvu_sso_lf_teardown(struct rvu *rvu, u16 pcifunc, int lf, int slot)
 		    SSOW_LF_GWS_MAX_NW_TIM);
 
 	if (has_prefetch)
-		rvu_ssow_clean_prefetch(rvu, slot);
+		rvu_ssow_clean_prefetch(rvu, 0);
 
 	/* Disable add work. */
 	rvu_write64(rvu, blkaddr, SSO_AF_BAR2_ALIASX(slot, SSO_LF_GGRP_QCTL),
@@ -584,8 +584,8 @@ int rvu_sso_lf_teardown(struct rvu *rvu, u16 pcifunc, int lf, int slot)
 int rvu_ssow_lf_teardown(struct rvu *rvu, u16 pcifunc, int lf, int slot)
 {
 	struct sso_rsrc *sso = &rvu->hw->sso;
+	bool has_prefetch, has_lsw;
 	int blkaddr, ssow_blkaddr;
-	bool has_prefetch;
 	u64 reg, grpmsk;
 
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_SSO, 0);
@@ -597,7 +597,9 @@ int rvu_ssow_lf_teardown(struct rvu *rvu, u16 pcifunc, int lf, int slot)
 		return SSOW_AF_ERR_LF_INVALID;
 
 	/* Read hardware capabilities */
-	has_prefetch = is_rvu_otx2(rvu) ? 0 : 1;
+	reg = rvu_read64(rvu, blkaddr, SSO_AF_CONST1);
+	has_lsw = reg & SSO_AF_CONST1_LSW_PRESENT;
+	has_prefetch = reg & SSO_AF_CONST1_PRF_PRESENT;
 
 	/* Enable BAR2 alias access. */
 	reg = BIT_ULL(16) | pcifunc;
@@ -611,6 +613,9 @@ int rvu_ssow_lf_teardown(struct rvu *rvu, u16 pcifunc, int lf, int slot)
 		    SSOW_AF_BAR2_ALIASX(0, SSOW_LF_GWS_INT),
 		    SSOW_LF_GWS_INT_MASK);
 
+	if (has_lsw)
+		rvu_write64(rvu, blkaddr, SSO_AF_HWSX_LSW_CFG(lf), 0x0);
+
 	/* HRM 14.13.4 (3) */
 	/* Wait till waitw/desched completes. */
 	rvu_poll_reg(rvu, ssow_blkaddr,
-- 
2.31.1

