From f62519385979a86fde790078ce70bf8972fbddec Mon Sep 17 00:00:00 2001
From: Sujeet Baranwal <sbaranwal@marvell.com>
Date: Wed, 27 Nov 2019 14:42:02 -0800
Subject: [PATCH 0853/1921] proc: Alter ways of mac address parsing

Mac address retrieval and publishing now uses an alternative
implementation. Apart from that, the code is made conditionally
compiled as this may not be needed by all.

Change-Id: Ie048abf8eef852bf6d4ee8b6a94d98cdbdcaf337
Signed-off-by: Sujeet Baranwal <sbaranwal@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/19448
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/32744
Reviewed-by: Chandrakala Chavva <cchavva@marvell.com>
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/soc/marvell/Kconfig         |  7 +++
 drivers/soc/marvell/Makefile        |  2 +-
 drivers/soc/marvell/octeontx_info.c | 72 +++++++++++------------------
 3 files changed, 36 insertions(+), 45 deletions(-)

diff --git a/drivers/soc/marvell/Kconfig b/drivers/soc/marvell/Kconfig
index 672331c81a2a..427698a2a0ec 100644
--- a/drivers/soc/marvell/Kconfig
+++ b/drivers/soc/marvell/Kconfig
@@ -101,4 +101,11 @@ config OCTEONTX2_LLC
 	  This driver offers cache management interface for
 	  Marvell's OcteonTX2 LLC cache Lock and Unlock operations.
 
+config OCTEONTX_INFO
+       tristate "OcteonTX Info driver"
+	depends on PROC_FS
+	help
+	provides procfs interface to board information like board name, board revision
+	mac addresses, board serial number and more. These are boards housing Marvell
+	OcteonTX family chipsets.
 endmenu
diff --git a/drivers/soc/marvell/Makefile b/drivers/soc/marvell/Makefile
index 135212025d5f..68ff755cd398 100644
--- a/drivers/soc/marvell/Makefile
+++ b/drivers/soc/marvell/Makefile
@@ -4,4 +4,4 @@ obj-y		+= octeontx2-rm/
 obj-y		+= octeontx2-dpi/
 obj-y		+= octeontx2-sdp/
 obj-y		+= octeontx2-llc/
-obj-y		+= octeontx_info.o
+obj-$(CONFIG_OCTEONTX_INFO) += octeontx_info.o
diff --git a/drivers/soc/marvell/octeontx_info.c b/drivers/soc/marvell/octeontx_info.c
index 33b3926a3eb3..4a40efe58e65 100644
--- a/drivers/soc/marvell/octeontx_info.c
+++ b/drivers/soc/marvell/octeontx_info.c
@@ -13,58 +13,41 @@
 #include <linux/seq_file.h>
 #include <linux/of.h>
 
-#define MAC_ADDR_STR_LEN 18
 #define OCTTX_NODE "octeontx_brd"
 
+struct octeontx_info_mac_addr {
+	union {
+		u64 num;
+		struct {
+		u8 pad[2];
+			u8 bytes[6];
+		} s;
+	};
+};
+
 struct octtx_brd_info {
 	const char *board_revision;
 	const char *board_serial;
 	const char *board_model;
-	char board_mac[18];
 	int  dev_tree_parsed;
+	struct octeontx_info_mac_addr mac_addr;
 };
 
 static struct proc_dir_entry *ent;
 static struct octtx_brd_info brd;
-
 static char null_string[5] = "NULL";
-static char expansion[MAC_ADDR_STR_LEN] = "00:00:00:00:00:00";
-
-static void format_ethaddr(const char *macPtr, char *out)
-{
-	int r = 0, w = 0, len;
-
-	/* Ignore 0x in the beginning */
-	if (!strncmp(macPtr, "0x", 2))
-		macPtr += 2;
-
-	len = strlen(macPtr);
-
-	while ((len - r) >= 2) {
-		expansion[16 - w] = macPtr[len - 1 - r];
-		expansion[16 - w - 1] = macPtr[len - 1 - r - 1];
-		w += 3;
-		r += 2;
-	}
-
-	/* if any char still left */
-	if ((len - r) == 1)
-		expansion[16 - w] = macPtr[len - 1 - r];
-
-	memcpy(out, expansion, MAC_ADDR_STR_LEN);
-}
 
 static int oct_brd_proc_show(struct seq_file *seq, void *v)
 {
 	if (!brd.dev_tree_parsed) {
 		seq_puts(seq, "No board info available!\n");
-		return 0;
+		return -EPERM;
 	}
 
 	seq_printf(seq, "board_model: %s\n", brd.board_model);
 	seq_printf(seq, "board_revision: %s\n", brd.board_revision);
 	seq_printf(seq, "board_serial_number: %s\n", brd.board_serial);
-	seq_printf(seq, "mac_addr_base: %s\n", brd.board_mac);
+	seq_printf(seq, "mac_addr_base: %pM\n", brd.mac_addr.s.bytes);
 
 	return  0;
 }
@@ -74,7 +57,6 @@ static int oct_brd_proc_open(struct inode *inode, struct file *file)
 	return single_open(file, oct_brd_proc_show, NULL);
 }
 
-#ifdef CONFIG_PROC_FS
 static const struct file_operations oct_brd_fops = {
 	.owner = THIS_MODULE,
 	.open = oct_brd_proc_open,
@@ -82,31 +64,31 @@ static const struct file_operations oct_brd_fops = {
 	.llseek = seq_lseek,
 	.release = single_release,
 };
-#endif
 
 static int octtx_info_init(void)
 {
 	int ret;
 	const char *board_mac;
 	struct device_node *np = NULL;
+	struct octeontx_info_mac_addr mac_addr;
 
 	if (!brd.dev_tree_parsed) {
 		np = of_find_node_by_name(NULL, OCTTX_NODE);
 		if (!np) {
 			pr_err("No board info available!\n");
-			return 0;
+			return -ENODEV;
 		}
 		ret = of_property_read_string(np, "BOARD-MODEL",
 						&brd.board_model);
 		if (ret) {
-			pr_err("Board model not available\n");
+			pr_warn("Board model not available\n");
 			/* Default name is "NULL" */
 			brd.board_model = null_string;
 		}
 		ret = of_property_read_string(np, "BOARD-REVISION",
 						&brd.board_revision);
 		if (ret) {
-			pr_err("Board revision not available\n");
+			pr_warn("Board revision not available\n");
 			/* Default name is "NULL" */
 			brd.board_revision = null_string;
 
@@ -114,26 +96,28 @@ static int octtx_info_init(void)
 		ret = of_property_read_string(np, "BOARD-SERIAL",
 						&brd.board_serial);
 		if (ret) {
-			pr_err("Board serial not available\n");
+			pr_warn("Board serial not available\n");
 			/* Default name is "NULL" */
 			brd.board_serial = null_string;
 		}
 		ret = of_property_read_string(np, "BOARD-MAC-ADDRESS",
 								&board_mac);
 		if (ret) {
-			pr_err("Board mac address not available\n");
-			/* Default name is "NULL" */
-			strncpy(brd.board_mac, expansion,
-						sizeof(brd.board_mac));
-		} else
-			format_ethaddr(board_mac, brd.board_mac);
+			pr_warn("Board mac address not available\n");
+			brd.mac_addr.num = 0;
+		} else {
+			if (!kstrtoull(board_mac, 16, &mac_addr.num))
+				brd.mac_addr.num = be64_to_cpu(mac_addr.num);
+		}
 
 		brd.dev_tree_parsed = 1;
 	}
 
-	ent = proc_create("octtx_info", 0660, NULL, &oct_brd_fops);
-	if (ent == NULL)
+	ent = proc_create("octtx_info", 0444, NULL, &oct_brd_fops);
+	if (!ent) {
+		pr_err("proc entry creation for octtx info failed\n");
 		return -ENODEV;
+	}
 
 	return 0;
 }
-- 
2.31.1

