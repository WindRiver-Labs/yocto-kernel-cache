From eb833bff1ac075f003a2af50dcc66f22117f1cec Mon Sep 17 00:00:00 2001
From: Jayanthi Annadurai <jannadurai@marvell.com>
Date: Wed, 5 May 2021 23:25:07 -0700
Subject: [PATCH 1532/1921] drivers: sdhci: CN10K ASIM workaround

Cadence SD6 controller supports 8/16/32 bit writes. But, the read
is only 32bits. Workaround asim limitations by accessing 32bits for
both read and write.

Change-Id: If7bf5504832543476725dea711b6aa7de2b52c0d
Signed-off-by: Jayanthi Annadurai <jannadurai@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/51814
Reviewed-by: Chandrakala Chavva <cchavva@marvell.com>
Tested-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/mmc/host/Kconfig         | 11 +++++++++++
 drivers/mmc/host/sdhci-cadence.c |  8 +++-----
 drivers/mmc/host/sdhci.c         | 23 +++++++++++------------
 3 files changed, 25 insertions(+), 17 deletions(-)

diff --git a/drivers/mmc/host/Kconfig b/drivers/mmc/host/Kconfig
index 542084f657c0..bfb74278e5b9 100644
--- a/drivers/mmc/host/Kconfig
+++ b/drivers/mmc/host/Kconfig
@@ -211,6 +211,17 @@ config MMC_SDHCI_CADENCE
 
 	  If unsure, say N.
 
+config MMC_SDHCI_CADENCE_WORKAROUND
+	bool "Unaligned access to Cadence SD host controller"
+	depends on MMC_SDHCI_CADENCE
+	help
+	  This selects workaround for accessing cadence SD host controller
+	  in CN10K ASIM Platform.
+
+	  If CN10K asim, Say Y.
+
+	  If unsure, say N.
+
 config MMC_SDHCI_CNS3XXX
 	tristate "SDHCI support on the Cavium Networks CNS3xxx SoC"
 	depends on ARCH_CNS3XXX
diff --git a/drivers/mmc/host/sdhci-cadence.c b/drivers/mmc/host/sdhci-cadence.c
index 22bea7fa872c..ef8199088a76 100644
--- a/drivers/mmc/host/sdhci-cadence.c
+++ b/drivers/mmc/host/sdhci-cadence.c
@@ -15,8 +15,6 @@
 
 #include "sdhci-pltfm.h"
 
-#define CN10K_ASIM	1
-
 #define SDHCI_CDNS_HRS04			0x10		/* PHY access port */
 /* SD 4.0 Controller HRS - Host Register Set (specific to Cadence) */
 #define SDHCI_CDNS_SD4_HRS04_ACK		BIT(26)
@@ -429,7 +427,7 @@ static u16 sdhci_cdns_sd6_readw(struct sdhci_host *host, int reg)
 
 static void sdhci_cdns_sd6_writew(struct sdhci_host *host, u16 val, int reg)
 {
-#ifdef CN10K_ASIM
+#ifdef CONFIG_MMC_SDHCI_CADENCE_WORKAROUND
 
 	u32 regval, regoff;
 
@@ -471,7 +469,7 @@ static u8 sdhci_cdns_sd6_readb(struct sdhci_host *host, int reg)
 
 static void sdhci_cdns_sd6_writeb(struct sdhci_host *host, u8 val, int reg)
 {
-#ifdef CN10K_ASIM
+#ifdef CONFIG_MMC_SDHCI_CADENCE_WORKAROUND
 
 	u32 regval, regoff;
 
@@ -1292,7 +1290,7 @@ static void sdhci_cdns_sd6_set_clock(struct sdhci_host *host,
 	struct sdhci_cdns_priv *priv = sdhci_cdns_priv(host);
 	struct sdhci_cdns_sd6_phy *phy = priv->phy;
 
-#ifdef CN10K_ASIM
+#ifdef CONFIG_MMC_SDHCI_CADENCE_WORKAROUND
 	return;
 #endif
 
diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
index faab0f7b3c0d..b13c497b047b 100644
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -41,10 +41,9 @@
 #define SDHCI_DUMP(f, x...) \
 	pr_err("%s: " DRIVER_NAME ": " f, mmc_hostname(host->mmc), ## x)
 
-#define CN10K_ASIM_WORKAROUND	1
 #define MAX_TUNING_LOOP 40
 
-#ifdef CN10K_ASIM_WORKAROUND
+#ifdef CONFIG_MMC_SDHCI_CADENCE_WORKAROUND
 static int trfr_mode;
 #endif
 
@@ -1195,7 +1194,7 @@ static inline void sdhci_auto_cmd_select(struct sdhci_host *host,
 		*mode |= SDHCI_TRNS_AUTO_CMD23;
 }
 
-#ifdef CN10K_ASIM_WORKAROUND
+#ifdef CONFIG_MMC_SDHCI_CADENCE_WORKAROUND
 static u16 sdhci_set_transfer_mode(struct sdhci_host *host,
 	struct mmc_command *cmd)
 #else
@@ -1211,7 +1210,7 @@ static void sdhci_set_transfer_mode(struct sdhci_host *host,
 			SDHCI_QUIRK2_CLEAR_TRANSFERMODE_REG_BEFORE_CMD) {
 			/* must not clear SDHCI_TRANSFER_MODE when tuning */
 			if (cmd->opcode != MMC_SEND_TUNING_BLOCK_HS200)
-#ifdef CN10K_ASIM_WORKAROUND
+#ifdef CONFIG_MMC_SDHCI_CADENCE_WORKAROUND
 				mode = 0;
 #else
 				sdhci_writew(host, 0x0, SDHCI_TRANSFER_MODE);
@@ -1219,7 +1218,7 @@ static void sdhci_set_transfer_mode(struct sdhci_host *host,
 		} else {
 		/* clear Auto CMD settings for no data CMDs */
 			mode = sdhci_readw(host, SDHCI_TRANSFER_MODE);
-#ifdef CN10K_ASIM_WORKAROUND
+#ifdef CONFIG_MMC_SDHCI_CADENCE_WORKAROUND
 			mode = 0;
 #else
 			mode = (mode & ~(SDHCI_TRNS_AUTO_CMD12 |
@@ -1228,7 +1227,7 @@ static void sdhci_set_transfer_mode(struct sdhci_host *host,
 				SDHCI_TRNS_AUTO_CMD23), SDHCI_TRANSFER_MODE);
 #endif
 		}
-#ifdef CN10K_ASIM_WORKAROUND
+#ifdef CONFIG_MMC_SDHCI_CADENCE_WORKAROUND
 		return mode;
 #else
 		return;
@@ -1252,7 +1251,7 @@ static void sdhci_set_transfer_mode(struct sdhci_host *host,
 	if (host->flags & SDHCI_REQ_USE_DMA)
 		mode |= SDHCI_TRNS_DMA;
 
-#ifdef CN10K_ASIM_WORKAROUND
+#ifdef CONFIG_MMC_SDHCI_CADENCE_WORKAROUND
 	return mode;
 #else
 	sdhci_writew(host, mode, SDHCI_TRANSFER_MODE);
@@ -1377,7 +1376,7 @@ void sdhci_send_command(struct sdhci_host *host, struct mmc_command *cmd)
 	int flags;
 	u32 mask;
 	unsigned long timeout;
-#ifdef CN10K_ASIM_WORKAROUND
+#ifdef CONFIG_MMC_SDHCI_CADENCE_WORKAROUND
 	u32 mode, cmdreg32;
 #endif
 
@@ -1425,7 +1424,7 @@ void sdhci_send_command(struct sdhci_host *host, struct mmc_command *cmd)
 
 	sdhci_writel(host, cmd->arg, SDHCI_ARGUMENT);
 
-#ifdef CN10K_ASIM_WORKAROUND
+#ifdef CONFIG_MMC_SDHCI_CADENCE_WORKAROUND
 	mode = sdhci_set_transfer_mode(host, cmd);
 #else
 	sdhci_set_transfer_mode(host, cmd);
@@ -1468,7 +1467,7 @@ void sdhci_send_command(struct sdhci_host *host, struct mmc_command *cmd)
 
 	sdhci_mod_timer(host, cmd->mrq, timeout);
 
-#ifdef CN10K_ASIM_WORKAROUND
+#ifdef CONFIG_MMC_SDHCI_CADENCE_WORKAROUND
 	if (trfr_mode) {
 		cmdreg32 = SDHCI_TRNS_READ | mode | (SDHCI_MAKE_CMD(cmd->opcode, flags) << 16);
 		trfr_mode = 0;
@@ -2407,7 +2406,7 @@ void sdhci_send_tuning(struct sdhci_host *host, u32 opcode)
 	 * This also takes care of setting DMA Enable and Multi Block
 	 * Select in the same register to 0.
 	 */
-#ifndef CN10K_ASIM_WORKAROUND
+#ifndef CONFIG_MMC_SDHCI_CADENCE_WORKAROUND
 	sdhci_writew(host, SDHCI_TRNS_READ, SDHCI_TRANSFER_MODE);
 
 #else
@@ -2434,7 +2433,7 @@ static int __sdhci_execute_tuning(struct sdhci_host *host, u32 opcode)
 {
 	int i;
 
-#ifndef CN10K_ASIM_WORKAROUND
+#ifndef CONFIG_MMC_SDHCI_CADENCE_WORKAROUND
 	return 0;
 #endif
 	/*
-- 
2.31.1

