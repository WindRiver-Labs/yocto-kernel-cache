From 61d985ba398db83c56950b3299b693cedf3af1cb Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Wed, 2 Jul 2014 16:11:14 -0700
Subject: [PATCH 0103/1851] sound: soc: xilinx: Add ZynqMP DP subsystem audio
 drivers

commit 1f77bfd12f685e6a4165b8dbe6b40c9c51f527e2 from
https://github.com/Xilinx/linux-xlnx.git

The DisplayPort subsystem of Xilinx ZynqMP SOC supports audio through,
DPDMA - Audio buffer manager - Audio blender - DP. The DPDMA driver
is implemented based on DMA engine API, and the audio driver is based
on snd dmaengine pcm helpers.

The DPDMA has the constraint that each buffer size should be aligned
with 256 bytes. Enforce this limitation by adding a step size
constraint for period bytes.

Signed-off-by: Hyun Kwon <hyun.kwon@xilinx.com>
Tested-by: Damoder Mogilipaka <damoderm@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 sound/soc/xilinx/Kconfig           |   7 ++
 sound/soc/xilinx/Makefile          |   3 +
 sound/soc/xilinx/xilinx-dp-card.c  | 122 ++++++++++++++++++++
 sound/soc/xilinx/xilinx-dp-codec.c | 178 +++++++++++++++++++++++++++++
 sound/soc/xilinx/xilinx-dp-pcm.c   |  81 +++++++++++++
 5 files changed, 391 insertions(+)
 create mode 100644 sound/soc/xilinx/xilinx-dp-card.c
 create mode 100644 sound/soc/xilinx/xilinx-dp-codec.c
 create mode 100644 sound/soc/xilinx/xilinx-dp-pcm.c

diff --git a/sound/soc/xilinx/Kconfig b/sound/soc/xilinx/Kconfig
index 69973179ef15..20c8bff89d23 100644
--- a/sound/soc/xilinx/Kconfig
+++ b/sound/soc/xilinx/Kconfig
@@ -1,4 +1,11 @@
 # SPDX-License-Identifier: GPL-2.0-only
+config SND_SOC_XILINX_DP
+	tristate "Audio support for the the Xilinx DisplayPort"
+	select SND_DMAENGINE_PCM
+	select SND_SOC_GENERIC_DMAENGINE_PCM
+	help
+	  Audio support the for Xilinx DisplayPort.
+
 config SND_SOC_XILINX_I2S
 	tristate "Audio support for the Xilinx I2S"
 	help
diff --git a/sound/soc/xilinx/Makefile b/sound/soc/xilinx/Makefile
index be7652ce7c13..339eb1f3dd9d 100644
--- a/sound/soc/xilinx/Makefile
+++ b/sound/soc/xilinx/Makefile
@@ -1,4 +1,7 @@
 # SPDX-License-Identifier: GPL-2.0-only
+obj-$(CONFIG_SND_SOC_XILINX_DP) += xilinx-dp-pcm.o
+obj-$(CONFIG_SND_SOC_XILINX_DP) += xilinx-dp-codec.o
+obj-$(CONFIG_SND_SOC_XILINX_DP) += xilinx-dp-card.o
 snd-soc-xlnx-i2s-objs      := xlnx_i2s.o
 obj-$(CONFIG_SND_SOC_XILINX_I2S) += snd-soc-xlnx-i2s.o
 snd-soc-xlnx-formatter-pcm-objs := xlnx_formatter_pcm.o
diff --git a/sound/soc/xilinx/xilinx-dp-card.c b/sound/soc/xilinx/xilinx-dp-card.c
new file mode 100644
index 000000000000..2f1a22623829
--- /dev/null
+++ b/sound/soc/xilinx/xilinx-dp-card.c
@@ -0,0 +1,122 @@
+/*
+ * Xilinx DisplayPort SoC Sound Card support
+ *
+ *  Copyright (C) 2015 Xilinx, Inc.
+ *
+ *  Author: Hyun Woo Kwon <hyunk@xilinx.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+
+#include <sound/soc.h>
+
+static int xilinx_dp_startup(struct snd_pcm_substream *substream)
+{
+	struct snd_pcm_runtime *runtime = substream->runtime;
+
+	snd_pcm_hw_constraint_step(runtime, 0,
+				   SNDRV_PCM_HW_PARAM_PERIOD_BYTES, 256);
+	return 0;
+}
+
+static const struct snd_soc_ops xilinx_dp_ops = {
+	.startup	= xilinx_dp_startup,
+};
+
+SND_SOC_DAILINK_DEFS(xilinx_dp,
+		DAILINK_COMP_ARRAY(COMP_CPU("xilinx-dp-snd-codec-dai")),
+		DAILINK_COMP_ARRAY(COMP_CODEC(NULL, "xilinx-dp-snd-codec-dai")),
+		DAILINK_COMP_ARRAY(COMP_PLATFORM(NULL)));
+
+static struct snd_soc_dai_link xilinx_dp_dai_links[] = {
+	{
+		.name		= "xilinx-dp0",
+		SND_SOC_DAILINK_REG(xilinx_dp),
+		.ops		= &xilinx_dp_ops,
+	},
+	{
+		.name		= "xilinx-dp1",
+		SND_SOC_DAILINK_REG(xilinx_dp),
+		.ops		= &xilinx_dp_ops,
+	},
+
+};
+
+static struct snd_soc_card xilinx_dp_card = {
+	.name		= "DisplayPort monitor",
+	.owner		= THIS_MODULE,
+	.dai_link	= xilinx_dp_dai_links,
+	.num_links	= 2,
+};
+
+static int xilinx_dp_probe(struct platform_device *pdev)
+{
+	struct snd_soc_card *card = &xilinx_dp_card;
+	struct device_node *node = pdev->dev.of_node;
+	struct device_node *codec, *pcm;
+	int ret;
+
+	card->dev = &pdev->dev;
+
+	codec = of_parse_phandle(node, "xlnx,dp-snd-codec", 0);
+	if (!codec)
+		return -ENODEV;
+
+	pcm = of_parse_phandle(node, "xlnx,dp-snd-pcm", 0);
+	if (!pcm)
+		return -ENODEV;
+	xilinx_dp_dai_links[0].platforms->of_node = pcm;
+	xilinx_dp_dai_links[0].cpus->of_node = codec;
+	xilinx_dp_dai_links[0].codecs->of_node = codec;
+
+	pcm = of_parse_phandle(node, "xlnx,dp-snd-pcm", 1);
+	if (!pcm)
+		return -ENODEV;
+	xilinx_dp_dai_links[1].platforms->of_node = pcm;
+	xilinx_dp_dai_links[1].cpus->of_node = codec;
+	xilinx_dp_dai_links[1].codecs->of_node = codec;
+
+	ret = devm_snd_soc_register_card(&pdev->dev, card);
+	if (ret)
+		return ret;
+
+	dev_info(&pdev->dev, "Xilinx DisplayPort Sound Card probed\n");
+
+	return 0;
+}
+
+static int xilinx_dp_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static const struct of_device_id xilinx_dp_of_match[] = {
+	{ .compatible = "xlnx,dp-snd-card", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, xilinx_dp_of_match);
+
+static struct platform_driver xilinx_dp_aud_driver = {
+	.driver	= {
+		.name		= "xilinx-dp-snd-card",
+		.of_match_table	= xilinx_dp_of_match,
+		.pm		= &snd_soc_pm_ops,
+	},
+	.probe	= xilinx_dp_probe,
+	.remove	= xilinx_dp_remove,
+};
+module_platform_driver(xilinx_dp_aud_driver);
+
+MODULE_DESCRIPTION("Xilinx DisplayPort Sound Card module");
+MODULE_LICENSE("GPL v2");
diff --git a/sound/soc/xilinx/xilinx-dp-codec.c b/sound/soc/xilinx/xilinx-dp-codec.c
new file mode 100644
index 000000000000..af6e6b08c415
--- /dev/null
+++ b/sound/soc/xilinx/xilinx-dp-codec.c
@@ -0,0 +1,178 @@
+/*
+ * Xilinx DisplayPort Sound Codec support
+ *
+ *  Copyright (C) 2015 Xilinx, Inc.
+ *
+ *  Author: Hyun Woo Kwon <hyunk@xilinx.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/clk.h>
+#include <linux/device.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+
+#include <sound/soc.h>
+
+/**
+ * struct xilinx_dp_codec - DisplayPort codec
+ * @aud_clk: audio clock
+ */
+struct xilinx_dp_codec {
+	struct clk *aud_clk;
+};
+
+struct xilinx_dp_codec_fmt {
+	unsigned long rate;
+	unsigned int snd_rate;
+};
+
+static struct snd_soc_dai_driver xilinx_dp_codec_dai = {
+	.name		= "xilinx-dp-snd-codec-dai",
+	.playback	= {
+		.channels_min	= 2,
+		.channels_max	= 2,
+		.rates		= SNDRV_PCM_RATE_44100,
+		.formats	= SNDRV_PCM_FMTBIT_S16_LE,
+	},
+};
+
+static const struct xilinx_dp_codec_fmt rates[] = {
+	{
+		.rate	= 48000 * 512,
+		.snd_rate = SNDRV_PCM_RATE_48000
+	},
+	{
+		.rate	= 44100 * 512,
+		.snd_rate = SNDRV_PCM_RATE_44100
+	}
+};
+
+static const struct snd_soc_component_driver xilinx_dp_component_driver = {
+	.idle_bias_on		= 1,
+	.use_pmdown_time	= 1,
+	.endianness		= 1,
+	.non_legacy_dai_naming	= 1,
+};
+
+static int xilinx_dp_codec_probe(struct platform_device *pdev)
+{
+	struct xilinx_dp_codec *codec;
+	unsigned int i;
+	unsigned long rate;
+	int ret;
+
+	codec = devm_kzalloc(&pdev->dev, sizeof(*codec), GFP_KERNEL);
+	if (!codec)
+		return -ENOMEM;
+
+	codec->aud_clk = devm_clk_get(&pdev->dev, NULL);
+	if (IS_ERR(codec->aud_clk))
+		return PTR_ERR(codec->aud_clk);
+
+	ret = clk_prepare_enable(codec->aud_clk);
+	if (ret) {
+		dev_err(&pdev->dev, "failed to enable the aud_clk\n");
+		return ret;
+	}
+
+	for (i = 0; i < ARRAY_SIZE(rates); i++) {
+		clk_disable_unprepare(codec->aud_clk);
+		ret = clk_set_rate(codec->aud_clk, rates[i].rate);
+		clk_prepare_enable(codec->aud_clk);
+		if (ret)
+			continue;
+
+		rate = clk_get_rate(codec->aud_clk);
+		/* Ignore some offset +- 10 */
+		if (abs(rates[i].rate - rate) < 10) {
+			xilinx_dp_codec_dai.playback.rates = rates[i].snd_rate;
+			break;
+		}
+		ret = -EINVAL;
+	}
+
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to get required clock freq\n");
+		goto error_clk;
+	}
+
+	ret = devm_snd_soc_register_component(&pdev->dev,
+					      &xilinx_dp_component_driver,
+					      &xilinx_dp_codec_dai, 1);
+	if (ret)
+		goto error_clk;
+
+	platform_set_drvdata(pdev, codec);
+
+	dev_info(&pdev->dev, "Xilinx DisplayPort Sound Codec probed\n");
+
+	return 0;
+
+error_clk:
+	clk_disable_unprepare(codec->aud_clk);
+	return ret;
+}
+
+static int xilinx_dp_codec_dev_remove(struct platform_device *pdev)
+{
+	struct xilinx_dp_codec *codec = platform_get_drvdata(pdev);
+
+	clk_disable_unprepare(codec->aud_clk);
+
+	return 0;
+}
+
+static int __maybe_unused xilinx_dp_codec_pm_suspend(struct device *dev)
+{
+	struct xilinx_dp_codec *codec = dev_get_drvdata(dev);
+
+	clk_disable_unprepare(codec->aud_clk);
+
+	return 0;
+}
+
+static int __maybe_unused xilinx_dp_codec_pm_resume(struct device *dev)
+{
+	struct xilinx_dp_codec *codec = dev_get_drvdata(dev);
+	int ret;
+
+	ret = clk_prepare_enable(codec->aud_clk);
+	if (ret)
+		dev_err(dev, "failed to enable the aud_clk\n");
+
+	return ret;
+}
+
+static const struct dev_pm_ops xilinx_dp_codec_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(xilinx_dp_codec_pm_suspend,
+				xilinx_dp_codec_pm_resume)
+};
+
+static const struct of_device_id xilinx_dp_codec_of_match[] = {
+	{ .compatible = "xlnx,dp-snd-codec", },
+	{ /* end of table */ },
+};
+MODULE_DEVICE_TABLE(of, xilinx_dp_codec_of_match);
+
+static struct platform_driver xilinx_dp_codec_driver = {
+	.driver	= {
+		.name		= "xilinx-dp-snd-codec",
+		.of_match_table	= xilinx_dp_codec_of_match,
+		.pm		= &xilinx_dp_codec_pm_ops,
+	},
+	.probe	= xilinx_dp_codec_probe,
+	.remove	= xilinx_dp_codec_dev_remove,
+};
+module_platform_driver(xilinx_dp_codec_driver);
+
+MODULE_DESCRIPTION("Xilinx DisplayPort Sound Codec module");
+MODULE_LICENSE("GPL v2");
diff --git a/sound/soc/xilinx/xilinx-dp-pcm.c b/sound/soc/xilinx/xilinx-dp-pcm.c
new file mode 100644
index 000000000000..4c2cdfb9d613
--- /dev/null
+++ b/sound/soc/xilinx/xilinx-dp-pcm.c
@@ -0,0 +1,81 @@
+/*
+ * Xilinx DisplayPort Sound PCM support
+ *
+ *  Copyright (C) 2015 Xilinx, Inc.
+ *
+ *  Author: Hyun Woo Kwon <hyunk@xilinx.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/device.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+
+#include <sound/dmaengine_pcm.h>
+#include <sound/pcm.h>
+#include <sound/soc.h>
+
+static const struct snd_pcm_hardware xilinx_pcm_hw = {
+	.info			= SNDRV_PCM_INFO_MMAP |
+				  SNDRV_PCM_INFO_MMAP_VALID |
+				  SNDRV_PCM_INFO_INTERLEAVED |
+				  SNDRV_PCM_INFO_PAUSE |
+				  SNDRV_PCM_INFO_RESUME |
+				  SNDRV_PCM_INFO_NO_PERIOD_WAKEUP,
+	.buffer_bytes_max	= 128 * 1024,
+	.period_bytes_min	= 256,
+	.period_bytes_max	= 1024 * 1024,
+	.periods_min		= 2,
+	.periods_max		= 256,
+};
+
+static const struct snd_dmaengine_pcm_config xilinx_dmaengine_pcm_config = {
+	.pcm_hardware = &xilinx_pcm_hw,
+	.prealloc_buffer_size = 64 * 1024,
+};
+
+static int xilinx_dp_pcm_probe(struct platform_device *pdev)
+{
+	int ret;
+
+	ret = devm_snd_dmaengine_pcm_register(&pdev->dev,
+					      &xilinx_dmaengine_pcm_config, 0);
+	if (ret)
+		return ret;
+
+	dev_info(&pdev->dev, "Xilinx DisplayPort Sound PCM probed\n");
+
+	return 0;
+}
+
+static int xilinx_dp_pcm_dev_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static const struct of_device_id xilinx_dp_pcm_of_match[] = {
+	{ .compatible = "xlnx,dp-snd-pcm", },
+	{ /* end of table */ },
+};
+MODULE_DEVICE_TABLE(of, xilinx_dp_pcm_of_match);
+
+static struct platform_driver xilinx_dp_pcm_driver = {
+	.driver	= {
+		.name		= "xilinx-dp-snd-pcm",
+		.of_match_table	= xilinx_dp_pcm_of_match,
+	},
+	.probe	= xilinx_dp_pcm_probe,
+	.remove	= xilinx_dp_pcm_dev_remove,
+};
+module_platform_driver(xilinx_dp_pcm_driver);
+
+MODULE_DESCRIPTION("Xilinx DisplayPort Sound PCM module");
+MODULE_LICENSE("GPL v2");
-- 
2.31.1

