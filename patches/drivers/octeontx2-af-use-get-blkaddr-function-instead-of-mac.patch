From 9523897290dbe6a69f696f10f8c521f03cac30d3 Mon Sep 17 00:00:00 2001
From: Pavan Nikhilesh <pbhagavatula@marvell.com>
Date: Wed, 27 Mar 2019 12:54:45 +0530
Subject: [PATCH 093/767] octeontx2-af: use get blkaddr function instead of
 macro

commit 649b565b8185c1ce0ac0415c5823b1804526a51c from
git@git.assembla.com:cavium/WindRiver.linux.git

Use rvu_get_blkaddr based on BLKTYPE instead of directly using the
BLKADDR for CPT block.
Added error checks for CPT AF error interrupts registration.
crypto_eng_grp is defined as unsigned hence removed unnecessary
comparison and it fixes compilation warnings.

Change-Id: Ic07d63221111aee4ba99c3d4da80e48f230d33dd
Signed-off-by: Pavan Nikhilesh <pbhagavatula@marvell.com>
Signed-off-by: Tomasz Duszynski <tduszynski@marvell.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/rvu.c   |  14 +--
 .../net/ethernet/marvell/octeontx2/af/rvu.h   |   1 +
 .../ethernet/marvell/octeontx2/af/rvu_cpt.c   | 104 ++++++++++++------
 3 files changed, 77 insertions(+), 42 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
index 270242bbf3d8..8b92f22ef367 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
@@ -2177,6 +2177,8 @@ static void rvu_unregister_interrupts(struct rvu *rvu)
 {
 	int irq;
 
+	rvu_cpt_unregister_interrupts(rvu);
+
 	/* Disable the Mbox interrupt */
 	rvu_write64(rvu, BLKADDR_RVUM, RVU_AF_PFAF_MBOX_INT_ENA_W1C,
 		    INTR_MASK(rvu->hw->total_pfs) & ~1ULL);
@@ -2381,8 +2383,12 @@ static int rvu_register_interrupts(struct rvu *rvu)
 		goto fail;
 	}
 	rvu->irq_allocated[offset] = true;
-	return 0;
 
+	ret = rvu_cpt_register_interrupts(rvu);
+	if (ret)
+		goto fail;
+
+	return 0;
 fail:
 	rvu_unregister_interrupts(rvu);
 	return ret;
@@ -2661,12 +2667,6 @@ static int rvu_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	if (err)
 		goto err_flr;
 
-	if (is_block_implemented(rvu->hw, BLKADDR_CPT0)) {
-		err = rvu_cpt_register_interrupts(rvu);
-		if (err)
-			goto err_irq;
-	}
-
 	rvu_setup_rvum_blk_revid(rvu);
 
 	err = rvu_policy_init(rvu);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
index a6e913439f45..650d87bcb6a3 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
@@ -550,6 +550,7 @@ int npc_mcam_verify_channel(struct rvu *rvu, u16 pcifunc, u8 intf, u16 channel);
 /* CPT APIs */
 int rvu_cpt_init(struct rvu *rvu);
 int rvu_cpt_register_interrupts(struct rvu *rvu);
+void rvu_cpt_unregister_interrupts(struct rvu *rvu);
 
 /* TIM APIs */
 int rvu_tim_init(struct rvu *rvu);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
index acaf1ce340c2..5c4dcf3db06a 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
@@ -36,38 +36,53 @@ static irqreturn_t rvu_cpt_af_flr_intr_handler(int irq, void *ptr)
 {
 	struct rvu *rvu = (struct rvu *) ptr;
 	u64 reg0, reg1;
+	int blkaddr;
 
-	reg0 = rvu_read64(rvu, BLKADDR_CPT0, CPT_AF_FLTX_INT(0));
-	reg1 = rvu_read64(rvu, BLKADDR_CPT0, CPT_AF_FLTX_INT(1));
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, 0);
+	if (blkaddr < 0)
+		return IRQ_NONE;
+
+	reg0 = rvu_read64(rvu, blkaddr, CPT_AF_FLTX_INT(0));
+	reg1 = rvu_read64(rvu, blkaddr, CPT_AF_FLTX_INT(1));
 	dev_err(rvu->dev, "Received CPTAF FLT irq : 0x%llx, 0x%llx",
 		reg0, reg1);
 
-	rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_FLTX_INT(0), reg0);
-	rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_FLTX_INT(1), reg1);
+	rvu_write64(rvu, blkaddr, CPT_AF_FLTX_INT(0), reg0);
+	rvu_write64(rvu, blkaddr, CPT_AF_FLTX_INT(1), reg1);
 	return IRQ_HANDLED;
 }
 
 static irqreturn_t rvu_cpt_af_rvu_intr_handler(int irq, void *ptr)
 {
 	struct rvu *rvu = (struct rvu *) ptr;
+	int blkaddr;
 	u64 reg;
 
-	reg = rvu_read64(rvu, BLKADDR_CPT0, CPT_AF_RVU_INT);
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, 0);
+	if (blkaddr < 0)
+		return IRQ_NONE;
+
+	reg = rvu_read64(rvu, blkaddr, CPT_AF_RVU_INT);
 	dev_err(rvu->dev, "Received CPTAF RVU irq : 0x%llx", reg);
 
-	rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_RVU_INT, reg);
+	rvu_write64(rvu, blkaddr, CPT_AF_RVU_INT, reg);
 	return IRQ_HANDLED;
 }
 
 static irqreturn_t rvu_cpt_af_ras_intr_handler(int irq, void *ptr)
 {
 	struct rvu *rvu = (struct rvu *) ptr;
+	int blkaddr;
 	u64 reg;
 
-	reg = rvu_read64(rvu, BLKADDR_CPT0, CPT_AF_RAS_INT);
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, 0);
+	if (blkaddr < 0)
+		return IRQ_NONE;
+
+	reg = rvu_read64(rvu, blkaddr, CPT_AF_RAS_INT);
 	dev_err(rvu->dev, "Received CPTAF RAS irq : 0x%llx", reg);
 
-	rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_RAS_INT, reg);
+	rvu_write64(rvu, blkaddr, CPT_AF_RAS_INT, reg);
 	return IRQ_HANDLED;
 }
 
@@ -90,19 +105,26 @@ static int rvu_cpt_do_register_interrupt(struct rvu *rvu, int irq_offs,
 	return ret;
 }
 
-static void rvu_cpt_unregister_interrupts(struct rvu *rvu)
+void rvu_cpt_unregister_interrupts(struct rvu *rvu)
 {
-	int i, offs;
-	u64 reg;
+	int blkaddr, i, offs;
 
-	reg = rvu_read64(rvu, BLKADDR_CPT0, CPT_PRIV_AF_INT_CFG);
-	offs = reg & 0x7FF;
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, 0);
+	if (blkaddr < 0)
+		return;
+
+	offs = rvu_read64(rvu, blkaddr, CPT_PRIV_AF_INT_CFG) & 0x7FF;
+	if (!offs) {
+		dev_warn(rvu->dev,
+			 "Failed to get CPT_AF_INT vector offsets\n");
+		return;
+	}
 
 	/* Disable all CPT AF interrupts */
 	for (i = 0; i < 2; i++)
-		rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_FLTX_INT_ENA_W1C(i), 0x1);
-	rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_RVU_INT_ENA_W1C, 0x1);
-	rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_RAS_INT_ENA_W1C, 0x1);
+		rvu_write64(rvu, blkaddr, CPT_AF_FLTX_INT_ENA_W1C(i), 0x1);
+	rvu_write64(rvu, blkaddr, CPT_AF_RVU_INT_ENA_W1C, 0x1);
+	rvu_write64(rvu, blkaddr, CPT_AF_RAS_INT_ENA_W1C, 0x1);
 
 	for (i = 0; i < CPT_AF_INT_VEC_CNT; i++)
 		if (rvu->irq_allocated[offs + i]) {
@@ -157,20 +179,29 @@ int rvu_cpt_init(struct rvu *rvu)
 int rvu_cpt_register_interrupts(struct rvu *rvu)
 {
 
-	int i, offs, ret = 0;
-	u64 reg;
+	int i, offs, blkaddr, ret = 0;
+
+	if (!is_block_implemented(rvu->hw, BLKADDR_CPT0))
+		return 0;
 
-	reg = rvu_read64(rvu, BLKADDR_CPT0, CPT_PRIV_AF_INT_CFG);
-	offs = reg & 0x7FF;
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, 0);
+	if (blkaddr < 0)
+		return blkaddr;
+
+	offs = rvu_read64(rvu, blkaddr, CPT_PRIV_AF_INT_CFG) & 0x7FF;
+	if (!offs) {
+		dev_warn(rvu->dev,
+			 "Failed to get CPT_AF_INT vector offsets\n");
+		return 0;
+	}
 
-	for (i = 0; i < 2; i++) {
-		ret = rvu_cpt_do_register_interrupt(rvu, offs +
-						    CPT_AF_INT_VEC_FLT0 + i,
+	for (i = CPT_AF_INT_VEC_FLT0; i < CPT_AF_INT_VEC_RVU; i++) {
+		ret = rvu_cpt_do_register_interrupt(rvu, offs + i,
 						    rvu_cpt_af_flr_intr_handler,
 						    cpt_flt_irq_name[i]);
 		if (ret)
 			goto err;
-		rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_FLTX_INT_ENA_W1S(i), 0x1);
+		rvu_write64(rvu, blkaddr, CPT_AF_FLTX_INT_ENA_W1S(i), 0x1);
 	}
 
 	ret = rvu_cpt_do_register_interrupt(rvu, offs + CPT_AF_INT_VEC_RVU,
@@ -178,14 +209,14 @@ int rvu_cpt_register_interrupts(struct rvu *rvu)
 					    "CPTAF RVU");
 	if (ret)
 		goto err;
-	rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_RVU_INT_ENA_W1S, 0x1);
+	rvu_write64(rvu, blkaddr, CPT_AF_RVU_INT_ENA_W1S, 0x1);
 
 	ret = rvu_cpt_do_register_interrupt(rvu, offs + CPT_AF_INT_VEC_RAS,
 					    rvu_cpt_af_ras_intr_handler,
 					    "CPTAF RAS");
 	if (ret)
 		goto err;
-	rvu_write64(rvu, BLKADDR_CPT0, CPT_AF_RAS_INT_ENA_W1S, 0x1);
+	rvu_write64(rvu, blkaddr, CPT_AF_RAS_INT_ENA_W1S, 0x1);
 
 	return 0;
 err:
@@ -208,7 +239,7 @@ int rvu_mbox_handler_cpt_lf_alloc(struct rvu *rvu,
 
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, pcifunc);
 	if (blkaddr < 0)
-		return CPT_AF_ERR_LF_INVALID;
+		return blkaddr;
 
 	block = &rvu->hw->block[blkaddr];
 	num_lfs = rvu_get_rsrc_mapcount(rvu_get_pfvf(rvu, pcifunc),
@@ -264,7 +295,7 @@ int rvu_mbox_handler_cpt_lf_free(struct rvu *rvu, struct msg_req *req,
 
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, pcifunc);
 	if (blkaddr < 0)
-		return CPT_AF_ERR_LF_INVALID;
+		return blkaddr;
 
 	block = &rvu->hw->block[blkaddr];
 	num_lfs = rvu_get_rsrc_mapcount(rvu_get_pfvf(rvu, pcifunc),
@@ -297,8 +328,7 @@ int rvu_mbox_handler_cpt_set_crypto_grp(struct rvu *rvu,
 	rsp->crypto_eng_grp = req->crypto_eng_grp;
 
 	if (req->crypto_eng_grp != INVALID_ENGINE_GRP &&
-	    (req->crypto_eng_grp < 0 ||
-	    req->crypto_eng_grp >= CPT_MAX_ENGINE_GROUPS))
+	    req->crypto_eng_grp >= CPT_MAX_ENGINE_GROUPS)
 		return CPT_AF_ERR_GRP_INVALID;
 
 	crypto_eng_grp = req->crypto_eng_grp;
@@ -309,8 +339,12 @@ int rvu_mbox_handler_cpt_rd_wr_register(struct rvu *rvu,
 					struct cpt_rd_wr_reg_msg *req,
 					struct cpt_rd_wr_reg_msg *rsp)
 {
+	int blkaddr, num_lfs, offs, lf;
 	struct rvu_block *block;
-	int num_lfs, offs, lf;
+
+	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_CPT, 0);
+	if (blkaddr < 0)
+		return blkaddr;
 
 	/* This message is accepted only if sent from CPT PF/VF */
 	if (!is_cpt_pf(req->hdr.pcifunc) &&
@@ -335,7 +369,7 @@ int rvu_mbox_handler_cpt_rd_wr_register(struct rvu *rvu,
 			goto error;
 		}
 
-		block = &rvu->hw->block[BLKADDR_CPT0];
+		block = &rvu->hw->block[blkaddr];
 		num_lfs = rvu_get_rsrc_mapcount(
 					rvu_get_pfvf(rvu, req->hdr.pcifunc),
 					block->type);
@@ -346,7 +380,7 @@ int rvu_mbox_handler_cpt_rd_wr_register(struct rvu *rvu,
 		/* Need to translate CPT LF slot to global number because
 		 * VFs use local numbering from 0 to number of LFs - 1
 		 */
-		lf = rvu_get_lf(rvu, &rvu->hw->block[BLKADDR_CPT0],
+		lf = rvu_get_lf(rvu, &rvu->hw->block[blkaddr],
 				req->hdr.pcifunc, lf);
 		if (lf < 0)
 			goto error;
@@ -379,9 +413,9 @@ int rvu_mbox_handler_cpt_rd_wr_register(struct rvu *rvu,
 	}
 
 	if (req->is_write)
-		rvu_write64(rvu, BLKADDR_CPT0, req->reg_offset, req->val);
+		rvu_write64(rvu, blkaddr, req->reg_offset, req->val);
 	else
-		rsp->val = rvu_read64(rvu, BLKADDR_CPT0, req->reg_offset);
+		rsp->val = rvu_read64(rvu, blkaddr, req->reg_offset);
 
 	return 0;
 error:
-- 
2.31.1

