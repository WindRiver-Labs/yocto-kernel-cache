From a49642134bdff5a095ab6f1d6861141bb901e25b Mon Sep 17 00:00:00 2001
From: Wojciech Bartczak <wbartczak@marvell.com>
Date: Wed, 11 Aug 2021 15:22:36 -0700
Subject: [PATCH 1901/1921] driver: soc: Remove unnecessary warnings about
 reset counters

This patch changes some warnings about reset counters printed by
octeontx_info driver to debug messages.
The change prevent pollution of dmesg with irrelevant information.

Signed-off-by: Wojciech Bartczak <wbartczak@marvell.com>
Change-Id: I101963b4d9b40878bd358be4191ddab3288cfcff
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/58846
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Chandrakala Chavva <cchavva@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/soc/marvell/octeontx_info.c | 102 +++++++++++++++++-----------
 1 file changed, 61 insertions(+), 41 deletions(-)

diff --git a/drivers/soc/marvell/octeontx_info.c b/drivers/soc/marvell/octeontx_info.c
index 5c0e86103052..50982fca753f 100644
--- a/drivers/soc/marvell/octeontx_info.c
+++ b/drivers/soc/marvell/octeontx_info.c
@@ -14,6 +14,7 @@
 #include <linux/of.h>
 #include <linux/errno.h>
 #include <linux/slab.h>
+#include <soc/marvell/octeontx/octeontx_smc.h>
 
 #define OCTTX_NODE	"octeontx_brd"
 #define FW_LAYOUT_NODE	"firmware-layout"
@@ -66,7 +67,7 @@ struct octtx_brd_info {
 
 static struct proc_dir_entry *ent;
 static struct octtx_brd_info brd;
-static char null_string[5] = "NULL";
+static const char null_string[5] = "NULL";
 
 static int oct_brd_proc_show(struct seq_file *seq, void *v)
 {
@@ -106,10 +107,14 @@ static int oct_brd_proc_show(struct seq_file *seq, void *v)
 		}
 	}
 
-	seq_printf(seq, "cold_reset_count: %s\n", brd.reset_count_cold);
-	seq_printf(seq, "warm_reset_count: %s\n", brd.reset_count_warm);
-	seq_printf(seq, "core_wdog_reset_count: %s\n", brd.reset_count_core_wdog);
-	seq_printf(seq, "scp_wdog_reset_count: %s\n", brd.reset_count_scp_wdog);
+	if (is_soc_cn10kx()) {
+		seq_printf(seq, "cold_reset_count: %s\n", brd.reset_count_cold);
+		seq_printf(seq, "warm_reset_count: %s\n", brd.reset_count_warm);
+		seq_printf(seq, "core_wdog_reset_count: %s\n",
+			   brd.reset_count_core_wdog);
+		seq_printf(seq, "scp_wdog_reset_count: %s\n",
+			   brd.reset_count_scp_wdog);
+	}
 
 	while (fw_info) {
 		seq_printf(seq, "firmware-file: %s\n", fw_info->name);
@@ -218,6 +223,48 @@ static int octtx_parse_mac_info(struct device_node *node)
 	return 0;
 }
 
+/** Reads reset counters information and store it in global board structure
+ *
+ * @param np	device tree node to parse
+ *
+ */
+static void octtx_parse_reset_couters(struct device_node *np)
+{
+	int ret;
+
+	ret = of_property_read_string(np, "RESET-COUNT-COLD",
+					&brd.reset_count_cold);
+	if (ret) {
+		pr_warn("Cold reset count not available\n");
+		/* Default name is "NULL" */
+		brd.reset_count_cold = null_string;
+	}
+
+	ret = of_property_read_string(np, "RESET-COUNT-WARM",
+					&brd.reset_count_warm);
+	if (ret) {
+		pr_warn("Warm reset count not available\n");
+		/* Default name is "NULL" */
+		brd.reset_count_warm = null_string;
+	}
+
+	ret = of_property_read_string(np, "RESET-COUNT-CORE-WDOG",
+					&brd.reset_count_core_wdog);
+	if (ret) {
+		pr_warn("Core Watchdog reset count not available\n");
+		/* Default name is "NULL" */
+		brd.reset_count_core_wdog = null_string;
+	}
+
+	ret = of_property_read_string(np, "RESET-COUNT-SCP-WDOG",
+					&brd.reset_count_scp_wdog);
+	if (ret) {
+		pr_warn("SCP Watchdog reset count not available\n");
+		/* Default name is "NULL" */
+		brd.reset_count_scp_wdog = null_string;
+	}
+}
+
 static int octtx_parse_firmware_layout(struct device_node *parent)
 {
 	struct device_node *np = NULL;
@@ -374,43 +421,16 @@ static int __init octtx_info_init(void)
 			pr_warn("Board MAC addess not available\n");
 		}
 
-		ret = of_property_read_string(np, "RESET-COUNT-COLD",
-						&brd.reset_count_cold);
-		if (ret) {
-			pr_warn("Cold reset count not available\n");
-			/* Default name is "NULL" */
-			brd.reset_count_cold = null_string;
-		}
-
-		ret = of_property_read_string(np, "RESET-COUNT-WARM",
-						&brd.reset_count_warm);
-		if (ret) {
-			pr_warn("Warm reset count not available\n");
-			/* Default name is "NULL" */
-			brd.reset_count_warm = null_string;
-		}
-
-		ret = of_property_read_string(np, "RESET-COUNT-CORE-WDOG",
-						&brd.reset_count_core_wdog);
-		if (ret) {
-			pr_warn("Core Watchdog reset count not available\n");
-			/* Default name is "NULL" */
-			brd.reset_count_core_wdog = null_string;
-		}
+		/* Parse elements related to CN10KX */
+		if (is_soc_cn10kx()) {
+			octtx_parse_reset_couters(np);
 
-		ret = of_property_read_string(np, "RESET-COUNT-SCP-WDOG",
-						&brd.reset_count_scp_wdog);
-		if (ret) {
-			pr_warn("SCP Watchdog reset count not available\n");
-			/* Default name is "NULL" */
-			brd.reset_count_scp_wdog = null_string;
-		}
-
-		np = of_find_node_by_name(np, FW_LAYOUT_NODE);
-		if (np) {
-			ret = octtx_parse_firmware_layout(np);
-			if (ret)
-				pr_err("Error parsing firmware-layout\n");
+			np = of_find_node_by_name(np, FW_LAYOUT_NODE);
+			if (np) {
+				ret = octtx_parse_firmware_layout(np);
+				if (ret)
+					pr_err("Error parsing firmware-layout\n");
+			}
 		}
 
 		brd.dev_tree_parsed = 1;
-- 
2.31.1

