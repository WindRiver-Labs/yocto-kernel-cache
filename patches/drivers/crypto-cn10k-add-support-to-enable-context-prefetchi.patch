From f390448343e67ebc814085cca2b32c805bce8f32 Mon Sep 17 00:00:00 2001
From: Vidya Velumuri <vvelumuri@marvell.com>
Date: Sat, 26 Sep 2020 15:28:32 +0530
Subject: [PATCH 0914/1921] crypto: cn10k: add support to enable context
 prefetching

This patch configures the CPT_AF_LFX_CTL:CTX_ILEN and
CPT_AF_CTL:CTX_GRP_EN to enable context prefetching
for the engine groups.

Change-Id: I0f4440b317211856aa017236c2d7a511796e7c37
Signed-off-by: Vidya Velumuri <vvelumuri@marvell.com>
Signed-off-by: Srujana Challa <schalla@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/36770
Reviewed-by: Vidya Sagar Velumuri <Vidya.Velumuri@cavium.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Tested-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/crypto/marvell/cn10k/cn10k_cptpf_ucode.c    | 10 +++++++++-
 drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c |  6 ++++++
 2 files changed, 15 insertions(+), 1 deletion(-)

diff --git a/drivers/crypto/marvell/cn10k/cn10k_cptpf_ucode.c b/drivers/crypto/marvell/cn10k/cn10k_cptpf_ucode.c
index 409aef8a2405..d3ff2fe167d7 100644
--- a/drivers/crypto/marvell/cn10k/cn10k_cptpf_ucode.c
+++ b/drivers/crypto/marvell/cn10k/cn10k_cptpf_ucode.c
@@ -2006,7 +2006,12 @@ int cn10k_cpt_try_create_default_eng_grps(struct pci_dev *pdev,
 		if (ret)
 			goto release_tar_arch;
 	}
-
+	/*
+	 * Configure engine group mask to allow context prefetching
+	 * for the groups.
+	 */
+	cn10k_cpt_write_af_reg(pdev, CPT_AF_CTL,
+			       CN10K_CPT_ALL_ENG_GRPS_MASK << 3);
 	print_dbg_info(&pdev->dev, eng_grps);
 release_tar_arch:
 	release_tar_archive(tar_arch);
@@ -2081,6 +2086,9 @@ void cn10k_cpt_cleanup_eng_grps(struct pci_dev *pdev,
 	struct cn10k_cpt_eng_grp_info *grp;
 	int i, j;
 
+	/* Clear engine group mask for context prefetching */
+	cn10k_cpt_write_af_reg(pdev, CPT_AF_CTL, 0ULL);
+
 	mutex_lock(&eng_grps->lock);
 	if (eng_grps->is_ucode_load_created) {
 		device_remove_file(&pdev->dev,
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
index e176ff6e0754..9ccf9d8ea41e 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_cpt.c
@@ -18,6 +18,9 @@
 #define	PCI_DEVID_OTX2_CPT_PF	0xA0FD
 #define	PCI_DEVID_OTX2_CPT10_PF	0xA0F2
 
+/* Length of initial context fetch in 128 byte words */
+#define CPT_CTX_ILEN    2
+
 /* CPT PF number */
 static int cpt_pf_num = -1;
 
@@ -265,6 +268,8 @@ int rvu_mbox_handler_cpt_lf_alloc(struct rvu *rvu,
 
 		/* Set CPT LF group and priority */
 		val = (u64)req->eng_grpmsk << 48 | 1;
+		/* Configure initial context push length */
+		val |= (CPT_CTX_ILEN << 17);
 		rvu_write64(rvu, blkaddr, CPT_AF_LFX_CTL(cptlf), val);
 
 		/* Set CPT LF NIX_PF_FUNC and SSO_PF_FUNC */
@@ -478,6 +483,7 @@ int rvu_mbox_handler_cpt_rd_wr_register(struct rvu *rvu,
 	} else if (!(req->hdr.pcifunc & RVU_PFVF_FUNC_MASK)) {
 		/* Registers that can be accessed from PF */
 		switch (req->reg_offset & 0xFF000) {
+		case CPT_AF_CTL:
 		case CPT_AF_PF_FUNC:
 		case CPT_AF_BLK_RST:
 		case CPT_AF_CONSTANTS1:
-- 
2.31.1

