From df89bab18a8c38d60913154f9491ea9e4c88921a Mon Sep 17 00:00:00 2001
From: Subbaraya Sundeep <sbhatta@marvell.com>
Date: Sat, 30 Jan 2021 20:11:20 +0530
Subject: [PATCH 10/11] octeontx2-af: Do not clear TL1 mapping info

commit 880d06cb198a3570f2c143769598f1f78e229925 from
git@git.assembla.com:cavium/WindRiver.linux.git

NIX TL1 Scheduler queue is shared between PF and all
of its VFs. During the interface down sequence of
PF, TL1 queue and current owner mapping information
is cleared to zero. This causes VF scheduler queue
configuration mailbox(NIX_TXSCHQ_CFG) to fail in
cases where PF is brought down when VF is in the
middle of interface up sequence. Hence do not
clear queue and current owner mapping information.

Fixes: 463769c7("octeontx2-af: clear sw xoff before flush")
Change-Id: I79664d113bc68e8c6493cc1d3343a2a9be94ebb8
Signed-off-by: Subbaraya Sundeep <sbhatta@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/45191
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
index 3637b656b258..07e0d521f720 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c
@@ -1877,6 +1877,7 @@ static int nix_txschq_free(struct rvu *rvu, u16 pcifunc)
 	struct rvu_hwinfo *hw = rvu->hw;
 	struct nix_txsch *txsch;
 	struct nix_hw *nix_hw;
+	u16 map_func;
 
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NIX, pcifunc);
 	if (blkaddr < 0)
@@ -1914,7 +1915,11 @@ static int nix_txschq_free(struct rvu *rvu, u16 pcifunc)
 	if (!(pcifunc & RVU_PFVF_FUNC_MASK)) {
 		txsch = &nix_hw->txsch[NIX_TXSCH_LVL_TL1];
 		schq = nix_get_tx_link(rvu, pcifunc);
-		txsch->pfvf_map[schq] = TXSCH_SET_FLAG(0x0, 0x0);
+		/* Do not clear pcifunc in txsch->pfvf_map[schq] because
+		 * VF might be using this TL1 queue
+		 */
+		map_func = TXSCH_MAP_FUNC(txsch->pfvf_map[schq]);
+		txsch->pfvf_map[schq] = TXSCH_SET_FLAG(map_func, 0x0);
 	}
 
 	/* Flush SMQs */
-- 
2.26.1

