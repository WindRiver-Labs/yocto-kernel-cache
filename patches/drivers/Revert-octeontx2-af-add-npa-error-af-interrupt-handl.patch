From 82f70f10baa82c3a5e7ca4422035e1bb21beb727 Mon Sep 17 00:00:00 2001
From: George Cherian <george.cherian@marvell.com>
Date: Fri, 22 Jan 2021 10:23:53 +0530
Subject: [PATCH 1229/1921] Revert "octeontx2-af: add npa error af interrupt
 handlers"

This reverts commit 1f7f927c99b1cb16d830ac06416e4ea7c790dedb.

Change-Id: Iba58ab1c3d1fcaca2edb21f126a25792ec1b1ede
Signed-off-by: George Cherian <george.cherian@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/44941
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/rvu.c   |   5 -
 .../net/ethernet/marvell/octeontx2/af/rvu.h   |   2 -
 .../ethernet/marvell/octeontx2/af/rvu_npa.c   | 237 ------------------
 .../marvell/octeontx2/af/rvu_struct.h         |  23 --
 4 files changed, 267 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
index 2238baa8022f..1bbd2be4c5e1 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.c
@@ -2877,7 +2877,6 @@ static void rvu_unregister_interrupts(struct rvu *rvu)
 {
 	int irq;
 
-	rvu_npa_unregister_interrupts(rvu);
 	rvu_sso_unregister_interrupts(rvu);
 	rvu_cpt_unregister_interrupts(rvu);
 	rvu_ree_unregister_interrupts(rvu);
@@ -3090,10 +3089,6 @@ static int rvu_register_interrupts(struct rvu *rvu)
 	}
 	rvu->irq_allocated[offset] = true;
 
-	ret = rvu_npa_register_interrupts(rvu);
-	if (ret)
-		goto fail;
-
 	ret = rvu_sso_register_interrupts(rvu);
 	if (ret)
 		goto fail;
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
index 6f80012a6863..74b7ee239232 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
@@ -748,8 +748,6 @@ void rvu_npa_freemem(struct rvu *rvu);
 void rvu_npa_lf_teardown(struct rvu *rvu, u16 pcifunc, int npalf);
 int rvu_npa_aq_enq_inst(struct rvu *rvu, struct npa_aq_enq_req *req,
 			struct npa_aq_enq_rsp *rsp);
-int rvu_npa_register_interrupts(struct rvu *rvu);
-void rvu_npa_unregister_interrupts(struct rvu *rvu);
 
 /* NIX APIs */
 bool is_nixlf_attached(struct rvu *rvu, u16 pcifunc);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c
index 5675050ea55e..82a7c1168d26 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c
@@ -8,10 +8,8 @@
  * published by the Free Software Foundation.
  */
 
-#include <linux/bitfield.h>
 #include <linux/module.h>
 #include <linux/pci.h>
-#include <linux/stringify.h>
 
 #include "rvu_struct.h"
 #include "rvu_reg.h"
@@ -554,238 +552,3 @@ void rvu_npa_lf_teardown(struct rvu *rvu, u16 pcifunc, int npalf)
 
 	npa_ctx_free(rvu, pfvf);
 }
-
-static irqreturn_t rvu_npa_af_rvu_intr_handler(int irq, void *rvu_irq)
-{
-	struct rvu *rvu = (struct rvu *)rvu_irq;
-	int blkaddr;
-	u64 intr;
-
-	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NPA, 0);
-	if (blkaddr < 0)
-		return IRQ_NONE;
-
-	intr = rvu_read64(rvu, blkaddr, NPA_AF_RVU_INT);
-
-	if (intr & BIT_ULL(0))
-		dev_err_ratelimited(rvu->dev, "NPA: Unmapped slot error\n");
-
-	/* Clear interrupts */
-	rvu_write64(rvu, blkaddr, NPA_AF_RVU_INT, intr);
-	return IRQ_HANDLED;
-}
-
-static const char *rvu_npa_inpq_to_str(u16 in)
-{
-	switch (in) {
-	case 0:
-		return NULL;
-	case BIT(NPA_INPQ_NIX0_RX):
-		return __stringify(NPA_INPQ_NIX0_RX);
-	case BIT(NPA_INPQ_NIX0_TX):
-		return __stringify(NPA_INPQ_NIX0_TX);
-	case BIT(NPA_INPQ_NIX1_RX):
-		return __stringify(NPA_INPQ_NIX1_RX);
-	case BIT(NPA_INPQ_NIX1_TX):
-		return __stringify(NPA_INPQ_NIX1_TX);
-	case BIT(NPA_INPQ_SSO):
-		return __stringify(NPA_INPQ_SSO);
-	case BIT(NPA_INPQ_TIM):
-		return __stringify(NPA_INPQ_TIM);
-	case BIT(NPA_INPQ_DPI):
-		return __stringify(NPA_INPQ_DPI);
-	case BIT(NPA_INPQ_AURA_OP):
-		return __stringify(NPA_INPQ_AURA_OP);
-	case BIT(NPA_INPQ_INTERNAL_RSV):
-		return __stringify(NPA_INPQ_INTERNAL_RSV);
-	}
-
-	return "Reserved";
-}
-
-static irqreturn_t rvu_npa_af_gen_intr_handler(int irq, void *rvu_irq)
-{
-	struct rvu *rvu = (struct rvu *)rvu_irq;
-	const char *err_msg;
-	int blkaddr, val;
-	u64 intr;
-
-	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NPA, 0);
-	if (blkaddr < 0)
-		return IRQ_NONE;
-
-	intr = rvu_read64(rvu, blkaddr, NPA_AF_GEN_INT);
-
-	if (intr & BIT_ULL(32))
-		dev_err_ratelimited(rvu->dev, "NPA: Unmapped PF func error\n");
-
-	val = FIELD_GET(GENMASK(31, 16), intr);
-	err_msg = rvu_npa_inpq_to_str(val);
-	if (err_msg)
-		dev_err_ratelimited(rvu->dev, "NPA: Alloc disabled for %s\n",
-				    err_msg);
-
-	val = FIELD_GET(GENMASK(15, 0), intr);
-	err_msg = rvu_npa_inpq_to_str(val);
-	if (err_msg)
-		dev_err_ratelimited(rvu->dev, "NPA: Free disabled for %s\n",
-				    err_msg);
-
-	/* Clear interrupts */
-	rvu_write64(rvu, blkaddr, NPA_AF_GEN_INT, intr);
-	return IRQ_HANDLED;
-}
-
-static irqreturn_t rvu_npa_af_err_intr_handler(int irq, void *rvu_irq)
-{
-	struct rvu *rvu = (struct rvu *)rvu_irq;
-	int blkaddr;
-	u64 intr;
-
-	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NPA, 0);
-	if (blkaddr < 0)
-		return IRQ_NONE;
-
-	intr = rvu_read64(rvu, blkaddr, NPA_AF_ERR_INT);
-
-	if (intr & BIT_ULL(14))
-		dev_err_ratelimited(rvu->dev,
-				    "NPA: Memory fault on NPA_AQ_INST_S read\n");
-
-	if (intr & BIT_ULL(13))
-		dev_err_ratelimited(rvu->dev,
-				    "NPA: Memory fault on NPA_AQ_RES_S write\n");
-
-	if (intr & BIT_ULL(12))
-		dev_err_ratelimited(rvu->dev, "NPA: AQ doorbell error\n");
-
-	/* Clear interrupts */
-	rvu_write64(rvu, blkaddr, NPA_AF_ERR_INT, intr);
-	return IRQ_HANDLED;
-}
-
-static irqreturn_t rvu_npa_af_ras_intr_handler(int irq, void *rvu_irq)
-{
-	struct rvu *rvu = (struct rvu *)rvu_irq;
-	int blkaddr;
-	u64 intr;
-
-	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NPA, 0);
-	if (blkaddr < 0)
-		return IRQ_NONE;
-
-	intr = rvu_read64(rvu, blkaddr, NPA_AF_RAS);
-
-	if (intr & BIT_ULL(34))
-		dev_err_ratelimited(rvu->dev,
-				    "NPA: Poisoned data on NPA_AQ_INST_S read\n");
-
-	if (intr & BIT_ULL(33))
-		dev_err_ratelimited(rvu->dev,
-				    "NPA: Poisoned data on NPA_AQ_RES_S write\n");
-
-	if (intr & BIT_ULL(32))
-		dev_err_ratelimited(rvu->dev,
-				    "NPA: Poisoned data on HW context read\n");
-
-	/* Clear interrupts */
-	rvu_write64(rvu, blkaddr, NPA_AF_RAS, intr);
-	return IRQ_HANDLED;
-}
-
-static bool rvu_npa_af_request_irq(struct rvu *rvu, int blkaddr, int offset,
-				   const char *name, irq_handler_t fn)
-{
-	int rc;
-
-	WARN_ON(rvu->irq_allocated[offset]);
-	rvu->irq_allocated[offset] = false;
-	sprintf(&rvu->irq_name[offset * NAME_SIZE], name);
-	rc = request_irq(pci_irq_vector(rvu->pdev, offset), fn, 0,
-			 &rvu->irq_name[offset * NAME_SIZE], rvu);
-	if (rc)
-		dev_warn(rvu->dev, "Failed to register %s irq\n", name);
-	else
-		rvu->irq_allocated[offset] = true;
-
-	return rvu->irq_allocated[offset];
-}
-
-int rvu_npa_register_interrupts(struct rvu *rvu)
-{
-	int blkaddr, base;
-	bool rc;
-
-	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NPA, 0);
-	if (blkaddr < 0)
-		return blkaddr;
-
-	/* Get NPA AF MSIX vectors offset. */
-	base = rvu_read64(rvu, blkaddr, NPA_PRIV_AF_INT_CFG) & 0x3ff;
-	if (!base) {
-		dev_warn(rvu->dev,
-			 "Failed to get NPA_AF_INT vector offsets\n");
-		return 0;
-	}
-
-	/* Register and enable NPA_AF_RVU_INT interrupt */
-	rc = rvu_npa_af_request_irq(rvu, blkaddr, base +  NPA_AF_INT_VEC_RVU,
-				    "NPA_AF_RVU_INT",
-				    rvu_npa_af_rvu_intr_handler);
-	if (!rc)
-		goto err;
-	rvu_write64(rvu, blkaddr, NPA_AF_RVU_INT_ENA_W1S, ~0ULL);
-
-	/* Register and enable NPA_AF_GEN_INT interrupt */
-	rc = rvu_npa_af_request_irq(rvu, blkaddr, base + NPA_AF_INT_VEC_GEN,
-				    "NPA_AF_RVU_GEN",
-				    rvu_npa_af_gen_intr_handler);
-	if (!rc)
-		goto err;
-	rvu_write64(rvu, blkaddr, NPA_AF_GEN_INT_ENA_W1S, ~0ULL);
-
-	/* Register and enable NPA_AF_ERR_INT interrupt */
-	rc = rvu_npa_af_request_irq(rvu, blkaddr, base + NPA_AF_INT_VEC_AF_ERR,
-				    "NPA_AF_ERR_INT",
-				    rvu_npa_af_err_intr_handler);
-	if (!rc)
-		goto err;
-	rvu_write64(rvu, blkaddr, NPA_AF_ERR_INT_ENA_W1S, ~0ULL);
-
-	/* Register and enable NPA_AF_RAS interrupt */
-	rc = rvu_npa_af_request_irq(rvu, blkaddr, base + NPA_AF_INT_VEC_POISON,
-				    "NPA_AF_RAS",
-				    rvu_npa_af_ras_intr_handler);
-	if (!rc)
-		goto err;
-	rvu_write64(rvu, blkaddr, NPA_AF_RAS_ENA_W1S, ~0ULL);
-
-	return 0;
-err:
-	rvu_npa_unregister_interrupts(rvu);
-	return rc;
-}
-
-void rvu_npa_unregister_interrupts(struct rvu *rvu)
-{
-	int i, offs, blkaddr;
-	u64 reg;
-
-	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NPA, 0);
-	if (blkaddr < 0)
-		return;
-
-	reg = rvu_read64(rvu, blkaddr, NPA_PRIV_AF_INT_CFG);
-	offs = reg & 0x3FF;
-
-	rvu_write64(rvu, blkaddr, NPA_AF_RVU_INT_ENA_W1C, ~0ULL);
-	rvu_write64(rvu, blkaddr, NPA_AF_GEN_INT_ENA_W1C, ~0ULL);
-	rvu_write64(rvu, blkaddr, NPA_AF_ERR_INT_ENA_W1C, ~0ULL);
-	rvu_write64(rvu, blkaddr, NPA_AF_RAS_ENA_W1C, ~0ULL);
-
-	for (i = 0; i < NPA_AF_INT_VEC_CNT; i++)
-		if (rvu->irq_allocated[offs + i]) {
-			free_irq(pci_irq_vector(rvu->pdev, offs + i), rvu);
-			rvu->irq_allocated[offs + i] = false;
-		}
-}
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h
index 43fa57b44eaa..c59faf03d6e5 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h
@@ -68,16 +68,6 @@ enum rvu_af_int_vec_e {
 	RVU_AF_INT_VEC_CNT    = 0x5,
 };
 
-/* NPA Admin function Interrupt Vector Enumeration */
-enum npa_af_int_vec_e {
-	NPA_AF_INT_VEC_RVU	= 0x0,
-	NPA_AF_INT_VEC_GEN	= 0x1,
-	NPA_AF_INT_VEC_AQ_DONE	= 0x2,
-	NPA_AF_INT_VEC_AF_ERR	= 0x3,
-	NPA_AF_INT_VEC_POISON	= 0x4,
-	NPA_AF_INT_VEC_CNT	= 0x5,
-};
-
 /* SSO Admin function Interrupt Vector Enumeration */
 enum sso_af_int_vec_e {
 	SSO_AF_INT_VEC_ERR0 = 0x0,
@@ -144,19 +134,6 @@ enum npa_aq_instop {
 	NPA_AQ_INSTOP_UNLOCK = 0x5,
 };
 
-/* ALLOC/FREE input queues Enumeration from coprocessors */
-enum npa_inpq {
-	NPA_INPQ_NIX0_RX       = 0x0,
-	NPA_INPQ_NIX0_TX       = 0x1,
-	NPA_INPQ_NIX1_RX       = 0x2,
-	NPA_INPQ_NIX1_TX       = 0x3,
-	NPA_INPQ_SSO           = 0x4,
-	NPA_INPQ_TIM           = 0x5,
-	NPA_INPQ_DPI           = 0x6,
-	NPA_INPQ_AURA_OP       = 0xe,
-	NPA_INPQ_INTERNAL_RSV  = 0xf,
-};
-
 /* NPA admin queue instruction structure */
 struct npa_aq_inst_s {
 	u64 op                    : 4; /* W0 */
-- 
2.31.1

