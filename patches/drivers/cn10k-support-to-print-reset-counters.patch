From 8a76e103514c96ab7958e84b4b9e96096072f8c6 Mon Sep 17 00:00:00 2001
From: Selvam Venkatachalam <selvamv@marvell.com>
Date: Tue, 29 Jun 2021 16:43:08 -0700
Subject: [PATCH 1619/1921] cn10k: support to print reset counters

Added support to print the reset counters in octeontx_info

Change-Id: Ib0b25ced1b2a721a274774f5a944eae190628434
Signed-off-by: Selvam Venkatachalam <selvamv@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/55169
Reviewed-by: Chandrakala Chavva <cchavva@marvell.com>
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/soc/marvell/octeontx_info.c | 41 +++++++++++++++++++++++++++++
 1 file changed, 41 insertions(+)

diff --git a/drivers/soc/marvell/octeontx_info.c b/drivers/soc/marvell/octeontx_info.c
index 4e3142503173..5c0e86103052 100644
--- a/drivers/soc/marvell/octeontx_info.c
+++ b/drivers/soc/marvell/octeontx_info.c
@@ -54,6 +54,10 @@ struct octtx_brd_info {
 	const char *board_model;
 	const char *board_num_of_mac;
 	const char *board_num_of_mac_id;
+	const char *reset_count_cold;
+	const char *reset_count_warm;
+	const char *reset_count_core_wdog;
+	const char *reset_count_scp_wdog;
 	int  dev_tree_parsed;
 	int  use_mac_id;
 	struct octeontx_info_mac_addr mac_addrs[MAX_MACS];
@@ -102,6 +106,11 @@ static int oct_brd_proc_show(struct seq_file *seq, void *v)
 		}
 	}
 
+	seq_printf(seq, "cold_reset_count: %s\n", brd.reset_count_cold);
+	seq_printf(seq, "warm_reset_count: %s\n", brd.reset_count_warm);
+	seq_printf(seq, "core_wdog_reset_count: %s\n", brd.reset_count_core_wdog);
+	seq_printf(seq, "scp_wdog_reset_count: %s\n", brd.reset_count_scp_wdog);
+
 	while (fw_info) {
 		seq_printf(seq, "firmware-file: %s\n", fw_info->name);
 		seq_printf(seq, "  firmware-address:  0x%08x\n",
@@ -365,6 +374,38 @@ static int __init octtx_info_init(void)
 			pr_warn("Board MAC addess not available\n");
 		}
 
+		ret = of_property_read_string(np, "RESET-COUNT-COLD",
+						&brd.reset_count_cold);
+		if (ret) {
+			pr_warn("Cold reset count not available\n");
+			/* Default name is "NULL" */
+			brd.reset_count_cold = null_string;
+		}
+
+		ret = of_property_read_string(np, "RESET-COUNT-WARM",
+						&brd.reset_count_warm);
+		if (ret) {
+			pr_warn("Warm reset count not available\n");
+			/* Default name is "NULL" */
+			brd.reset_count_warm = null_string;
+		}
+
+		ret = of_property_read_string(np, "RESET-COUNT-CORE-WDOG",
+						&brd.reset_count_core_wdog);
+		if (ret) {
+			pr_warn("Core Watchdog reset count not available\n");
+			/* Default name is "NULL" */
+			brd.reset_count_core_wdog = null_string;
+		}
+
+		ret = of_property_read_string(np, "RESET-COUNT-SCP-WDOG",
+						&brd.reset_count_scp_wdog);
+		if (ret) {
+			pr_warn("SCP Watchdog reset count not available\n");
+			/* Default name is "NULL" */
+			brd.reset_count_scp_wdog = null_string;
+		}
+
 		np = of_find_node_by_name(np, FW_LAYOUT_NODE);
 		if (np) {
 			ret = octtx_parse_firmware_layout(np);
-- 
2.31.1

