From fc94afc37321624f2b9781d00056747125db6025 Mon Sep 17 00:00:00 2001
From: Sai Krishna Potthuri <lakshmi.sai.krishna.potthuri@xilinx.com>
Date: Fri, 14 Feb 2020 16:47:27 +0530
Subject: [PATCH 1208/1851] mtd: cadence-quadspi: Add support for register
 writes with address

commit 0bcce2970426971c80c7d90b12147efb34a15d2c from
https://github.com/Xilinx/linux-xlnx.git

This patch adds support to provide address for register writes.
Some of the registers like configuration register in OCTAl SPI flashes
requires address.

Signed-off-by: Sai Krishna Potthuri <lakshmi.sai.krishna.potthuri@xilinx.com>
State: pending
Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
---
 drivers/mtd/spi-nor/cadence-quadspi.c | 7 +++++++
 drivers/mtd/spi-nor/spi-nor.c         | 7 ++++---
 include/linux/mtd/spi-nor.h           | 3 ++-
 3 files changed, 13 insertions(+), 4 deletions(-)

diff --git a/drivers/mtd/spi-nor/cadence-quadspi.c b/drivers/mtd/spi-nor/cadence-quadspi.c
index 15a8a1580e3d..0ecbecb57a7e 100644
--- a/drivers/mtd/spi-nor/cadence-quadspi.c
+++ b/drivers/mtd/spi-nor/cadence-quadspi.c
@@ -561,6 +561,13 @@ static int cqspi_command_write(struct spi_nor *nor, const u8 opcode,
 		reg |= (0x1 << CQSPI_REG_CMDCTRL_WR_EN_LSB);
 		reg |= ((n_tx - 1) & CQSPI_REG_CMDCTRL_WR_BYTES_MASK)
 			<< CQSPI_REG_CMDCTRL_WR_BYTES_LSB;
+		if (nor->is_addrvalid) {
+			reg |= (0x1 << CQSPI_REG_CMDCTRL_ADDR_EN_LSB);
+			reg |= ((nor->addr_width - 1) &
+				CQSPI_REG_CMDCTRL_ADD_BYTES_MASK) <<
+				CQSPI_REG_CMDCTRL_ADD_BYTES_LSB;
+			writel(nor->reg_addr, reg_base + CQSPI_REG_CMDADDRESS);
+		}
 		data = 0;
 		write_len = (n_tx > 4) ? 4 : n_tx;
 		memcpy(&data, txbuf, write_len);
diff --git a/drivers/mtd/spi-nor/spi-nor.c b/drivers/mtd/spi-nor/spi-nor.c
index 5e85179278ca..6600c87135ca 100644
--- a/drivers/mtd/spi-nor/spi-nor.c
+++ b/drivers/mtd/spi-nor/spi-nor.c
@@ -4758,10 +4758,11 @@ static int spi_nor_switch_micron_octal_ddr(struct spi_nor *nor)
 
 	program_opcode = nor->program_opcode;
 	write_enable(nor);
-	nor->program_opcode = SPINOR_OP_WRCR;
 	nor->addr_width = 3;
-	ret = nor->write(nor, 0x0, 1, &cr);
-	nor->program_opcode = program_opcode;
+	nor->is_addrvalid = true;
+	nor->reg_addr = 0x0;
+	ret = nor->write_reg(nor, SPINOR_OP_WRCR, &cr, 1);
+	nor->is_addrvalid = false;
 	nor->addr_width = 4;
 	if (ret < 0) {
 		dev_err(nor->dev,
diff --git a/include/linux/mtd/spi-nor.h b/include/linux/mtd/spi-nor.h
index 71a2a482cb8e..2141fb185c23 100644
--- a/include/linux/mtd/spi-nor.h
+++ b/include/linux/mtd/spi-nor.h
@@ -163,7 +163,6 @@
 
 /* Extended/Bank Address Register bits */
 #define EAR_SEGMENT_MASK	0x7 /* 128 Mb segment mask */
-
 enum read_mode {
 	SPI_NOR_NORMAL = 0,
 	SPI_NOR_FAST,
@@ -624,6 +623,8 @@ struct spi_nor {
 	bool                    isstacked;
 	bool			is_lock;
 	u8			device_id[SPI_NOR_MAX_ID_LEN];
+	bool			is_addrvalid;
+	loff_t			reg_addr;
 
 	int (*prepare)(struct spi_nor *nor, enum spi_nor_ops ops);
 	void (*unprepare)(struct spi_nor *nor, enum spi_nor_ops ops);
-- 
2.31.1

