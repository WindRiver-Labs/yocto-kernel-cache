From 6a066dcaa28d88c112d4c7995b7b60210bbf8aba Mon Sep 17 00:00:00 2001
From: "Nalla, Pradeep" <pnalla@marvell.com>
Date: Tue, 22 Dec 2020 01:12:40 +0530
Subject: [PATCH 0991/1921] octeontx2-af: Allow SDP vfs to add promisc entry.

This patch allows adding promisc entry for SDP VFs so that NIX SDP
interface receives all the packets destined to it. Also added functions
to check if the device is SDP pf or vf.

Change-Id: I29dcc06efa0ea872e7c7050ae267b0d916d27e54
Signed-off-by: Nalla, Pradeep <pnalla@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/42658
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/net/ethernet/marvell/octeontx2/af/rvu.h |  1 +
 .../net/ethernet/marvell/octeontx2/af/rvu_npc.c |  3 ++-
 .../net/ethernet/marvell/octeontx2/af/rvu_sdp.c | 17 +++++++++++++----
 3 files changed, 16 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
index add7649b4438..22ecc3b23d5c 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu.h
@@ -858,6 +858,7 @@ int rvu_tim_lf_teardown(struct rvu *rvu, u16 pcifunc, int lf, int slot);
 /* SDP APIs */
 int rvu_sdp_init(struct rvu *rvu);
 bool is_sdp_pf(u16 pcifunc);
+bool is_sdp_vf(u16 pcifunc);
 
 /* REE APIs */
 int rvu_ree_init(struct rvu *rvu);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c
index c695f4788bcd..9c86d4f29231 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c
@@ -661,7 +661,8 @@ void rvu_npc_install_promisc_entry(struct rvu *rvu, u16 pcifunc,
 	u64 relaxed_mask;
 
 	/* Only PF or AF VF can add a promiscuous entry */
-	if ((pcifunc & RVU_PFVF_FUNC_MASK) && !is_afvf(pcifunc))
+	if ((pcifunc & RVU_PFVF_FUNC_MASK) && !is_afvf(pcifunc) &&
+	    !is_sdp_vf(pcifunc))
 		return;
 
 	blkaddr = rvu_get_blkaddr(rvu, BLKTYPE_NPC, 0);
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_sdp.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_sdp.c
index 2002b197baa3..ee9ec3351bb8 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_sdp.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_sdp.c
@@ -20,7 +20,7 @@
 /* SDP PF number */
 static int sdp_pf_num[MAX_SDP] = {-1, -1};
 
-bool is_sdp_pf(u16 pcifunc)
+bool is_sdp_pfvf(u16 pcifunc)
 {
 	u16 pf = rvu_get_pf(pcifunc);
 	u32 found = 0, i = 0;
@@ -34,12 +34,21 @@ bool is_sdp_pf(u16 pcifunc)
 	if (!found)
 		return false;
 
-	if (pcifunc & RVU_PFVF_FUNC_MASK)
-		return false;
-
 	return true;
 }
 
+bool is_sdp_pf(u16 pcifunc)
+{
+	return (is_sdp_pfvf(pcifunc) &&
+		!(pcifunc & RVU_PFVF_FUNC_MASK));
+}
+
+bool is_sdp_vf(u16 pcifunc)
+{
+	return (is_sdp_pfvf(pcifunc) &&
+		!!(pcifunc & RVU_PFVF_FUNC_MASK));
+}
+
 int rvu_sdp_init(struct rvu *rvu)
 {
 	struct pci_dev *pdev = NULL;
-- 
2.31.1

