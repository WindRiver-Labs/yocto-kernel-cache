From bb2d79116ed4991485d8d01aab225a4ea34a1475 Mon Sep 17 00:00:00 2001
From: Stefan Chulski <stefanc@marvell.com>
Date: Tue, 7 May 2019 13:55:54 +0300
Subject: [PATCH 0811/1921] net: phy: marvell10g: fix 33XX and 21XX PHY
 interface type transitions

This patch fix PHY interface type transitions for 33XX and 21XX.
Code check copper link state status register and update PHY interface
type.
Phylink infrastructure would use PHY interface type to update Marvell
COMPHY and Packet Processor.

Change-Id: I57bf12e22840516bc4cdb7cacfa7672df4eabff3
Signed-off-by: Stefan Chulski <stefanc@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/8693
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Stefan Chulski <Stefan.Chulski@cavium.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/37783
[WK: The original patch got from Marvell sdk11.21.09]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/net/phy/marvell10g.c | 71 ++++++++++++++++++++++--------------
 1 file changed, 44 insertions(+), 27 deletions(-)

diff --git a/drivers/net/phy/marvell10g.c b/drivers/net/phy/marvell10g.c
index c9317e531f2d..53abdda1f1f8 100644
--- a/drivers/net/phy/marvell10g.c
+++ b/drivers/net/phy/marvell10g.c
@@ -377,12 +377,14 @@ static int mv3310_aneg_done(struct phy_device *phydev)
 	return genphy_c45_aneg_done(phydev);
 }
 
-static void mv3310_update_interface(struct phy_device *phydev)
+static void mv_update_interface(struct phy_device *phydev)
 {
 	if ((phydev->interface == PHY_INTERFACE_MODE_SGMII ||
 	     phydev->interface == PHY_INTERFACE_MODE_2500BASEX ||
 	     phydev->interface == PHY_INTERFACE_MODE_10GKR ||
-	     phydev->interface == PHY_INTERFACE_MODE_5GKR) && phydev->link) {
+	     phydev->interface == PHY_INTERFACE_MODE_5GKR ||
+	     phydev->interface == PHY_INTERFACE_MODE_2500BASET) &&
+	    phydev->link) {
 		/* The PHY automatically switches its serdes interface (and
 		 * active PHYXS instance) between Cisco SGMII, 10GBase-KR and
 		 * 2500BaseX modes according to the speed.  Florian suggests
@@ -397,7 +399,7 @@ static void mv3310_update_interface(struct phy_device *phydev)
 			phydev->interface = PHY_INTERFACE_MODE_5GKR;
 			break;
 		case SPEED_2500:
-			phydev->interface = PHY_INTERFACE_MODE_2500BASEX;
+			phydev->interface = PHY_INTERFACE_MODE_2500BASET;
 			break;
 		case SPEED_1000:
 		case SPEED_100:
@@ -410,6 +412,35 @@ static void mv3310_update_interface(struct phy_device *phydev)
 	}
 }
 
+static void mv_set_speed_duplex(struct phy_device *phydev, int status)
+{
+	switch (status & MV_PHY_STATUS_SPD_MASK) {
+	case MV_PHY_STATUS_10000:
+		phydev->speed = SPEED_10000;
+		break;
+	case MV_PHY_STATUS_5000:
+		phydev->speed = SPEED_5000;
+		break;
+	case MV_PHY_STATUS_2500:
+		phydev->speed = SPEED_2500;
+		break;
+	case MV_PHY_STATUS_1000:
+		phydev->speed = SPEED_1000;
+		break;
+	case MV_PHY_STATUS_100:
+		phydev->speed = SPEED_100;
+		break;
+	default:
+		phydev->speed = SPEED_10;
+		break;
+	}
+
+	if (status & MV_PHY_STATUS_DUPLEX)
+		phydev->duplex = DUPLEX_FULL;
+	else
+		phydev->duplex = DUPLEX_HALF;
+}
+
 /* 10GBASE-ER,LR,LRM,SR do not support autonegotiation. */
 static int mv3310_read_10gbr_status(struct phy_device *phydev)
 {
@@ -417,14 +448,14 @@ static int mv3310_read_10gbr_status(struct phy_device *phydev)
 	phydev->speed = SPEED_10000;
 	phydev->duplex = DUPLEX_FULL;
 
-	mv3310_update_interface(phydev);
+	mv_update_interface(phydev);
 
 	return 0;
 }
 
 static int mv3310_read_status(struct phy_device *phydev)
 {
-	int val;
+	int val, status;
 
 	phydev->speed = SPEED_UNKNOWN;
 	phydev->duplex = DUPLEX_UNKNOWN;
@@ -493,7 +524,12 @@ static int mv3310_read_status(struct phy_device *phydev)
 		}
 	}
 
-	mv3310_update_interface(phydev);
+	status = phy_read_mmd(phydev, MDIO_MMD_PCS, MV_PCS_COPPER_STATUS);
+	if (status < 0)
+		return status;
+
+	mv_set_speed_duplex(phydev, status);
+	mv_update_interface(phydev);
 
 	return 0;
 }
@@ -512,31 +548,12 @@ static int m88e2110_read_status(struct phy_device *phydev)
 	}
 
 	phydev->link = 1;
-	if (status & MV_PHY_STATUS_DUPLEX)
-		phydev->duplex = DUPLEX_FULL;
-	else
-		phydev->duplex = DUPLEX_HALF;
+	mv_set_speed_duplex(phydev, status);
 
 	phydev->pause = 0;
 	phydev->asym_pause = 0;
 
-	switch (status & MV_PHY_STATUS_SPD_MASK) {
-	case MV_PHY_STATUS_5000:
-		phydev->speed = SPEED_5000;
-		break;
-	case MV_PHY_STATUS_2500:
-		phydev->speed = SPEED_2500;
-		break;
-	case MV_PHY_STATUS_1000:
-		phydev->speed = SPEED_1000;
-		break;
-	case MV_PHY_STATUS_100:
-		phydev->speed = SPEED_100;
-		break;
-	default:
-		phydev->speed = SPEED_10;
-		break;
-	}
+	mv_update_interface(phydev);
 
 	if (phydev->autoneg == AUTONEG_ENABLE) {
 		lpa = genphy_c45_read_lpa(phydev);
-- 
2.31.1

