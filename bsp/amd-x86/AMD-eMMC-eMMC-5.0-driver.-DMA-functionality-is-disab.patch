From a080e9904a9b2cf2a8551b4f4c4eaf6e5bcde399 Mon Sep 17 00:00:00 2001
From: Sudheesh Mavila <sudheesh.mavila@amd.com>
Date: Mon, 31 Jul 2017 16:10:23 +0530
Subject: [PATCH 2/2] AMD eMMC : eMMC 5.0 driver. DMA functionality is disabled

Signed-off-by: Sudheesh Mavila <sudheesh.mavila@amd.com>
Signed-off-by: Calin Copos <calin.copos@windriver.com>
[Original patch provided by AMD vendor directly]
Signed-off-by: Liwei Song <liwei.song@windriver.com>
---
 drivers/acpi/resource.c       |  5 ++++
 drivers/mmc/core/mmc.c        | 49 ++++++++++++++++++++---------------
 drivers/mmc/host/sdhci-acpi.c |  9 ++++---
 drivers/mmc/host/sdhci.c      | 21 +++++++++++++++
 drivers/mmc/host/sdhci.h      |  2 ++
 include/linux/mmc/host.h      |  1 +
 6 files changed, 63 insertions(+), 24 deletions(-)
 mode change 100644 => 100755 drivers/acpi/resource.c
 mode change 100644 => 100755 drivers/mmc/core/mmc.c
 mode change 100644 => 100755 drivers/mmc/host/sdhci-acpi.c
 mode change 100644 => 100755 drivers/mmc/host/sdhci.c
 mode change 100644 => 100755 drivers/mmc/host/sdhci.h
 mode change 100644 => 100755 include/linux/mmc/host.h

diff --git a/drivers/acpi/resource.c b/drivers/acpi/resource.c
old mode 100644
new mode 100755
index 2a3e392751e0..93017e0196c7
--- a/drivers/acpi/resource.c
+++ b/drivers/acpi/resource.c
@@ -418,6 +418,11 @@ static void acpi_dev_get_irqresource(struct resource *res, u32 gsi,
 			triggering = trig;
 			polarity = pol;
 		}
+		if (gsi == 5) {
+			polarity = ACPI_ACTIVE_LOW;
+			pr_warning("ACPI: IRQ %d do not override to %s, %s\n", gsi,
+				   t ? "level" : "edge", p ? "low" : "high");
+		}
 	}
 
 	res->flags = acpi_dev_irq_flags(triggering, polarity, shareable);
diff --git a/drivers/mmc/core/mmc.c b/drivers/mmc/core/mmc.c
old mode 100644
new mode 100755
index b7159e243323..a51594329167
--- a/drivers/mmc/core/mmc.c
+++ b/drivers/mmc/core/mmc.c
@@ -1163,16 +1163,17 @@ static int mmc_select_hs400(struct mmc_card *card)
 		return err;
 	}
 
-	/* Set host controller to HS timing */
-	mmc_set_timing(card->host, MMC_TIMING_MMC_HS);
-
-	/* Prepare host to downgrade to HS timing */
-	if (host->ops->hs400_downgrade)
-		host->ops->hs400_downgrade(host);
-
-	/* Reduce frequency to HS frequency */
-	max_dtr = card->ext_csd.hs_max_dtr;
-	mmc_set_clock(host, max_dtr);
+	/*In AMD Platform due to hardware ip issue this fails*/
+	if (!host->ops->set_hs400_dll) {
+		/* Set host controller to HS timing */
+		mmc_set_timing(card->host, MMC_TIMING_MMC_HS);
+		/* Prepare host to downgrade to HS timing */
+		if (host->ops->hs400_downgrade)
+			host->ops->hs400_downgrade(host);
+		/* Reduce frequency to HS frequency */
+		max_dtr = card->ext_csd.hs_max_dtr;
+		mmc_set_clock(host, max_dtr);
+	}
 
 	err = mmc_switch_status(card);
 	if (err)
@@ -1209,13 +1210,17 @@ static int mmc_select_hs400(struct mmc_card *card)
 	mmc_set_timing(host, MMC_TIMING_MMC_HS400);
 	mmc_set_bus_speed(card);
 
-	if (host->ops->hs400_complete)
-		host->ops->hs400_complete(host);
+	/*In AMD Platform due to hardware ip issue this fails*/
+	if (!host->ops->set_hs400_dll) {
+		if (host->ops->hs400_complete)
+			host->ops->hs400_complete(host);
+	}
 
 	err = mmc_switch_status(card);
 	if (err)
 		goto out_err;
-
+	if (host->ops->set_hs400_dll)
+		host->ops->set_hs400_dll(host);
 	return 0;
 
 out_err:
@@ -1238,8 +1243,8 @@ int mmc_hs400_to_hs200(struct mmc_card *card)
 
 	/* Reduce frequency to HS */
 	max_dtr = card->ext_csd.hs_max_dtr;
-	mmc_set_clock(host, max_dtr);
-
+	if (!host->ops->set_hs400_dll)
+		mmc_set_clock(host, max_dtr);
 	/* Switch HS400 to HS DDR */
 	val = EXT_CSD_TIMING_HS;
 	err = __mmc_switch(card, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_HS_TIMING,
@@ -1247,12 +1252,14 @@ int mmc_hs400_to_hs200(struct mmc_card *card)
 			   true, false, true);
 	if (err)
 		goto out_err;
-
-	mmc_set_timing(host, MMC_TIMING_MMC_DDR52);
-
-	err = mmc_switch_status(card);
-	if (err)
-		goto out_err;
+       /*In AMD Platform due to hardware ip issue this fails*/
+	if (!host->ops->set_hs400_dll)
+	{
+		mmc_set_timing(host, MMC_TIMING_MMC_DDR52);
+		err = mmc_switch_status(card);
+		if (err)
+			goto out_err;
+	}
 
 	/* Switch HS DDR to HS */
 	err = __mmc_switch(card, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_BUS_WIDTH,
diff --git a/drivers/mmc/host/sdhci-acpi.c b/drivers/mmc/host/sdhci-acpi.c
old mode 100644
new mode 100755
index 01fc437ed965..d38631100778
--- a/drivers/mmc/host/sdhci-acpi.c
+++ b/drivers/mmc/host/sdhci-acpi.c
@@ -545,9 +545,11 @@ static int amd_select_drive_strength(struct mmc_card *card,
 static void sdhci_acpi_amd_hs400_dll(struct sdhci_host *host)
 {
 	/* AMD Platform requires dll setting */
-	sdhci_writel(host, 0x40003210, SDHCI_AMD_RESET_DLL_REGISTER);
-	usleep_range(10, 20);
-	sdhci_writel(host, 0x40033210, SDHCI_AMD_RESET_DLL_REGISTER);
+	if (host->mmc->caps2 & MMC_CAP2_HS400_1_8V) {
+		sdhci_writel(host, 0x40003210, SDHCI_AMD_RESET_DLL_REGISTER);
+		usleep_range(10, 20);
+		sdhci_writel(host, 0x40033210, SDHCI_AMD_RESET_DLL_REGISTER);
+	}
 }
 
 /*
@@ -576,6 +578,7 @@ static const struct sdhci_ops sdhci_acpi_ops_amd = {
 	.set_bus_width	= sdhci_set_bus_width,
 	.reset		= sdhci_reset,
 	.set_uhs_signaling = sdhci_set_uhs_signaling,
+	.set_hs400_dll = sdhci_acpi_amd_hs400_dll,
 };
 
 static const struct sdhci_acpi_chip sdhci_acpi_chip_amd = {
diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
old mode 100644
new mode 100755
index 89ff43b43de9..9a92ee77fd9b
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -1431,6 +1431,12 @@ void sdhci_send_command(struct sdhci_host *host, struct mmc_command *cmd)
 	sdhci_mod_timer(host, cmd->mrq, timeout);
 
 	sdhci_writew(host, SDHCI_MAKE_CMD(cmd->opcode, flags), SDHCI_COMMAND);
+
+	if (cmd->opcode == MMC_SEND_TUNING_BLOCK_HS200  && (host->quirks2 & SDHCI_QUIRK2_BROKEN_TUNING_WA)) {
+		mdelay(10);
+		sdhci_writel(host, 0x8803040a, 0x8b8);
+		mdelay(10);
+	}
 }
 EXPORT_SYMBOL_GPL(sdhci_send_command);
 
@@ -2101,6 +2107,14 @@ static void sdhci_hw_reset(struct mmc_host *mmc)
 		host->ops->hw_reset(host);
 }
 
+static void sdhci_set_hs400_dll(struct mmc_host *mmc)
+{
+	struct sdhci_host *host = mmc_priv(mmc);
+
+	if (host->ops && host->ops->set_hs400_dll)
+		host->ops->set_hs400_dll(host);
+}
+
 static void sdhci_enable_sdio_irq_nolock(struct sdhci_host *host, int enable)
 {
 	if (!(host->flags & SDHCI_DEVICE_DEAD)) {
@@ -2594,6 +2608,7 @@ static const struct mmc_host_ops sdhci_ops = {
 	.get_cd		= sdhci_get_cd,
 	.get_ro		= sdhci_get_ro,
 	.hw_reset	= sdhci_hw_reset,
+	.set_hs400_dll = sdhci_set_hs400_dll,
 	.enable_sdio_irq = sdhci_enable_sdio_irq,
 	.ack_sdio_irq    = sdhci_ack_sdio_irq,
 	.start_signal_voltage_switch	= sdhci_start_signal_voltage_switch,
@@ -3624,6 +3639,12 @@ void __sdhci_read_caps(struct sdhci_host *host, u16 *ver, u32 *caps, u32 *caps1)
 		host->caps1 &= ~upper_32_bits(dt_caps_mask);
 		host->caps1 |= upper_32_bits(dt_caps);
 	}
+
+	if ((host->caps1 & SDHCI_SUPPORT_SDR104) && (host->caps1 & SDHCI_SUPPORT_DDR50) &&
+	 (host->quirks2 & SDHCI_QUIRK2_BROKEN_TUNING_WA))
+	{
+		host->mmc->caps2 = MMC_CAP2_HS400_1_8V;
+	}
 }
 EXPORT_SYMBOL_GPL(__sdhci_read_caps);
 
diff --git a/drivers/mmc/host/sdhci.h b/drivers/mmc/host/sdhci.h
old mode 100644
new mode 100755
index f69bebe51520..6198d1aa14a3
--- a/drivers/mmc/host/sdhci.h
+++ b/drivers/mmc/host/sdhci.h
@@ -484,6 +484,7 @@ struct sdhci_host {
  */
 #define SDHCI_QUIRK2_USE_32BIT_BLK_CNT			(1<<18)
 
+#define SDHCI_QUIRK2_BROKEN_TUNING_WA			(1<<19)
 	int irq;		/* Device IRQ */
 	void __iomem *ioaddr;	/* Mapped address */
 	char *bounce_buffer;	/* For packing SDMA reads/writes */
@@ -641,6 +642,7 @@ struct sdhci_ops {
 	int	(*platform_execute_tuning)(struct sdhci_host *host, u32 opcode);
 	void	(*set_uhs_signaling)(struct sdhci_host *host, unsigned int uhs);
 	void	(*hw_reset)(struct sdhci_host *host);
+	void    (*set_hs400_dll)(struct sdhci_host *host);
 	void    (*adma_workaround)(struct sdhci_host *host, u32 intmask);
 	void    (*card_event)(struct sdhci_host *host);
 	void	(*voltage_switch)(struct sdhci_host *host);
diff --git a/include/linux/mmc/host.h b/include/linux/mmc/host.h
old mode 100644
new mode 100755
index 4a4a64834d8e..9a301b1cdc93
--- a/include/linux/mmc/host.h
+++ b/include/linux/mmc/host.h
@@ -160,6 +160,7 @@ struct mmc_host_ops {
 					 unsigned int max_dtr, int host_drv,
 					 int card_drv, int *drv_type);
 	void	(*hw_reset)(struct mmc_host *host);
+	void	(*set_hs400_dll)(struct mmc_host *host);
 	void	(*card_event)(struct mmc_host *host);
 
 	/*
-- 
2.17.1

