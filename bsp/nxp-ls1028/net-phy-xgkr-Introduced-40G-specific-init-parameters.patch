From c93cc3ddb80b404841a7ffe518ceea0a3bed9c89 Mon Sep 17 00:00:00 2001
From: Florinel Iordache <florinel.iordache@nxp.com>
Date: Mon, 29 Oct 2018 13:03:53 +0200
Subject: [PATCH 283/741] net/phy: xgkr: Introduced 40G specific init
 parameters

commit 3829104acfe60973b542d2d584428ad36912697e from
http://source.codeaurora.org/external/qoriq/qoriq-components/linux

Proposed different set of init parameters for training algorithm on 40G case. Also added an info message was added to be printed on linux console when the training was successfully completed on a xGKR link. Also added a wait after lane reset for 28G SerDes

Signed-off-by: Florinel Iordache <florinel.iordache@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/net/phy/fsl_backplane.c            | 68 ++++++++++++++++++++--
 drivers/net/phy/fsl_backplane_serdes_28g.c | 10 +++-
 2 files changed, 72 insertions(+), 6 deletions(-)

diff --git a/drivers/net/phy/fsl_backplane.c b/drivers/net/phy/fsl_backplane.c
index b39aa06b2071..86a0fecdc593 100644
--- a/drivers/net/phy/fsl_backplane.c
+++ b/drivers/net/phy/fsl_backplane.c
@@ -24,6 +24,7 @@
 #include <linux/timer.h>
 #include <linux/delay.h>
 #include <linux/workqueue.h>
+#include <linux/netdevice.h>
 
 #include "fsl_backplane.h"
 
@@ -32,16 +33,31 @@
 #define PCS_PHY_DEVICE_ID                      0x0083e400
 #define PCS_PHY_DEVICE_ID_MASK         0xffffffff
 
-/* Long cables setup: 1 m to 2 m cables */
+/* 10G Long cables setup: 1 m to 2 m cables */
 #define RATIO_PREQ_10G                         0x3
 #define RATIO_PST1Q_10G                                0xd
 #define RATIO_EQ_10G                           0x20
 
-/* Short cables setup: up to 30 cm cable */
+/* 10G Short cables setup: up to 30 cm cable */
 //#define RATIO_PREQ_10G                               0x3
 //#define RATIO_PST1Q_10G                              0xa
 //#define RATIO_EQ_10G                         0x29
 
+/* 40G Long cables setup: 1 m to 2 m cables */
+#define RATIO_PREQ_40G                         0x2
+#define RATIO_PST1Q_40G                                0xd
+#define RATIO_EQ_40G                           0x20
+
+/* 40G Short cables setup: up to 30 cm cable */
+//#define RATIO_PREQ_40G                               0x1
+//#define RATIO_PST1Q_40G                              0x3
+//#define RATIO_EQ_40G                         0x29
+
+/* LX2 2x40G default RCW setup */
+//#define RATIO_PREQ_40G                               0x0
+//#define RATIO_PST1Q_40G                              0x3
+//#define RATIO_EQ_40G                         0x30
+
 /* Max/Min coefficient values */
 #define PRE_COE_MAX                                    0x0
 #define PRE_COE_MIN                                    0x8
@@ -429,9 +445,27 @@ static void start_1gkx_an(struct phy_device *phydev)
 
 static void reset_tecr(struct xgkr_params *xgkr)
 {
-	xgkr->ratio_preq = RATIO_PREQ_10G;
-	xgkr->ratio_pst1q = RATIO_PST1Q_10G;
-	xgkr->adpt_eq = RATIO_EQ_10G;
+	struct phy_device *phydev = xgkr->phydev;
+	struct xgkr_phy_data *xgkr_inst = phydev->priv;
+
+	switch (xgkr_inst->bp_mode)
+	{
+	case PHY_BACKPLANE_1000BASE_KX:
+		dev_err(&phydev->mdio.dev, "Wrong call path for 1000Base-KX \n");
+		break;
+
+	case PHY_BACKPLANE_10GBASE_KR:
+		xgkr->ratio_preq = RATIO_PREQ_10G;
+		xgkr->ratio_pst1q = RATIO_PST1Q_10G;
+		xgkr->adpt_eq = RATIO_EQ_10G;
+		break;
+
+	case PHY_BACKPLANE_40GBASE_KR:
+		xgkr->ratio_preq = RATIO_PREQ_40G;
+		xgkr->ratio_pst1q = RATIO_PST1Q_40G;
+		xgkr->adpt_eq = RATIO_EQ_40G;
+		break;
+	}
 
 	tune_tecr(xgkr);
 }
@@ -1133,6 +1167,30 @@ static void xgkr_start_train(struct xgkr_params *xgkr)
 		} else {
 			stop_lt(xgkr);
 			xgkr->state = TRAINED;
+			
+			switch (xgkr_inst->bp_mode)
+			{
+			case PHY_BACKPLANE_10GBASE_KR:
+				if (phydev->attached_dev == NULL)
+					dev_info(&phydev->mdio.dev, "10GBase-KR link trained\n");
+				else
+					dev_info(&phydev->mdio.dev, "%s %s: 10GBase-KR link trained\n",
+							dev_driver_string(phydev->attached_dev->dev.parent), 
+							dev_name(phydev->attached_dev->dev.parent));
+				break;
+				
+			case PHY_BACKPLANE_40GBASE_KR:
+				if (xgkr->idx == xgkr_inst->phy_lanes - 1) {
+					if (phydev->attached_dev == NULL)
+						dev_info(&phydev->mdio.dev, "40GBase-KR link trained\n");
+					else
+						dev_info(&phydev->mdio.dev, "%s %s: 40GBase-KR link trained\n",
+								dev_driver_string(phydev->attached_dev->dev.parent), 
+								dev_name(phydev->attached_dev->dev.parent));
+				}
+				break;
+			}
+
 			break;
 		}
 	}
diff --git a/drivers/net/phy/fsl_backplane_serdes_28g.c b/drivers/net/phy/fsl_backplane_serdes_28g.c
index eec1263885ec..d3f23740b1e5 100644
--- a/drivers/net/phy/fsl_backplane_serdes_28g.c
+++ b/drivers/net/phy/fsl_backplane_serdes_28g.c
@@ -10,6 +10,7 @@
 
 #include <linux/io.h>
 #include <linux/delay.h>
+#include <linux/sched.h>
 
 #include "fsl_backplane.h"
 
@@ -117,7 +118,7 @@ static void reset_lane(void *reg)
 {
 	struct per_lane_ctrl_status *reg_base = reg;
 	u32 val;
-	int timeout;
+	unsigned long timeout;
 
 	/* reset Tx lane: send reset request */
 	iowrite32(ioread32(&reg_base->trstctl) | RESET_REQ_MASK,
@@ -142,6 +143,13 @@ static void reset_lane(void *reg)
 			break;
 		usleep_range(5, 20);
 	}
+	
+	/* wait for a while after reset */
+	timeout = jiffies + 10;
+	while (time_before(jiffies, timeout)) {
+		schedule();
+		usleep_range(5, 20);
+	}
 }
 
 static void tune_tecr(void *reg, u32 ratio_preq, u32 ratio_pst1q, u32 adpt_eq, bool reset)
-- 
2.17.1

