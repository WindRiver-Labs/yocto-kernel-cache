From 4cdee81a9454c8b20ce1cb2169b78d64a3f3b09b Mon Sep 17 00:00:00 2001
From: "jiaheng.fan" <jiaheng.fan@nxp.com>
Date: Thu, 24 May 2018 17:56:51 +0800
Subject: [PATCH 056/741] dmaengine: nxp-dpaa2-qdma: fix qdma driver when CPU
 is running on Big Endian mode.

commit 88ddeb19365a76e8dbcaea0d78cd0183c40329f0 from
http://source.codeaurora.org/external/qoriq/qoriq-components/linux

Signed-off-by: jiaheng.fan <jiaheng.fan@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/dma/dpaa2-qdma/dpaa2-qdma.c | 76 +++++++++++++--------------
 drivers/dma/dpaa2-qdma/dpaa2-qdma.h | 47 +++--------------
 drivers/dma/dpaa2-qdma/dpdmai.c     | 80 +++++++++++++++++++++++++----
 3 files changed, 114 insertions(+), 89 deletions(-)

diff --git a/drivers/dma/dpaa2-qdma/dpaa2-qdma.c b/drivers/dma/dpaa2-qdma/dpaa2-qdma.c
index 700e49a5958c..975918b11269 100644
--- a/drivers/dma/dpaa2-qdma/dpaa2-qdma.c
+++ b/drivers/dma/dpaa2-qdma/dpaa2-qdma.c
@@ -97,10 +97,10 @@ dpaa2_qdma_request_desc(struct dpaa2_qdma_chan *dpaa2_chan)
 		comp_temp->fl_bus_addr = comp_temp->fd_bus_addr +
 					sizeof(struct dpaa2_fd);
 		comp_temp->desc_virt_addr =
-			(void *)((struct dpaa2_frame_list *)
+			(void *)((struct dpaa2_fl_entry *)
 				comp_temp->fl_virt_addr + 3);
 		comp_temp->desc_bus_addr = comp_temp->fl_bus_addr +
-				sizeof(struct dpaa2_frame_list) * 3;
+				sizeof(struct dpaa2_fl_entry) * 3;
 
 		comp_temp->qchan = dpaa2_chan;
 		comp_temp->sg_blk_num = 0;
@@ -127,19 +127,19 @@ static void dpaa2_qdma_populate_fd(uint32_t format,
 	memset(fd, 0, sizeof(struct dpaa2_fd));
 
 	/* fd populated */
-	fd->simple.addr = dpaa2_comp->fl_bus_addr;
+	dpaa2_fd_set_addr(fd, dpaa2_comp->fl_bus_addr);
 	/* Bypass memory translation, Frame list format, short length disable */
 	/* we need to disable BMT if fsl-mc use iova addr */
 	if (smmu_disable)
-		fd->simple.bpid = QMAN_FD_BMT_ENABLE;
-	fd->simple.format_offset = QMAN_FD_FMT_ENABLE | QMAN_FD_SL_DISABLE;
+		dpaa2_fd_set_bpid(fd, QMAN_FD_BMT_ENABLE);
+	dpaa2_fd_set_format(fd, QMAN_FD_FMT_ENABLE | QMAN_FD_SL_DISABLE);
 
-	fd->simple.frc = format | QDMA_SER_CTX;
+	dpaa2_fd_set_frc(fd, format | QDMA_SER_CTX);
 }
 
 /* first frame list for descriptor buffer */
 static void dpaa2_qdma_populate_first_framel(
-		struct dpaa2_frame_list *f_list,
+		struct dpaa2_fl_entry *f_list,
 		struct dpaa2_qdma_comp *dpaa2_comp)
 {
 	struct dpaa2_qdma_sd_d *sdd;
@@ -147,48 +147,45 @@ static void dpaa2_qdma_populate_first_framel(
 	sdd = (struct dpaa2_qdma_sd_d *)dpaa2_comp->desc_virt_addr;
 	memset(sdd, 0, 2 * (sizeof(*sdd)));
 	/* source and destination descriptor */
-	sdd->cmd = QDMA_SD_CMD_RDTTYPE_COHERENT; /* source descriptor CMD */
+	sdd->cmd = cpu_to_le32(QDMA_SD_CMD_RDTTYPE_COHERENT); /* source descriptor CMD */
 	sdd++;
-	sdd->cmd = QDMA_DD_CMD_WRTTYPE_COHERENT; /* dest descriptor CMD */
+	sdd->cmd = cpu_to_le32(QDMA_DD_CMD_WRTTYPE_COHERENT); /* dest descriptor CMD */
 
-	memset(f_list, 0, sizeof(struct dpaa2_frame_list));
+	memset(f_list, 0, sizeof(struct dpaa2_fl_entry));
 	/* first frame list to source descriptor */
-	f_list->addr_lo = dpaa2_comp->desc_bus_addr;
-	f_list->addr_hi = (dpaa2_comp->desc_bus_addr >> 32);
-	f_list->data_len.data_len_sl0 = 0x20; /* source/destination desc len */
-	f_list->fmt = QDMA_FL_FMT_SBF; /* single buffer frame */
+
+	dpaa2_fl_set_addr(f_list, dpaa2_comp->desc_bus_addr);
+	dpaa2_fl_set_len(f_list, 0x20);
+	dpaa2_fl_set_format(f_list, QDMA_FL_FMT_SBF | QDMA_FL_SL_LONG);
+
 	if (smmu_disable)
-		f_list->bmt = QDMA_FL_BMT_ENABLE; /* bypass memory translation */
-	f_list->sl = QDMA_FL_SL_LONG; /* long length */
-	f_list->f = 0; /* not the last frame list */
+		f_list->bpid = cpu_to_le16(QDMA_FL_BMT_ENABLE); /* bypass memory translation */
 }
 
 /* source and destination frame list */
-static void dpaa2_qdma_populate_frames(struct dpaa2_frame_list *f_list,
+static void dpaa2_qdma_populate_frames(struct dpaa2_fl_entry *f_list,
 		dma_addr_t dst, dma_addr_t src, size_t len, uint8_t fmt)
 {
 	/* source frame list to source buffer */
-	memset(f_list, 0, sizeof(struct dpaa2_frame_list));
-	f_list->addr_lo = src;
-	f_list->addr_hi = (src >> 32);
-	f_list->data_len.data_len_sl0 = len;
-	f_list->fmt = fmt; /* single buffer frame or scatter gather frame */
+	memset(f_list, 0, sizeof(struct dpaa2_fl_entry));
+
+
+	dpaa2_fl_set_addr(f_list, src);
+	dpaa2_fl_set_len(f_list, len);
+	dpaa2_fl_set_format(f_list, (fmt | QDMA_FL_SL_LONG)); /* single buffer frame or scatter gather frame */
 	if (smmu_disable)
-		f_list->bmt = QDMA_FL_BMT_ENABLE; /* bypass memory translation */
-	f_list->sl = QDMA_FL_SL_LONG; /* long length */
-	f_list->f = 0; /* not the last frame list */
+		f_list->bpid = cpu_to_le16(QDMA_FL_BMT_ENABLE); /* bypass memory translation */
 
 	f_list++;
 	/* destination frame list to destination buffer */
-	memset(f_list, 0, sizeof(struct dpaa2_frame_list));
-	f_list->addr_lo = dst;
-	f_list->addr_hi = (dst >> 32);
-	f_list->data_len.data_len_sl0 = len;
-	f_list->fmt = fmt; /* single buffer frame or scatter gather frame */
+	memset(f_list, 0, sizeof(struct dpaa2_fl_entry));
+
+	dpaa2_fl_set_addr(f_list, dst);
+	dpaa2_fl_set_len(f_list, len);
+	dpaa2_fl_set_format(f_list, (fmt | QDMA_FL_SL_LONG));
+	dpaa2_fl_set_final(f_list, QDMA_FL_F); /* single buffer frame or scatter gather frame */
 	if (smmu_disable)
-		f_list->bmt = QDMA_FL_BMT_ENABLE; /* bypass memory translation */
-	f_list->sl = QDMA_FL_SL_LONG; /* long length */
-	f_list->f = QDMA_FL_F; /* Final bit: 1, for last frame list */
+		f_list->bpid = cpu_to_le16(QDMA_FL_BMT_ENABLE); /* bypass memory translation */
 }
 
 static struct dma_async_tx_descriptor *dpaa2_qdma_prep_memcpy(
@@ -197,7 +194,7 @@ static struct dma_async_tx_descriptor *dpaa2_qdma_prep_memcpy(
 {
 	struct dpaa2_qdma_chan *dpaa2_chan = to_dpaa2_qdma_chan(chan);
 	struct dpaa2_qdma_comp *dpaa2_comp;
-	struct dpaa2_frame_list *f_list;
+	struct dpaa2_fl_entry *f_list;
 	uint32_t format;
 
 	dpaa2_comp = dpaa2_qdma_request_desc(dpaa2_chan);
@@ -210,7 +207,7 @@ static struct dma_async_tx_descriptor *dpaa2_qdma_prep_memcpy(
 	/* populate Frame descriptor */
 	dpaa2_qdma_populate_fd(format, dpaa2_comp);
 
-	f_list = (struct dpaa2_frame_list *)dpaa2_comp->fl_virt_addr;
+	f_list = (struct dpaa2_fl_entry *)dpaa2_comp->fl_virt_addr;
 
 #ifdef LONG_FORMAT
 	/* first frame list for descriptor buffer (logn format) */
@@ -532,7 +529,8 @@ static void dpaa2_qdma_fqdan_cb(struct dpaa2_io_notification_ctx *ctx)
 
 		/* obtain FD and process the error */
 		fd = dpaa2_dq_fd(dq);
-		status = fd->simple.ctrl & 0xff;
+
+		status = dpaa2_fd_get_ctrl(fd) & 0xff;
 		if (status)
 			dev_err(priv->dev, "FD error occurred\n");
 		found = 0;
@@ -548,8 +546,8 @@ static void dpaa2_qdma_fqdan_cb(struct dpaa2_io_notification_ctx *ctx)
 				fd_eq = (struct dpaa2_fd *)
 					dpaa2_comp->fd_virt_addr;
 
-				if (fd_eq->simple.addr ==
-					fd->simple.addr) {
+				if (le64_to_cpu(fd_eq->simple.addr) ==
+						le64_to_cpu(fd->simple.addr)) {
 
 					list_del(&dpaa2_comp->list);
 					list_add_tail(&dpaa2_comp->list,
diff --git a/drivers/dma/dpaa2-qdma/dpaa2-qdma.h b/drivers/dma/dpaa2-qdma/dpaa2-qdma.h
index 71a00db87a88..d775b5c01a94 100644
--- a/drivers/dma/dpaa2-qdma/dpaa2-qdma.h
+++ b/drivers/dma/dpaa2-qdma/dpaa2-qdma.h
@@ -99,7 +99,7 @@ struct dpaa2_qdma_sg {
 	} ctrl;
 } __attribute__((__packed__));
 
-#define QMAN_FD_FMT_ENABLE (1 << 12) /* frame list table enable */
+#define QMAN_FD_FMT_ENABLE (1) /* frame list table enable */
 #define QMAN_FD_BMT_ENABLE (1 << 15) /* bypass memory translation */
 #define QMAN_FD_BMT_DISABLE (0 << 15) /* bypass memory translation */
 #define QMAN_FD_SL_DISABLE (0 << 14) /* short lengthe disabled */
@@ -124,49 +124,14 @@ struct dpaa2_qdma_sg {
 #define QMAN_FD_CBMT_DISABLE (0 << 15) /* Flow Context: 64bit virtual address */
 #define QMAN_FD_SC_DISABLE (0 << 27) /* stashing control */
 
-#define QDMA_FL_FMT_SBF 0x0	/* Single buffer frame */
+#define QDMA_FL_FMT_SBF (0x0) /* Single buffer frame */
 #define QDMA_FL_FMT_SGE 0x2 /* Scatter gather frame */
-#define QDMA_FL_BMT_ENABLE 0x1 /* enable bypass memory translation */
+#define QDMA_FL_BMT_ENABLE (0x1 << 15)/* enable bypass memory translation */
 #define QDMA_FL_BMT_DISABLE 0x0 /* enable bypass memory translation */
-#define QDMA_FL_SL_LONG 0x0 /* long length */
+#define QDMA_FL_SL_LONG (0x0 << 2)/* long length */
 #define QDMA_FL_SL_SHORT 0x1 /* short length */
-#define QDMA_FL_F 0x1 /* last frame list bit */
+#define QDMA_FL_F (0x1)/* last frame list bit */
 /*Description of Frame list table structure*/
-struct dpaa2_frame_list  {
-	uint32_t addr_lo;	/* lower 32 bits of address */
-	uint32_t addr_hi:17; /* upper 17 bits of address */
-	uint32_t resrvd:15;
-	union {
-		uint32_t data_len_sl0; /* If SL=0, then data length is 32 */
-		struct {
-			uint32_t data_len:18; /* IF SL=1; length is 18bit */
-			uint32_t resrvd:2;
-			uint32_t mem:12; /* Valid only when SL=1 */
-		} data_len_sl1;
-	} data_len;
-	/* word 4 */
-	uint32_t bpid:14; /* Frame buffer pool ID */
-	uint32_t ivp:1; /* Invalid Pool ID. */
-	uint32_t bmt:1; /* Bypass Memory Translation */
-	uint32_t offset:12; /* Frame offset */
-	uint32_t fmt:2; /* Frame Format */
-	uint32_t sl:1; /* Short Length */
-	uint32_t f:1; /* Final bit */
-
-	uint32_t frc; /* Frame Context */
-	/* word 6 */
-	uint32_t err:8; /* Frame errors */
-	uint32_t resrvd0:8;
-	uint32_t asal:4; /* accelerator-specific annotation length */
-	uint32_t resrvd1:1;
-	uint32_t ptv2:1;
-	uint32_t ptv1:1;
-	uint32_t pta:1; /* pass-through annotation */
-	uint32_t resrvd2:8;
-
-	uint32_t flc_lo; /* lower 32 bits fo flow context */
-	uint32_t flc_hi; /* higher 32 bits fo flow context */
-} __attribute__((__packed__));
 
 struct dpaa2_qdma_chan {
 	struct virt_dma_chan		vchan;
@@ -253,7 +218,7 @@ struct dpaa2_qdma_priv_per_prio {
 
 /* FD pool size: one FD + 3 Frame list + 2 source/destination descriptor */
 #define FD_POOL_SIZE (sizeof(struct dpaa2_fd) + \
-		sizeof(struct dpaa2_frame_list) * 3 + \
+		sizeof(struct dpaa2_fl_entry) * 3 + \
 		sizeof(struct dpaa2_qdma_sd_d) * 2)
 
 /* qdma_sg_blk + 16 SGs */
diff --git a/drivers/dma/dpaa2-qdma/dpdmai.c b/drivers/dma/dpaa2-qdma/dpdmai.c
index 8fd4a45b69e0..0601a6bc5a4a 100644
--- a/drivers/dma/dpaa2-qdma/dpdmai.c
+++ b/drivers/dma/dpaa2-qdma/dpdmai.c
@@ -35,19 +35,54 @@
 #include "fsl_dpdmai_cmd.h"
 #include <linux/fsl/mc.h>
 
+struct dpdmai_cmd_open {
+	__le32 dpdmai_id;
+};
+
+struct dpdmai_rsp_get_attributes {
+	__le32 id;
+	u8 num_of_priorities;
+	u8 pad0[3];
+	__le16 major;
+	__le16 minor;
+};
+
+
+struct dpdmai_cmd_queue {
+	__le32 dest_id;
+	u8 priority;
+	u8 queue;
+	u8 dest_type;
+	u8 pad;
+	__le64 user_ctx;
+	union {
+		__le32 options;
+		__le32 fqid;
+	};
+};
+
+struct dpdmai_rsp_get_tx_queue {
+	__le64 pad;
+	__le32 fqid;
+};
+
+
 int dpdmai_open(struct fsl_mc_io *mc_io,
 		uint32_t cmd_flags,
 		int dpdmai_id,
 		uint16_t *token)
 {
 	struct fsl_mc_command cmd = { 0 };
+	struct dpdmai_cmd_open *cmd_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPDMAI_CMDID_OPEN,
 					  cmd_flags,
 					  0);
-	DPDMAI_CMD_OPEN(cmd, dpdmai_id);
+
+	cmd_params = (struct dpdmai_cmd_open *)cmd.params;
+	cmd_params->dpdmai_id = cpu_to_le32(dpdmai_id);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -55,8 +90,7 @@ int dpdmai_open(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	*token = MC_CMD_HDR_READ_TOKEN(cmd.header);
-
+	*token = mc_cmd_hdr_read_token(&cmd);
 	return 0;
 }
 
@@ -366,6 +400,7 @@ int dpdmai_get_attributes(struct fsl_mc_io *mc_io,
 {
 	struct fsl_mc_command cmd = { 0 };
 	int err;
+	struct dpdmai_rsp_get_attributes *rsp_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPDMAI_CMDID_GET_ATTR,
@@ -378,7 +413,12 @@ int dpdmai_get_attributes(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPDMAI_RSP_GET_ATTR(cmd, attr);
+	rsp_params = (struct dpdmai_rsp_get_attributes *)cmd.params;
+	attr->id = le32_to_cpu(rsp_params->id);
+	attr->version.major = le16_to_cpu(rsp_params->major);
+	attr->version.minor = le16_to_cpu(rsp_params->minor);
+	attr->num_of_priorities = rsp_params->num_of_priorities;
+
 
 	return 0;
 }
@@ -390,12 +430,21 @@ int dpdmai_set_rx_queue(struct fsl_mc_io *mc_io,
 			const struct dpdmai_rx_queue_cfg *cfg)
 {
 	struct fsl_mc_command cmd = { 0 };
+	struct dpdmai_cmd_queue *cmd_params;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPDMAI_CMDID_SET_RX_QUEUE,
 					  cmd_flags,
 					  token);
-	DPDMAI_CMD_SET_RX_QUEUE(cmd, priority, cfg);
+
+	cmd_params = (struct dpdmai_cmd_queue *)cmd.params;
+	cmd_params->dest_id = cpu_to_le32(cfg->dest_cfg.dest_id);
+	cmd_params->priority = cfg->dest_cfg.priority;
+	cmd_params->queue = priority;
+	cmd_params->dest_type = cfg->dest_cfg.dest_type;
+	cmd_params->user_ctx = cpu_to_le64(cfg->user_ctx);
+	cmd_params->options = cpu_to_le32(cfg->options);
+
 
 	/* send command to mc*/
 	return mc_send_command(mc_io, &cmd);
@@ -407,13 +456,16 @@ int dpdmai_get_rx_queue(struct fsl_mc_io *mc_io,
 			uint8_t priority, struct dpdmai_rx_queue_attr *attr)
 {
 	struct fsl_mc_command cmd = { 0 };
+	struct dpdmai_cmd_queue *cmd_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPDMAI_CMDID_GET_RX_QUEUE,
 					  cmd_flags,
 					  token);
-	DPDMAI_CMD_GET_RX_QUEUE(cmd, priority);
+
+	cmd_params = (struct dpdmai_cmd_queue *)cmd.params;
+	cmd_params->queue = priority;
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -421,7 +473,11 @@ int dpdmai_get_rx_queue(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPDMAI_RSP_GET_RX_QUEUE(cmd, attr);
+	attr->dest_cfg.dest_id = le32_to_cpu(cmd_params->dest_id);
+	attr->dest_cfg.priority = cmd_params->priority;
+	attr->dest_cfg.dest_type = cmd_params->dest_type;
+	attr->user_ctx = le64_to_cpu(cmd_params->user_ctx);
+	attr->fqid = le32_to_cpu(cmd_params->fqid);
 
 	return 0;
 }
@@ -433,13 +489,17 @@ int dpdmai_get_tx_queue(struct fsl_mc_io *mc_io,
 			struct dpdmai_tx_queue_attr *attr)
 {
 	struct fsl_mc_command cmd = { 0 };
+	struct dpdmai_cmd_queue *cmd_params;
+	struct dpdmai_rsp_get_tx_queue *rsp_params;
 	int err;
 
 	/* prepare command */
 	cmd.header = mc_encode_cmd_header(DPDMAI_CMDID_GET_TX_QUEUE,
 					  cmd_flags,
 					  token);
-	DPDMAI_CMD_GET_TX_QUEUE(cmd, priority);
+
+	cmd_params = (struct dpdmai_cmd_queue *)cmd.params;
+	cmd_params->queue = priority;
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -447,7 +507,9 @@ int dpdmai_get_tx_queue(struct fsl_mc_io *mc_io,
 		return err;
 
 	/* retrieve response parameters */
-	DPDMAI_RSP_GET_TX_QUEUE(cmd, attr);
+
+	rsp_params = (struct dpdmai_rsp_get_tx_queue *)cmd.params;
+	attr->fqid = le32_to_cpu(rsp_params->fqid);
 
 	return 0;
 }
-- 
2.17.1

