From 320c5eb7273035bb77f8d910c77ee04830862484 Mon Sep 17 00:00:00 2001
From: Camelia Groza <camelia.groza@nxp.com>
Date: Mon, 15 Jan 2018 17:42:42 +0200
Subject: [PATCH 184/741] sdk_dpaa: update comments about recycling and
 back-pointer storage

commit 85ec43113e2408455726d4133b5eea6c26800f57 from
http://source.codeaurora.org/external/qoriq/qoriq-components/linux

Signed-off-by: Camelia Groza <camelia.groza@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 .../ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c  | 18 ++++++++++++++++--
 1 file changed, 16 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
index f73743986183..138919aad93d 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
@@ -121,6 +121,10 @@ static int _dpa_bp_add_8_bufs(const struct dpa_bp *dpa_bp)
 			put_page(virt_to_head_page(new_buf));
 			goto build_skb_failed;
 		}
+
+		/* Store the skb back-pointer before the start of the buffer.
+		 * Otherwise it will be overwritten by the FMan.
+		 */
 		DPA_WRITE_SKB_PTR(skb, skbh, new_buf, -1);
 
 		addr = dma_map_single(dev, new_buf,
@@ -344,7 +348,10 @@ bool dpa_buf_is_recyclable(struct sk_buff *skb,
 	 * - buffer address aligned to cacheline bytes
 	 * - offset of data from start of buffer no lower than a minimum value
 	 * - offset of data from start of buffer no higher than a maximum value
+	 * - the skb back-pointer is stored safely
 	 */
+
+	/* guarantee both the minimum size and the minimum data offset */
 	new = min(skb_end_pointer(skb) - min_size, skb->data - min_offset);
 
 	/* left align to the nearest cacheline */
@@ -694,6 +701,9 @@ int __hot skb_to_contig_fd(struct dpa_priv_s *priv,
 		dma_dir = DMA_BIDIRECTIONAL;
 		dma_map_size = dpa_bp->size;
 
+		/* Store the skb back-pointer before the start of the buffer.
+		 * Otherwise it will be overwritten by the FMan.
+		 */
 		DPA_WRITE_SKB_PTR(skb, skbh, buffer_start, -1);
 		*offset = skb_headroom(skb) - fd->offset;
 	} else
@@ -711,7 +721,7 @@ int __hot skb_to_contig_fd(struct dpa_priv_s *priv,
 
 		/* The buffer will be Tx-confirmed, but the TxConf cb must
 		 * necessarily look at our Tx private data to retrieve the
-		 * skbuff. (In short: can't use DPA_WRITE_SKB_PTR() here.)
+		 * skbuff. Store the back-pointer inside the buffer.
 		 */
 		DPA_WRITE_SKB_PTR(skb, skbh, buffer_start, 0);
 	}
@@ -975,7 +985,11 @@ int __hot skb_to_sg_fd(struct dpa_priv_s *priv,
 	fd->length20 = skb->len;
 	fd->offset = priv->tx_headroom;
 
-	/* DMA map the SGT page */
+	/* DMA map the SGT page
+	 *
+	 * It's safe to store the skb back-pointer inside the buffer since
+	 * S/G frames are non-recyclable.
+	 */
 	DPA_WRITE_SKB_PTR(skb, skbh, sgt_buf, 0);
 	addr = dma_map_single(dpa_bp->dev, sgt_buf,
 			      priv->tx_headroom + sgt_size,
-- 
2.17.1

