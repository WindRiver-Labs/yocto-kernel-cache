From f5c30cc4dcca0f77246870de4b6495416e293e1c Mon Sep 17 00:00:00 2001
From: Bogdan Purcareata <bogdan.purcareata@nxp.com>
Date: Thu, 7 Dec 2017 11:46:13 +0200
Subject: [PATCH 090/741] dpaa2-eth: PFC cleanup and refactor

commit 5f94ef145e66550db243064706b7772cf44dd62f from
http://source.codeaurora.org/external/qoriq/qoriq-components/linux

- in setpfc, zero out unavailable traffic classes
- restore driver old pfc config in case of congeestion / taildrop setup
  failures
- fix PFC capable traffic classes nitpick
- add debug prints along the PFC setup routine

Signed-off-by: Bogdan Purcareata <bogdan.purcareata@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 .../net/ethernet/freescale/dpaa2/dpaa2-eth.c  | 44 +++++++++++++------
 1 file changed, 31 insertions(+), 13 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpaa2/dpaa2-eth.c b/drivers/net/ethernet/freescale/dpaa2/dpaa2-eth.c
index 3285d4d9c595..a418e0150791 100644
--- a/drivers/net/ethernet/freescale/dpaa2/dpaa2-eth.c
+++ b/drivers/net/ethernet/freescale/dpaa2/dpaa2-eth.c
@@ -2588,12 +2588,6 @@ static int setup_rx_flow(struct dpaa2_eth_priv *priv,
 	return 0;
 }
 
-/* Enable/disable Rx FQ taildrop
- *
- * Rx FQ taildrop is mutually exclusive with flow control and it only gets
- * disabled when FC is active.
- */
-int set_rx_taildrop(struct dpaa2_eth_priv *priv, bool enable)
 static int set_queue_taildrop(struct dpaa2_eth_priv *priv,
 		              struct dpni_taildrop *td)
 {
@@ -2603,6 +2597,7 @@ static int set_queue_taildrop(struct dpaa2_eth_priv *priv,
         for (i = 0; i < priv->num_fqs; i++) {
                 if (priv->fq[i].type != DPAA2_RX_FQ)
                         continue;
+
                 err = dpni_set_taildrop(priv->mc_io, 0, priv->mc_token,
 					DPNI_CP_QUEUE, DPNI_QUEUE_RX,
 					priv->fq[i].tc, priv->fq[i].flowid,
@@ -2611,6 +2606,10 @@ static int set_queue_taildrop(struct dpaa2_eth_priv *priv,
 			dev_err(dev, "dpni_set_taildrop() failed (%d)\n", err);
                         return err;
 		}
+
+                dev_dbg(dev, "%s taildrop for Rx queue id %d tc %d\n",
+                        (td->enable ? "Enabled" : "Disabled"),
+                        priv->fq[i].flowid, priv->fq[i].tc);
         }
 
 	return 0;
@@ -2642,6 +2641,10 @@ static int set_group_taildrop(struct dpaa2_eth_priv *priv,
                         dev_err(dev, "dpni_set_taildrop() failed (%d)\n", err);
                         return err;
                 }
+
+		dev_dbg(dev, "%s taildrop for Rx group tc %d\n",
+			(tc_td->enable ? "Enabled" : "Disabled"),
+			i);
         }
 
         return 0;
@@ -3544,10 +3547,8 @@ static int dpaa2_eth_dcbnl_ieee_getpfc(struct net_device *net_dev,
 {
 	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
 
-	pfc->pfc_cap = dpaa2_eth_tc_count(priv);
-	pfc->pfc_en = priv->pfc.pfc_en;
-	pfc->mbc = priv->pfc.mbc;
-	pfc->delay = priv->pfc.delay;
+	priv->pfc.pfc_cap = dpaa2_eth_tc_count(priv);
+	memcpy(pfc, &priv->pfc, sizeof(priv->pfc));
 
 	return 0;
 }
@@ -3674,6 +3675,7 @@ static int dpaa2_eth_dcbnl_ieee_setpfc(struct net_device *net_dev,
 	struct dpni_congestion_notification_cfg notification_cfg = {0};
 	struct dpni_link_state state = {0};
 	struct dpni_link_cfg cfg = {0};
+	struct ieee_pfc old_pfc;
 	int err = 0, i;
 
 	if (dpaa2_eth_tc_count(priv) == 1) {
@@ -3681,6 +3683,9 @@ static int dpaa2_eth_dcbnl_ieee_setpfc(struct net_device *net_dev,
 		return 0;
 	}
 
+	/* Zero out pfc_enabled prios greater than tc_count */
+	pfc->pfc_en &= (1 << dpaa2_eth_tc_count(priv)) - 1;
+
 	if (priv->pfc.pfc_en == pfc->pfc_en)
 		/* Same enabled mask, nothing to be done */
 		return 0;
@@ -3708,11 +3713,12 @@ static int dpaa2_eth_dcbnl_ieee_setpfc(struct net_device *net_dev,
 		return err;
 	}
 
+	memcpy(&old_pfc, &priv->pfc, sizeof(priv->pfc));
 	memcpy(&priv->pfc, pfc, sizeof(priv->pfc));
 
 	err = set_rx_taildrop(priv);
 	if (err)
-		return err;
+		goto out_restore_config;
 
 	/* configure congestion notifications */
 	notification_cfg.notification_mode = DPNI_CONG_OPT_FLOW_CONTROL;
@@ -3736,11 +3742,19 @@ static int dpaa2_eth_dcbnl_ieee_setpfc(struct net_device *net_dev,
 		if (err) {
 			netdev_err(net_dev, "Error %d setting congestion notif",
 				   err);
-			return err;
+			goto out_restore_config;
 		}
+
+		netdev_dbg(net_dev, "%s congestion notifications for tc %d\n",
+			   (notification_cfg.threshold_entry ?
+			    "Enabled" : "Disabled"), i);
 	}
 
 	return 0;
+
+out_restore_config:
+	memcpy(&priv->pfc, &old_pfc, sizeof(priv->pfc));
+	return err;
 }
 
 static u8 dpaa2_eth_dcbnl_getdcbx(struct net_device *net_dev)
@@ -3767,7 +3781,11 @@ static u8 dpaa2_eth_dcbnl_getcap(struct net_device *net_dev, int capid, u8 *cap)
 		*cap = true;
 		break;
 	case DCB_CAP_ATTR_PFC_TCS:
-		*cap = 1 << dpaa2_eth_tc_count(priv);
+		/* bitmap where each bit represents a number of traffic
+		 * classes the device can be configured to use for Priority
+		 * Flow Control
+		 */
+		*cap = 1 << (dpaa2_eth_tc_count(priv) - 1);
 		break;
 	case DCB_CAP_ATTR_DCBX:
 		*cap = priv->dcbx_mode;
-- 
2.17.1

