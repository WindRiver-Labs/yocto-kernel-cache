From 28826e612be0f25c2021f593e9bc3364a5066360 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Horia=20Geant=C4=83?= <horia.geanta@nxp.com>
Date: Tue, 31 Jul 2018 12:42:54 +0300
Subject: [PATCH 428/741] crypto: caam/jr - fix S/G table passing page boundary
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

commit ee240f9957cc25dd4e9311eeddadb090a6ac776a from
http://source.codeaurora.org/external/qoriq/qoriq-components/linux

According to CAAM RM:
-crypto engine reads 4 S/G entries at a time, even if the S/G table
has fewer entries
-it's the responsibility of the user / programmer to make sure
this HW behaviour has no side effect

The driver does not take care of this currently, leading to IOMMU faults
when the S/G table ends close to a page boundary - since only one page
is DMA mapped, while CAAM's DMA engine accesses two pages.

Fix this by rounding up the number of allocted S/G table entries
to a multiple of 4.

Signed-off-by: Horia GeantÄƒ <horia.geanta@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/crypto/caam/caamalg.c | 30 ++++++++++++++++++++++++++++--
 1 file changed, 28 insertions(+), 2 deletions(-)

diff --git a/drivers/crypto/caam/caamalg.c b/drivers/crypto/caam/caamalg.c
index af9e473abdfd..657af503a689 100644
--- a/drivers/crypto/caam/caamalg.c
+++ b/drivers/crypto/caam/caamalg.c
@@ -1382,8 +1382,16 @@ static struct aead_edesc *aead_edesc_alloc(struct aead_request *req,
 		}
 	}
 
+	/*
+	 * HW reads 4 S/G entries at a time; make sure the reads don't go beyond
+	 * the end of the table by allocating more S/G entries.
+	 */
 	sec4_sg_len = mapped_src_nents > 1 ? mapped_src_nents : 0;
-	sec4_sg_len += mapped_dst_nents > 1 ? mapped_dst_nents : 0;
+	if (mapped_dst_nents > 1)
+		sec4_sg_len += ALIGN(mapped_dst_nents, 4);
+	else
+		sec4_sg_len = ALIGN(sec4_sg_len, 4);
+
 	sec4_sg_bytes = sec4_sg_len * sizeof(struct sec4_sg_entry);
 
 	/* allocate space for base edesc and hw desc commands, link tables */
@@ -1721,7 +1729,25 @@ static struct skcipher_edesc *skcipher_edesc_alloc(struct skcipher_request *req,
 	else
 		sec4_sg_ents = mapped_src_nents + !!ivsize;
 	dst_sg_idx = sec4_sg_ents;
-	sec4_sg_ents += mapped_dst_nents > 1 ? mapped_dst_nents : 0;
+
+        /*
+         * HW reads 4 S/G entries at a time; make sure the reads don't go beyond
+         * the end of the table by allocating more S/G entries. Logic:
+         * if (src != dst && output S/G)
+         *      pad output S/G, if needed
+         * else if (src == dst && S/G)
+         *      overlapping S/Gs; pad one of them
+         * else if (input S/G) ...
+         *      pad input S/G, if needed
+         */
+        if (mapped_dst_nents > 1)
+                sec4_sg_ents += ALIGN(mapped_dst_nents, 4);
+        else if ((req->src == req->dst) && (mapped_src_nents > 1))
+                sec4_sg_ents = max(ALIGN(sec4_sg_ents, 4),
+                                   1 + ALIGN(mapped_src_nents, 4));
+        else
+                sec4_sg_ents = ALIGN(sec4_sg_ents, 4);
+	
 	sec4_sg_bytes = sec4_sg_ents * sizeof(struct sec4_sg_entry);
 
 	/*
-- 
2.17.1

