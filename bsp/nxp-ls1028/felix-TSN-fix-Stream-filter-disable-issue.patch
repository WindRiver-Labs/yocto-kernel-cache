From 9911bee9bb64c25bba39230adebb5b5021473455 Mon Sep 17 00:00:00 2001
From: Xiaoliang Yang <xiaoliang.yang_1@nxp.com>
Date: Fri, 23 Aug 2019 13:55:53 +0800
Subject: [PATCH 657/741] felix: TSN: fix Stream filter disable issue

commit 8019f003bf51643c3579f4c9703c506db450398c from
http://source.codeaurora.org/external/qoriq/qoriq-components/linux

Stream filter disable set does not support 'streamhandle' and 'dest_mac'
parameters in TSN framework, need to use 'index' parameter to find the
policy and disable it.

Signed-off-by: Xiaoliang Yang <xiaoliang.yang_1@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/net/ethernet/mscc/felix_tsn.c | 46 +++++++++++++++++----------
 1 file changed, 29 insertions(+), 17 deletions(-)

diff --git a/drivers/net/ethernet/mscc/felix_tsn.c b/drivers/net/ethernet/mscc/felix_tsn.c
index 3873902383a7..6041c2c26ac2 100644
--- a/drivers/net/ethernet/mscc/felix_tsn.c
+++ b/drivers/net/ethernet/mscc/felix_tsn.c
@@ -661,6 +661,7 @@ int felix_cb_streamid_set(struct net_device *ndev, u32 index, bool enable,
 {
 	struct ocelot_port *port = netdev_priv(ndev);
 	struct ocelot *ocelot = port->ocelot;
+	struct regmap_field *rf;
 	u16 vid;
 	u64 mac;
 	u32 macl, mach;
@@ -670,6 +671,34 @@ int felix_cb_streamid_set(struct net_device *ndev, u32 index, bool enable,
 	int sfid, ssid;
 	u32 m_index, bucket;
 
+	if (!enable) {
+		if (index >= MSCC_STREAM_HANDLE_NUM) {
+			netdev_info(ndev,
+				    "Invalid index %u, maximum:%u\n",
+				    index, MSCC_STREAM_HANDLE_NUM - 1);
+			return -EINVAL;
+		}
+		m_index = streamhandle_map[index] / 4;
+		bucket =  streamhandle_map[index] % 4;
+		rf = ocelot->regfields[ANA_TABLES_MACTINDX_BUCKET];
+		regmap_field_write(rf, bucket);
+		rf = ocelot->regfields[ANA_TABLES_MACTINDX_M_INDEX];
+		regmap_field_write(rf, m_index);
+
+		/*READ command MACACCESS.VALID(11 bit) must be 0 */
+		ocelot_write(ocelot,
+			     ANA_TABLES_MACACCESS_MAC_TABLE_CMD(MACACCESS_CMD_READ),
+			     ANA_TABLES_MACACCESS);
+
+		ocelot_write(ocelot,
+			     ANA_TABLES_MACACCESS_MAC_TABLE_CMD(MACACCESS_CMD_FORGET),
+			     ANA_TABLES_MACACCESS);
+
+		streamhandle_map[index] = 0;
+
+		return 0;
+	}
+
 	if (streamid->type != 1) {
 		netdev_info(ndev, "Invalid stream type\n");
 		return -EINVAL;
@@ -692,23 +721,6 @@ int felix_cb_streamid_set(struct net_device *ndev, u32 index, bool enable,
 
 	idx = lookup_mactable(ocelot, vid, mac);
 
-	if (!enable) {
-		netdev_info(ndev, "Disable stream set\n");
-		ocelot_write(ocelot, macl, ANA_TABLES_MACLDATA);
-		ocelot_write(ocelot, ANA_TABLES_MACHDATA_VID(vid) |
-			     ANA_TABLES_MACHDATA_MACHDATA(mach),
-			     ANA_TABLES_MACHDATA);
-
-		ocelot_write(ocelot,
-			     ANA_TABLES_MACACCESS_MAC_TABLE_CMD(MACACCESS_CMD_FORGET),
-			     ANA_TABLES_MACACCESS);
-
-		if (idx >= 0)
-			streamhandle_map[streamid->handle] = 0;
-
-		return 0;
-	}
-
 	if (idx < 0) {
 		ocelot_write(ocelot, macl, ANA_TABLES_MACLDATA);
 		ocelot_write(ocelot, ANA_TABLES_MACHDATA_VID(vid) |
-- 
2.17.1

