From 4e19cae1b7c6165b59093da02e413d8157a41d75 Mon Sep 17 00:00:00 2001
From: Bogdan Purcareata <bogdan.purcareata@nxp.com>
Date: Tue, 8 Aug 2017 12:11:25 +0000
Subject: [PATCH 087/741] dpaa2-eth: Refactor fq taildrop setup

commit a99b5c700b502914892a1170243199c1b24a2573 from
http://source.codeaurora.org/external/qoriq/qoriq-components/linux

With the introduction of PFC support, there are multiple ways taildrop
is configured, based on the DPNI pause frame configuration:
- no pause frames - per-queue taildrop thresholds.
- pause frames - no taildrop thresholds (pause frames sent based on
  buffer depletion).
- PFC pause frames - per-group (traffic class) taildrop thresholds for
  non-PFC enabled priorities (pause frames sent based on Rx congestion
  notifications).

Refactor the fq taildrop setup area.

Signed-off-by: Bogdan Purcareata <bogdan.purcareata@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 .../net/ethernet/freescale/dpaa2/dpaa2-eth.c  | 91 +++++++++++++++++--
 .../net/ethernet/freescale/dpaa2/dpaa2-eth.h  | 28 +++++-
 .../ethernet/freescale/dpaa2/dpaa2-ethtool.c  |  3 +-
 3 files changed, 114 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpaa2/dpaa2-eth.c b/drivers/net/ethernet/freescale/dpaa2/dpaa2-eth.c
index d0d821279085..c9a18f3631c9 100644
--- a/drivers/net/ethernet/freescale/dpaa2/dpaa2-eth.c
+++ b/drivers/net/ethernet/freescale/dpaa2/dpaa2-eth.c
@@ -2505,6 +2505,7 @@ static int setup_dpni(struct fsl_mc_device *ls_dev)
 
 	/* Enable flow control */
 	cfg.options = DPNI_LINK_OPT_AUTONEG | DPNI_LINK_OPT_PAUSE;
+	priv->tx_pause_frames = true;
 	err = dpni_set_link_cfg(priv->mc_io, 0, priv->mc_token, &cfg);
 	if (err) {
 		dev_err(dev, "dpni_set_link_cfg() failed\n");
@@ -2593,28 +2594,106 @@ static int setup_rx_flow(struct dpaa2_eth_priv *priv,
  * disabled when FC is active.
  */
 int set_rx_taildrop(struct dpaa2_eth_priv *priv, bool enable)
+static int set_queue_taildrop(struct dpaa2_eth_priv *priv,
+		              struct dpni_taildrop *td)
 {
-        struct dpni_taildrop td = {0};
+	struct device *dev = priv->net_dev->dev.parent;
         int i, err;
 
-        td.enable = enable;
-        td.threshold = DPAA2_ETH_TAILDROP_THRESH;
-
         for (i = 0; i < priv->num_fqs; i++) {
                 if (priv->fq[i].type != DPAA2_RX_FQ)
                         continue;
                 err = dpni_set_taildrop(priv->mc_io, 0, priv->mc_token,
 					DPNI_CP_QUEUE, DPNI_QUEUE_RX,
 					priv->fq[i].tc, priv->fq[i].flowid,
-					&td);
-                if (err)
+					td);
+                if (err) {
+			dev_err(dev, "dpni_set_taildrop() failed (%d)\n", err);
                         return err;
+		}
         }
 
 	return 0;
 
 }
 
+static int set_group_taildrop(struct dpaa2_eth_priv *priv,
+                              struct dpni_taildrop *td)
+{
+        struct device *dev = priv->net_dev->dev.parent;
+        struct dpni_taildrop disable_td, *tc_td;
+        int i, err;
+
+        memset(&disable_td, 0, sizeof(struct dpni_taildrop));
+        for (i = 0; i < dpaa2_eth_tc_count(priv); i++) {
+                if (td->enable && dpaa2_eth_is_pfc_enabled(priv, i))
+                        /* Do not set taildrop thresholds for PFC-enabled
+                         * traffic classes. We will enable congestion
+                         * notifications for them.
+                         */
+                        tc_td = &disable_td;
+                else
+                        tc_td = td;
+
+                err = dpni_set_taildrop(priv->mc_io, 0, priv->mc_token,
+                                        DPNI_CP_GROUP, DPNI_QUEUE_RX,
+                                        i, 0, tc_td);
+                if (err) {
+                        dev_err(dev, "dpni_set_taildrop() failed (%d)\n", err);
+                        return err;
+                }
+        }
+
+        return 0;
+}
+
+/* Enable/disable Rx FQ taildrop
+ *
+ * Rx FQ taildrop is mutually exclusive with flow control and it only gets
+ * disabled when FC is active. Depending on FC status, we need to compute
+ * the maximum number of buffers in the pool differently, so use the
+ * opportunity to update max number of buffers as well.
+ */
+int set_rx_taildrop(struct dpaa2_eth_priv *priv)
+{
+        enum dpaa2_eth_td_cfg cfg = dpaa2_eth_get_td_type(priv);
+        struct dpni_taildrop td_queue, td_group;
+        int err = 0;
+ 
+        switch (cfg) {
+        case DPAA2_ETH_TD_NONE:
+                memset(&td_queue, 0, sizeof(struct dpni_taildrop));
+                memset(&td_group, 0, sizeof(struct dpni_taildrop));
+                break;
+        case DPAA2_ETH_TD_QUEUE:
+                memset(&td_group, 0, sizeof(struct dpni_taildrop));
+                td_queue.enable = 1;
+                td_queue.units = DPNI_CONGESTION_UNIT_BYTES;
+                td_queue.threshold = DPAA2_ETH_TAILDROP_THRESH /
+                                     dpaa2_eth_tc_count(priv);
+                break;
+        case DPAA2_ETH_TD_GROUP:
+                memset(&td_queue, 0, sizeof(struct dpni_taildrop));
+                td_group.enable = 1;
+                td_group.units = DPNI_CONGESTION_UNIT_FRAMES;
+                td_group.threshold = NAPI_POLL_WEIGHT *
+                                     dpaa2_eth_queue_count(priv);
+                break;
+        default:
+                break;
+        }
+
+        err = set_queue_taildrop(priv, &td_queue);
+        if (err)
+                return err;
+
+        err = set_group_taildrop(priv, &td_group);
+        if (err)
+                return err;
+
+        return 0;
+}
+
 static int setup_tx_flow(struct dpaa2_eth_priv *priv,
 			 struct dpaa2_eth_fq *fq)
 {
diff --git a/drivers/net/ethernet/freescale/dpaa2/dpaa2-eth.h b/drivers/net/ethernet/freescale/dpaa2/dpaa2-eth.h
index e45a13353896..49fbae546924 100644
--- a/drivers/net/ethernet/freescale/dpaa2/dpaa2-eth.h
+++ b/drivers/net/ethernet/freescale/dpaa2/dpaa2-eth.h
@@ -419,6 +419,7 @@ struct dpaa2_eth_priv {
 	u8 dcbx_mode;
 	struct ieee_pfc pfc;
 	bool vlan_clsf_set;
+	bool tx_pause_frames;
 };
 
 #define DPAA2_RXH_SUPPORTED	(RXH_L2DA | RXH_VLAN | RXH_L3_PROTO \
@@ -522,12 +523,37 @@ static inline unsigned int dpaa2_eth_rx_head_room(struct dpaa2_eth_priv *priv)
 	return priv->tx_data_offset - DPAA2_ETH_RX_HWA_SIZE;
 }
 
+static inline bool dpaa2_eth_is_pfc_enabled(struct dpaa2_eth_priv *priv,
+                                           int traffic_class)
+{
+       return priv->pfc.pfc_en & (1 << traffic_class);
+}
+
+enum dpaa2_eth_td_cfg {
+       DPAA2_ETH_TD_NONE,
+       DPAA2_ETH_TD_QUEUE,
+       DPAA2_ETH_TD_GROUP
+};
+
+static inline enum dpaa2_eth_td_cfg
+dpaa2_eth_get_td_type(struct dpaa2_eth_priv *priv)
+{
+       bool pfc_enabled = !!(priv->pfc.pfc_en);
+
+       if (pfc_enabled)
+               return DPAA2_ETH_TD_GROUP;
+       else if (priv->tx_pause_frames)
+               return DPAA2_ETH_TD_NONE;
+       else
+               return DPAA2_ETH_TD_QUEUE;
+}
+
 int dpaa2_eth_set_hash(struct net_device *net_dev, u64 flags);
 int dpaa2_eth_set_cls(struct net_device *net_dev, u64 key);
 int dpaa2_eth_cls_key_size(u64 key);
 int dpaa2_eth_cls_fld_off(int prot, int field);
 
-int set_rx_taildrop(struct dpaa2_eth_priv *priv, bool enable);
+int set_rx_taildrop(struct dpaa2_eth_priv *priv);
 void dpaa2_eth_cls_trim_rule(void *key_mem, u64 fields);
 
 #endif	/* __DPAA2_H */
diff --git a/drivers/net/ethernet/freescale/dpaa2/dpaa2-ethtool.c b/drivers/net/ethernet/freescale/dpaa2/dpaa2-ethtool.c
index 7df69e6d91ec..e728df03505d 100644
--- a/drivers/net/ethernet/freescale/dpaa2/dpaa2-ethtool.c
+++ b/drivers/net/ethernet/freescale/dpaa2/dpaa2-ethtool.c
@@ -220,7 +220,8 @@ static int dpaa2_eth_set_pauseparam(struct net_device *net_dev,
 	if (current_tx_pause == pause->tx_pause)
 		goto out;
 
-	err = set_rx_taildrop(priv, !pause->tx_pause);
+	priv->tx_pause_frames = pause->tx_pause;
+	err = set_rx_taildrop(priv);
 	if (err)
 		netdev_dbg(net_dev, "Error configuring taildrop\n");
 
-- 
2.17.1

