From 0777132fc58a0b38a8b128a70d4818ae243572fd Mon Sep 17 00:00:00 2001
From: Mirela Rabulea <mirela.rabulea@nxp.com>
Date: Sun, 15 Sep 2019 23:01:09 +0300
Subject: [PATCH 03/37] MLK-22592: mxc-jpeg: Fix v4l2 compliance, "Format
 ioctls", TRY_FMT

commit 480fca6d29823dfc16de25f5c0f705a0aa8dda6d from
https://source.codeaurora.org/external/imx/linux-imx.git

Fail: from "Format ioctls", test VIDIOC_TRY_FMT
	  v4l2-test-formats.cpp(430): expected EINVAL, but got 1 when getting
	  format for buftype 9
Fix: return -EINVAL for non-multiplanar formats in g_fmt/try_fmt

warn: v4l2-test-formats.cpp(745): TRY_FMT cannot handle an invalid
      pixelformat. This may or may not be a problem. For more
      information see:
      http://www.mail-archive.com/linux-media@vger.kernel.org/msg56550.html
Fix : handle invalid pixfmt in TRY_FMT by replacing with the default pixfmt

Signed-off-by: Mirela Rabulea <mirela.rabulea@nxp.com>
Reviewed-by: Laurentiu Palcu <laurentiu.palcu@nxp.com>
Reviewed-by: Robert Chiras <robert.chiras@nxp.com>
(cherry picked from commit 180db1efa5b2088f6fb691b1627ea8061dad22d4)
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/media/platform/imx8/mxc-jpeg.c | 34 ++++++++++++++++++++------
 1 file changed, 27 insertions(+), 7 deletions(-)

diff --git a/drivers/media/platform/imx8/mxc-jpeg.c b/drivers/media/platform/imx8/mxc-jpeg.c
index 354d29e15c07..68efd64e5409 100644
--- a/drivers/media/platform/imx8/mxc-jpeg.c
+++ b/drivers/media/platform/imx8/mxc-jpeg.c
@@ -1695,14 +1695,20 @@ static int mxc_jpeg_try_fmt_vid_cap(struct file *file, void *priv,
 	int q_type = (ctx->mode == MXC_JPEG_DECODE) ?
 		     MXC_JPEG_FMT_TYPE_RAW : MXC_JPEG_FMT_TYPE_ENC;
 
+	if (!V4L2_TYPE_IS_MULTIPLANAR(f->type)) {
+		dev_err(dev, "TRY_FMT with Invalid type: %d\n", f->type);
+		return -EINVAL;
+	}
+
 	fmt = mxc_jpeg_find_format(ctx, f->fmt.pix_mp.pixelformat);
 	if (!fmt || (fmt->flags != q_type)) {
 		char *format_name = fourcc_to_str(fourcc);
-
-		dev_err(dev, "Format not supported: %s.\n",
-			format_name);
+		dev_warn(dev, "Format not supported: %s, use the default.\n",
+			 format_name);
 		kfree(format_name);
-		return -1;
+		f->fmt.pix_mp.pixelformat = (ctx->mode == MXC_JPEG_DECODE) ?
+				MXC_JPEG_DEFAULT_PIXFMT : V4L2_PIX_FMT_JPEG;
+		fmt = mxc_jpeg_find_format(ctx, f->fmt.pix_mp.pixelformat);
 	}
 	return mxc_jpeg_try_fmt(f, fmt, ctx, q_type);
 }
@@ -1718,14 +1724,21 @@ static int mxc_jpeg_try_fmt_vid_out(struct file *file, void *priv,
 	int q_type = (ctx->mode == MXC_JPEG_ENCODE) ?
 		     MXC_JPEG_FMT_TYPE_RAW : MXC_JPEG_FMT_TYPE_ENC;
 
+	if (!V4L2_TYPE_IS_MULTIPLANAR(f->type)) {
+		dev_err(dev, "TRY_FMT with Invalid type: %d\n", f->type);
+		return -EINVAL;
+	}
+
 	fmt = mxc_jpeg_find_format(ctx, fourcc);
 	if (!fmt || (fmt->flags != q_type)) {
 		char *format_name = fourcc_to_str(fourcc);
 
-		dev_err(dev, "Format not supported: %s.\n",
-			format_name);
+		dev_warn(dev, "Format not supported: %s, use the default.\n",
+			 format_name);
 		kfree(format_name);
-		return -1;
+		f->fmt.pix_mp.pixelformat = (ctx->mode == MXC_JPEG_ENCODE) ?
+				MXC_JPEG_DEFAULT_PIXFMT : V4L2_PIX_FMT_JPEG;
+		fmt = mxc_jpeg_find_format(ctx, f->fmt.pix_mp.pixelformat);
 	}
 	return mxc_jpeg_try_fmt(f, fmt, ctx, q_type);
 }
@@ -1820,10 +1833,17 @@ static int mxc_jpeg_g_fmt_vid(struct file *file, void *priv,
 			      struct v4l2_format *f)
 {
 	struct mxc_jpeg_ctx *ctx = mxc_jpeg_fh_to_ctx(priv);
+	struct mxc_jpeg_dev *jpeg = ctx->mxc_jpeg;
+	struct device *dev = jpeg->dev;
 	struct v4l2_pix_format_mplane   *pix_mp = &f->fmt.pix_mp;
 	struct mxc_jpeg_q_data *q_data = mxc_jpeg_get_q_data(ctx, f->type);
 	int i;
 
+	if (!V4L2_TYPE_IS_MULTIPLANAR(f->type)) {
+		dev_err(dev, "G_FMT with Invalid type: %d\n", f->type);
+		return -EINVAL;
+	}
+
 	pix_mp->pixelformat = q_data->fmt->fourcc;
 	pix_mp->width = q_data->w;
 	pix_mp->height = q_data->h;
-- 
2.17.1

