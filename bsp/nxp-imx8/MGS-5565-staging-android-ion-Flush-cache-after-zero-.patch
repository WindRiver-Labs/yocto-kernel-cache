From fa2c74d03a5574e023c73a2c22a67b40ddb982bb Mon Sep 17 00:00:00 2001
From: Richard Liu <xuegang.liu@nxp.com>
Date: Fri, 20 Mar 2020 15:42:01 +0000
Subject: [PATCH 31/37] MGS-5565 staging: android: ion: Flush cache after zero
 CMA allocated memory

commit 86459657f3a844e39d392ccac2e653905c4db12c from
https://source.codeaurora.org/external/imx/linux-imx.git

ION CMA memory default is cacheable, need flush cache after memset(),
else cache and physical memory not sync may cause problem.

Issue case:
VPU Video playback or GPU render have dirty line issue.

Root cause:
ION CMA allocate cacheable buffer and do memset(), some data still in cache
not in physical memory, VPU or GPU write the buffer with physical address,
or user call ion_mmap() to map the buffer through pgprot_writecombine() as
no-cache and write the buffer, later some CPU cache access trigger cache
flush, previous memset() data go to physical memory as dirty data.

Change-Id: I82b4cb61bbe6cffc687d452f9f81c1e35914d2f1
Signed-off-by: Richard Liu <xuegang.liu@nxp.com>
(cherry picked from commit e6c7d7eb812fddcaf96c99badc087ae713525864)
Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/staging/android/ion/ion_cma_heap.c | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/drivers/staging/android/ion/ion_cma_heap.c b/drivers/staging/android/ion/ion_cma_heap.c
index bf65e67ef9d8..52af33b48e3c 100644
--- a/drivers/staging/android/ion/ion_cma_heap.c
+++ b/drivers/staging/android/ion/ion_cma_heap.c
@@ -13,6 +13,7 @@
 #include <linux/cma.h>
 #include <linux/scatterlist.h>
 #include <linux/highmem.h>
+#include <asm/cacheflush.h>
 
 #include "ion.h"
 
@@ -51,12 +52,22 @@ static int ion_cma_allocate(struct ion_heap *heap, struct ion_buffer *buffer,
 			void *vaddr = kmap_atomic(page);
 
 			memset(vaddr, 0, PAGE_SIZE);
+#ifdef CONFIG_ARM64
+			 __flush_dcache_area(vaddr,PAGE_SIZE);
+#else
+			__cpuc_flush_dcache_area(vaddr,PAGE_SIZE);
+#endif
 			kunmap_atomic(vaddr);
 			page++;
 			nr_clear_pages--;
 		}
 	} else {
 		memset(page_address(pages), 0, size);
+#ifdef CONFIG_ARM64
+		__flush_dcache_area(page_address(pages),size);
+#else
+		__cpuc_flush_dcache_area(page_address(pages),size);
+#endif
 	}
 
 	table = kmalloc(sizeof(*table), GFP_KERNEL);
-- 
2.17.1

