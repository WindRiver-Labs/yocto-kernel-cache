From 57eb5e7cf6ec46517e211ccdb8f381265264d056 Mon Sep 17 00:00:00 2001
From: MengLi <meng.li@windriver.com>
Date: Tue, 31 Mar 2020 22:49:27 +0800
Subject: [PATCH 17/22] driver: media: capture: add function to disable
 regulator

It is need to disable regulator when ov5640/ov5640_mipi_v2 driver
occurs initialization failed because of without connect camera device
or other reasons.
So, add a function to disable all regulators that are enabled previously.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../platform/mxc/capture/ov5640_mipi_v2.c      | 18 ++++++++++++++++++
 drivers/media/platform/mxc/capture/ov5640_v2.c | 17 +++++++++++++++++
 2 files changed, 35 insertions(+)

diff --git a/drivers/media/platform/mxc/capture/ov5640_mipi_v2.c b/drivers/media/platform/mxc/capture/ov5640_mipi_v2.c
index d1f2b2aa2709..a8bdae3f542c 100644
--- a/drivers/media/platform/mxc/capture/ov5640_mipi_v2.c
+++ b/drivers/media/platform/mxc/capture/ov5640_mipi_v2.c
@@ -626,6 +626,20 @@ static int ov5640_regulator_enable(struct device *dev)
 	return ret;
 }
 
+static int ov5640_regulator_disable(void)
+{
+	if (analog_regulator)
+		regulator_disable(analog_regulator);
+
+	if (core_regulator)
+		regulator_disable(core_regulator);
+
+	if (io_regulator)
+		regulator_disable(io_regulator);
+
+	return 0;
+}
+
 static s32 ov5640_write_reg(struct ov5640 *sensor, u16 reg, u8 val)
 {
 	struct device *dev = &sensor->i2c_client->dev;
@@ -1750,6 +1764,7 @@ static int ov5640_probe(struct i2c_client *client,
 	}
 	mutex_unlock(&ov5640_mutex);
 	if (retval < 0) {
+		ov5640_regulator_disable();
 		clk_disable_unprepare(sensor->sensor_clk);
 		return -ENODEV;
 	}
@@ -1758,12 +1773,14 @@ static int ov5640_probe(struct i2c_client *client,
 				 &chip_id_high);
 	if (retval < 0 || chip_id_high != 0x56) {
 		dev_warn(dev, "Camera is not found\n");
+		ov5640_regulator_disable();
 		clk_disable_unprepare(sensor->sensor_clk);
 		return -ENODEV;
 	}
 	retval = ov5640_read_reg(sensor, OV5640_CHIP_ID_LOW_BYTE, &chip_id_low);
 	if (retval < 0 || chip_id_low != 0x40) {
 		dev_warn(dev, "Camera is not found\n");
+		ov5640_regulator_disable();
 		clk_disable_unprepare(sensor->sensor_clk);
 		return -ENODEV;
 	}
@@ -1771,6 +1788,7 @@ static int ov5640_probe(struct i2c_client *client,
 
 	retval = init_device(sensor);
 	if (retval < 0) {
+		ov5640_regulator_disable();
 		clk_disable_unprepare(sensor->sensor_clk);
 		dev_warn(dev, "Camera init failed\n");
 		ov5640_power_down(sensor, 1);
diff --git a/drivers/media/platform/mxc/capture/ov5640_v2.c b/drivers/media/platform/mxc/capture/ov5640_v2.c
index 7fdccda06568..c0cfb4df0c4a 100644
--- a/drivers/media/platform/mxc/capture/ov5640_v2.c
+++ b/drivers/media/platform/mxc/capture/ov5640_v2.c
@@ -730,6 +730,20 @@ static int ov5640_regulator_enable(struct device *dev)
 	return ret;
 }
 
+static int ov5640_regulator_disable(void)
+{
+	if (analog_regulator)
+		regulator_disable(analog_regulator);
+
+	if (core_regulator)
+		regulator_disable(core_regulator);
+
+	if (io_regulator)
+		regulator_disable(io_regulator);
+
+	return 0;
+}
+
 static s32 ov5640_write_reg(u16 reg, u8 val)
 {
 	u8 au8Buf[3] = {0};
@@ -1839,12 +1853,14 @@ static int ov5640_probe(struct i2c_client *client,
 
 	retval = ov5640_read_reg(OV5640_CHIP_ID_HIGH_BYTE, &chip_id_high);
 	if (retval < 0 || chip_id_high != 0x56) {
+		ov5640_regulator_disable();
 		clk_disable_unprepare(ov5640_data.sensor_clk);
 		pr_warning("camera ov5640 is not found\n");
 		return -ENODEV;
 	}
 	retval = ov5640_read_reg(OV5640_CHIP_ID_LOW_BYTE, &chip_id_low);
 	if (retval < 0 || chip_id_low != 0x40) {
+		ov5640_regulator_disable();
 		clk_disable_unprepare(ov5640_data.sensor_clk);
 		pr_warning("camera ov5640 is not found\n");
 		return -ENODEV;
@@ -1852,6 +1868,7 @@ static int ov5640_probe(struct i2c_client *client,
 
 	retval = init_device();
 	if (retval < 0) {
+		ov5640_regulator_disable();
 		clk_disable_unprepare(ov5640_data.sensor_clk);
 		pr_warning("camera ov5640 init failed\n");
 		ov5640_power_down(1);
-- 
2.17.1

