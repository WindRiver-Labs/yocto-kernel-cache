From ee606c257a4bfe2e2c7dea55af76265d440355eb Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Mon, 10 Sep 2018 12:30:26 -0500
Subject: [PATCH 42/51] remoteproc: introduce deny_sysfs_ops flag

commit 3d531be72a36d2f7b02504b34589677d888d8813 from
https://git.ti.com/cgit/processor-sdk/processor-sdk-linux/?h=processor-sdk-linux-01.00.00

The remoteproc framework provides sysfs interfaces for changing
the firmware name and for starting/stopping a remote processor
through the sysfs files 'state' and 'firmware'. These interfaces
are currently allowed irrespective of how the remoteprocs were
booted (like remoteproc self auto-boot, remoteproc client-driven
boot etc). These interfaces can adversely affect a remoteproc
and its clients especially when a remoteproc is being controlled
by a remoteproc client driver(s). Also, not all remoteproc
drivers may want to support the sysfs interfaces by default.

Add support to deny the sysfs state/firmware change by introducing
a state flag 'deny_sysfs_ops' that the individual remoteproc drivers
can set based on their usage needs. The default behavior is to
allow the sysfs operations as before.

Signed-off-by: Suman Anna <s-anna@ti.com>
Signed-off-by: Xiaolei Wang <xiaolei.wang@windriver.com>
---
 drivers/remoteproc/remoteproc_debugfs.c | 11 +----------
 drivers/remoteproc/remoteproc_sysfs.c   |  4 ++++
 include/linux/remoteproc.h              |  1 +
 3 files changed, 6 insertions(+), 10 deletions(-)

diff --git a/drivers/remoteproc/remoteproc_debugfs.c b/drivers/remoteproc/remoteproc_debugfs.c
index e1606f207b64..1ec31b232d7d 100644
--- a/drivers/remoteproc/remoteproc_debugfs.c
+++ b/drivers/remoteproc/remoteproc_debugfs.c
@@ -43,17 +43,8 @@ static ssize_t rproc_trace_read(struct file *filp, char __user *userbuf,
 	struct rproc_mem_entry *trace = &data->trace_mem;
 	void *va;
 	char buf[100];
-	int len;
 
-	va = rproc_da_to_va(data->rproc, trace->da, trace->len);
-
-	if (!va) {
-		len = scnprintf(buf, sizeof(buf), "Trace %s not available\n",
-				trace->name);
-		va = buf;
-	} else {
-		len = strnlen(va, trace->len);
-	}
+	int len = strnlen(trace->va, trace->len);
 
 	return simple_read_from_buffer(userbuf, count, ppos, va, len);
 }
diff --git a/drivers/remoteproc/remoteproc_sysfs.c b/drivers/remoteproc/remoteproc_sysfs.c
index 257d3928b76c..a5907607ecb9 100644
--- a/drivers/remoteproc/remoteproc_sysfs.c
+++ b/drivers/remoteproc/remoteproc_sysfs.c
@@ -69,6 +69,10 @@ static ssize_t state_store(struct device *dev,
 	struct rproc *rproc = to_rproc(dev);
 	int ret = 0;
 
+	/* restrict sysfs operations if not allowed by remoteproc drivers */
+	if (rproc->deny_sysfs_ops)
+		return -EPERM;
+
 	if (sysfs_streq(buf, "start")) {
 		if (rproc->state == RPROC_RUNNING)
 			return -EBUSY;
diff --git a/include/linux/remoteproc.h b/include/linux/remoteproc.h
index 8c7e9deced4a..03b67da6667b 100644
--- a/include/linux/remoteproc.h
+++ b/include/linux/remoteproc.h
@@ -533,6 +533,7 @@ struct rproc {
 	size_t table_sz;
 	bool has_iommu;
 	bool auto_boot;
+	unsigned int deny_sysfs_ops             : 1;
 	struct list_head dump_segments;
 	int nb_vdev;
 };
-- 
2.17.1

