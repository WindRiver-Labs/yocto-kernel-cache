From 463c076513b192846bede7e4ad0c77054884084f Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Tue, 19 Feb 2019 15:24:40 -0600
Subject: [PATCH 22/51] soc: ti: pruss: Parse various syscon nodes and store
 their regmaps

commit 62160db6fc07003f15e77c776314ba8d37b5adc0 from
https://git.ti.com/cgit/processor-sdk/processor-sdk-linux/?h=processor-sdk-linux-01.00.00

The PRUSS device node currently uses three different syscon nodes for
CFG, IEP and MII_RT sub-modules. Parse these syscon nodes and store
their regmap handles to allow adding functions to program any register
within these sub-modules.

The MFD_SYSCON Kconfig option is also enabled whenever the PRUSS remoteproc
driver is enabled. The MFD_SYSCON is a boolean option, and the select
dependency option is chosen following the majority usage style within the
kernel, as well as to align with similar usage in couple of other
remoteproc drivers.

Signed-off-by: Suman Anna <s-anna@ti.com>
Signed-off-by: Tero Kristo <t-kristo@ti.com>
Signed-off-by: Xiaolei Wang <xiaolei.wang@windriver.com>
---
 drivers/soc/ti/Kconfig       |  1 +
 drivers/soc/ti/pruss.c       | 34 ++++++++++++++++++++++++++++++++++
 include/linux/pruss_driver.h |  6 ++++++
 3 files changed, 41 insertions(+)

diff --git a/drivers/soc/ti/Kconfig b/drivers/soc/ti/Kconfig
index 6b2d3a856b6f..8eefd3b21e59 100644
--- a/drivers/soc/ti/Kconfig
+++ b/drivers/soc/ti/Kconfig
@@ -78,6 +78,7 @@ config TI_SCI_PM_DOMAINS
 config TI_PRUSS
 	tristate "TI PRU-ICSS Subsystem Platform drivers"
 	depends on SOC_AM33XX
+	select MFD_SYSCON
 	help
 	  TI PRU-ICSS Subsystem platform specific support.
 
diff --git a/drivers/soc/ti/pruss.c b/drivers/soc/ti/pruss.c
index 2f4f47f80600..9242458f9fd1 100644
--- a/drivers/soc/ti/pruss.c
+++ b/drivers/soc/ti/pruss.c
@@ -9,6 +9,7 @@
 
 #include <linux/dma-mapping.h>
 #include <linux/io.h>
+#include <linux/mfd/syscon.h>
 #include <linux/module.h>
 #include <linux/of_address.h>
 #include <linux/of_device.h>
@@ -41,6 +42,39 @@ static int pruss_probe(struct platform_device *pdev)
 
 	pruss->dev = dev;
 
+	np = of_get_child_by_name(node, "cfg");
+	if (!np) {
+		dev_err(dev, "%pOF is missing cfg node\n", np);
+		return -ENODEV;
+	}
+
+	pruss->cfg = syscon_node_to_regmap(np);
+	of_node_put(np);
+	if (IS_ERR(pruss->cfg))
+		return -ENODEV;
+
+	np = of_get_child_by_name(node, "iep");
+	if (!np) {
+		dev_err(dev, "%pOF is missing iep node\n", np);
+		return -ENODEV;
+	}
+
+	pruss->iep = syscon_node_to_regmap(np);
+	of_node_put(np);
+	if (IS_ERR(pruss->iep))
+		return -ENODEV;
+
+	np = of_get_child_by_name(node, "mii-rt");
+	if (!np) {
+		dev_err(dev, "%pOF is missing mii-rt node\n", np);
+		return -ENODEV;
+	}
+
+	pruss->mii_rt = syscon_node_to_regmap(np);
+	of_node_put(np);
+	if (IS_ERR(pruss->mii_rt))
+		return -ENODEV;
+
 	np = of_get_child_by_name(node, "memories");
 	if (!np) {
 		dev_err(dev, "%pOF is missing memories node\n", np);
diff --git a/include/linux/pruss_driver.h b/include/linux/pruss_driver.h
index a381c3aa331e..874c61be8a07 100644
--- a/include/linux/pruss_driver.h
+++ b/include/linux/pruss_driver.h
@@ -34,10 +34,16 @@ struct pruss_mem_region {
 /**
  * struct pruss - PRUSS parent structure
  * @dev: pruss device pointer
+ * @cfg: regmap for config region
+ * @iep: regmap for IEP sub-module
+ * @mii_rt: regmap for MII_RT sub-module
  * @mem_regions: data for each of the PRUSS memory regions
  */
 struct pruss {
 	struct device *dev;
+	struct regmap *cfg;
+	struct regmap *iep;
+	struct regmap *mii_rt;
 	struct pruss_mem_region mem_regions[PRUSS_MEM_MAX];
 };
 
-- 
2.17.1

