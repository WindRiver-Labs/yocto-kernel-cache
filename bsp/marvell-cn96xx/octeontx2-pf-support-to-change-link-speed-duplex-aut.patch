From 0482ddb858f8c2555cfa1252eaa73ca37d292c98 Mon Sep 17 00:00:00 2001
From: Hariprasad Kelam <hkelam@marvell.com>
Date: Mon, 21 Sep 2020 15:31:35 +0530
Subject: [PATCH 13/22] octeontx2-pf: support to change link
 speed/duplex/autoneg

Enable user to change configurations like speed, duplex and
autoneg of network interface via ethtool -s option.

	ethtool -s eth0 advertise 0x1
         --> default values will be passed speed/duplex/an
	ethtool -s eth0 advertise 0x40000 speed 10/1000
                        duplex half/full autoneg on phyad 0x1
	Use phyad 0x1 to overwrite default values

Change-Id: Icdaf8f2bf60801cd81dd293d2ef78a081627b43d
Signed-off-by: Hariprasad Kelam <hkelam@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/38066
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Integrated-by: Abhishek Paliwal <paliwal.abhishek@windriver.com>
---
 .../marvell/octeontx2/nic/otx2_ethtool.c      | 37 +++++++++++++++++++
 1 file changed, 37 insertions(+)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
index cdfd40a5e55f..fdca6e85a97f 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_ethtool.c
@@ -1195,6 +1195,35 @@ static int otx2_get_link_ksettings(struct net_device *netdev,
 	return 0;
 }
 
+#define OTX2_OVERWRITE_DEF	0x1
+static int otx2_populate_input_params(struct otx2_nic *pfvf,
+				      struct cgx_set_link_mode_req *req,
+				      u32 speed, u8 duplex, u8 autoneg,
+				      u8 phy_address)
+{
+	if (!ethtool_validate_speed(speed) ||
+	    !ethtool_validate_duplex(duplex))
+		return -EINVAL;
+
+	if (autoneg != AUTONEG_ENABLE && autoneg != AUTONEG_DISABLE)
+		return -EINVAL;
+
+	if (phy_address == OTX2_OVERWRITE_DEF) {
+		req->args.speed = speed;
+		/* firmware expects 1 for half duplex and 0 for full duplex
+		 * hence inverting
+		 */
+		req->args.duplex = duplex ^ 0x1;
+		req->args.an = autoneg;
+	} else {
+		req->args.speed = SPEED_UNKNOWN;
+		req->args.duplex = DUPLEX_UNKNOWN;
+		req->args.an = AUTONEG_UNKNOWN;
+	}
+
+	return 0;
+}
+
 static int otx2_set_link_ksettings(struct net_device *netdev,
 				   const struct ethtool_link_ksettings *cmd)
 {
@@ -1219,6 +1248,14 @@ static int otx2_set_link_ksettings(struct net_device *netdev,
 		mutex_unlock(&pfvf->mbox.lock);
 		return -EINVAL;
 	}
+
+	if (otx2_populate_input_params(pfvf, req, cmd->base.speed,
+				       cmd->base.duplex, cmd->base.autoneg,
+				       cmd->base.phy_address)) {
+		mutex_unlock(&pfvf->mbox.lock);
+		return -EINVAL;
+	}
+
 	err =  otx2_sync_mbox_msg(&pfvf->mbox);
 	if (!err) {
 		rsp = (struct cgx_set_link_mode_rsp *)
-- 
2.17.1

