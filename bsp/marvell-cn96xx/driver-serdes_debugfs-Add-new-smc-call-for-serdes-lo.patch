From 384e2aa435a3878301d0deaed7b082de35bf8b51 Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <Chandrakala.Chavva@cavium.com>
Date: Sat, 1 Aug 2020 21:52:08 -0700
Subject: [PATCH 4/5] driver: serdes_debugfs: Add new smc call for serdes
 loopback

commit 7779c6d53e398ca2510cd6a044b3be94a2e639b4 from
git@git.assembla.com:cavium/WindRiver.linux.git

Added new smc call to enable/disable serdes in loopback mode

Change-Id: I08dfcf87fad9cf23e3bd871877709f9ed992b913
Signed-off-by: Chandrakala Chavva <Chandrakala.Chavva@cavium.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/33227
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Chandrakala Chavva <cchavva@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/33377
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../marvell/octeontx2-serdes/serdes_debugfs.c | 113 ++++++++++++++++++
 1 file changed, 113 insertions(+)

diff --git a/drivers/soc/marvell/octeontx2-serdes/serdes_debugfs.c b/drivers/soc/marvell/octeontx2-serdes/serdes_debugfs.c
index 4de50050af6e..28725b49ba54 100644
--- a/drivers/soc/marvell/octeontx2-serdes/serdes_debugfs.c
+++ b/drivers/soc/marvell/octeontx2-serdes/serdes_debugfs.c
@@ -30,6 +30,7 @@ MODULE_LICENSE("GPL v2");
 #define OCTEONTX_SERDES_DBG_GET_CONF	0xc2000d06
 #define OCTEONTX_SERDES_DBG_PRBS	0xc2000d07
 #define OCTEONTX_SERDES_DBG_SET_TUNE	0xc2000d08
+#define OCTEONTX_SERDES_DBG_SET_LOOP	0xc2000d09
 
 /* This is expected OcteonTX response for SVC UID command */
 static const int octeontx_svc_uuid[] = {
@@ -106,6 +107,13 @@ static struct {
 	char *res;
 } tune_serdes_cmd;
 
+static struct {
+	int qlm;
+	int lane;
+	int type;
+	char *res;
+} loop_serdes_cmd;
+
 static struct {
 	int qlm;
 	int qlm_lane;
@@ -535,6 +543,99 @@ static const struct file_operations tune_serdes_dbg_settings_fops = {
 	.release	= single_release,
 };
 
+static int loop_serdes_dbg_lane_parse(const char __user *buffer,
+				 size_t count, int *qlm, int *lane,
+				 int *type)
+{
+	char *cmd_buf, *cmd_buf_tmp, *subtoken;
+	int ec;
+
+	cmd_buf = memdup_user(buffer, count);
+	if (IS_ERR(cmd_buf))
+		return -ENOMEM;
+
+	cmd_buf[count] = '\0';
+
+	cmd_buf_tmp = strchr(cmd_buf, '\n');
+	if (cmd_buf_tmp) {
+		*cmd_buf_tmp = '\0';
+		count = cmd_buf_tmp - cmd_buf + 1;
+	}
+
+	cmd_buf_tmp = cmd_buf;
+	subtoken = strsep(&cmd_buf, " ");
+	ec = subtoken ? kstrtoint(subtoken, 10, qlm) : -EINVAL;
+
+	if (ec < 0) {
+		kfree(cmd_buf_tmp);
+		return ec;
+	}
+
+	subtoken = strsep(&cmd_buf, " ");
+	ec = subtoken ? kstrtoint(subtoken, 10, lane) : -EINVAL;
+
+	if (ec == -EINVAL) {
+		kfree(cmd_buf_tmp);
+		return ec;
+	}
+
+	subtoken = strsep(&cmd_buf, " ");
+	ec = subtoken ? kstrtoint(subtoken, 10, type) : -EINVAL;
+
+	kfree(cmd_buf_tmp);
+	return ec;
+}
+
+static ssize_t loop_serdes_dbg_settings_write_op(struct file *filp,
+					    const char __user *buffer,
+					    size_t count, loff_t *ppos)
+{
+	struct arm_smccc_res res;
+	int ec;
+
+	ec = loop_serdes_dbg_lane_parse(buffer, count, &loop_serdes_cmd.qlm,
+			&loop_serdes_cmd.lane, &loop_serdes_cmd.type);
+	if (ec < 0) {
+		pr_info("Usage: echo <qlm> <lane> <type> > loop\n");
+		return ec;
+	}
+
+	arm_smccc_smc(OCTEONTX_SERDES_DBG_SET_LOOP, loop_serdes_cmd.qlm,
+		loop_serdes_cmd.lane, loop_serdes_cmd.type,
+		0, 0, 0, 0, &res);
+
+	if (res.a0 != SMCCC_RET_SUCCESS) {
+		pr_info("QLM serdes loop command failed.\n");
+		return -EIO;
+	}
+
+	return count;
+}
+
+static int loop_serdes_dbg_settings_read_op(struct seq_file *s, void *unused)
+{
+	loop_serdes_cmd.res = '\0';
+
+	seq_printf(s, "%s", loop_serdes_cmd.res);
+
+	return 0;
+}
+
+static int loop_serdes_dbg_open_settings(struct inode *inode, struct file *file)
+{
+	return single_open(file, loop_serdes_dbg_settings_read_op,
+			inode->i_private);
+}
+
+static const struct file_operations loop_serdes_dbg_settings_fops = {
+	.owner		= THIS_MODULE,
+	.open		= loop_serdes_dbg_open_settings,
+	.read		= seq_read,
+	.write		= loop_serdes_dbg_settings_write_op,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+};
+
 static int serdes_dbg_prbs_lane_parse(const char __user *buffer,
 				      size_t count, int *qlm,
 				      enum cgx_prbs_cmd *cmd, int *mode,
@@ -808,6 +909,11 @@ static int serdes_dbg_setup_debugfs(void)
 	if (!pfile)
 		goto create_failed;
 
+	pfile = debugfs_create_file("loop", 0644, pserdes_root, NULL,
+				    &loop_serdes_dbg_settings_fops);
+	if (!pfile)
+		goto create_failed;
+
 	return 0;
 
 create_failed:
@@ -857,6 +963,10 @@ static int serdes_dbg_init(void)
 	if (!tune_serdes_cmd.res)
 		goto serdes_mem_init_failed;
 
+	loop_serdes_cmd.res = ioremap_wc(res.a0, sizeof(loop_serdes_cmd));
+	if (!loop_serdes_cmd.res)
+		goto serdes_mem_init_failed;
+
 	ec = serdes_dbg_setup_debugfs();
 	if (ec)
 		goto serdes_debugfs_failed;
@@ -881,6 +991,9 @@ static int serdes_dbg_init(void)
 	if (tune_serdes_cmd.res)
 		iounmap(tune_serdes_cmd.res);
 
+	if (loop_serdes_cmd.res)
+		iounmap(loop_serdes_cmd.res);
+
 	return 0;
 }
 
-- 
2.17.1

