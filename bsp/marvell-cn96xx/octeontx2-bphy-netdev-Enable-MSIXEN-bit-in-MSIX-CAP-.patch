From b11852c2a8190087be583674b32ad4fed8a7f7a8 Mon Sep 17 00:00:00 2001
From: Naveen Mamindlapalli <naveenm@marvell.com>
Date: Thu, 18 Jun 2020 23:02:56 +0530
Subject: [PATCH 4/7] octeontx2-bphy-netdev: Enable MSIXEN bit in MSIX CAP HDR

commit cbda7bed39fb1137a2677500b7ce8d85d72b0ee1 from
git@git.assembla.com:cavium/WindRiver.linux.git

This patch enables MSIXEN bit so that the BPHY device can
generate interrupts.

Change-Id: I355764115ed48d0c550b5d039c22f265487918b6
Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/30371
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../marvell/octeontx2/bphy/otx2_rfoe.c        | 23 +++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
index 4ce5bdb33019..b8759f49a0b4 100644
--- a/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
+++ b/drivers/net/ethernet/marvell/octeontx2/bphy/otx2_rfoe.c
@@ -1680,9 +1680,19 @@ static const struct file_operations otx2_rfoe_cdev_fops = {
 	.release	= otx2_rfoe_cdev_release,
 };
 
+static inline void msix_enable_ctrl(struct pci_dev *dev)
+{
+	u16 control;
+
+	pci_read_config_word(dev, dev->msix_cap + PCI_MSIX_FLAGS, &control);
+	control |= PCI_MSIX_FLAGS_ENABLE;
+	pci_write_config_word(dev, dev->msix_cap + PCI_MSIX_FLAGS, control);
+}
+
 static int otx2_rfoe_probe(struct platform_device *pdev)
 {
 	struct otx2_rfoe_cdev_priv *cdev_priv;
+	struct pci_dev *bphy_pdev;
 	int err = 0, ret, irq;
 	struct resource *res;
 	dev_t devt;
@@ -1694,6 +1704,19 @@ static int otx2_rfoe_probe(struct platform_device *pdev)
 		goto out;
 	}
 
+	/* BPHY is a PCI device and the kernel resets the MSIXEN bit during
+	 * enumeration. So enable it back for interrupts to be generated.
+	 */
+	bphy_pdev = pci_get_device(OTX2_BPHY_PCI_VENDOR_ID,
+				   OTX2_BPHY_PCI_DEVICE_ID, NULL);
+	if (!bphy_pdev) {
+		dev_err(&pdev->dev, "Couldn't find BPHY PCI device %x\n",
+			OTX2_BPHY_PCI_DEVICE_ID);
+		ret = -ENODEV;
+		goto free_cdev_priv;
+	}
+	msix_enable_ctrl(bphy_pdev);
+
 	/* bphy registers ioremap */
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	bphy_reg_base = ioremap_nocache(res->start, resource_size(res));
-- 
2.17.1

