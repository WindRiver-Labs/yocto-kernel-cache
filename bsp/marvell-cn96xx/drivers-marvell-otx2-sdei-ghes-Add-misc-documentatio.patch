From 45ca62ff6679129d0cdfb0c0ef99f91b7e04821a Mon Sep 17 00:00:00 2001
From: Rick Farrington <rfarrington@marvell.com>
Date: Thu, 23 Apr 2020 18:05:52 -0400
Subject: [PATCH 19/37] drivers: marvell: otx2-sdei-ghes: Add misc
 documentation.

commit d4c553a62d4e06db25f92c92a5d7c21b697c2cbb from
git@git.assembla.com:cavium/WindRiver.linux.git

Change-Id: I9251d060e99eb4eea41288264573d5d9bda3258f
Signed-off-by: Rick Farrington <rfarrington@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/kernel/linux/+/27416
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Chandrakala Chavva <cchavva@marvell.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../marvell/octeontx2-ghes/otx2-sdei-ghes.c   | 40 ++++++++++---------
 .../marvell/octeontx2-ghes/otx2-sdei-ghes.h   | 17 +++++---
 2 files changed, 33 insertions(+), 24 deletions(-)

diff --git a/drivers/soc/marvell/octeontx2-ghes/otx2-sdei-ghes.c b/drivers/soc/marvell/octeontx2-ghes/otx2-sdei-ghes.c
index eae0c4e0fca9..cd2e33937270 100644
--- a/drivers/soc/marvell/octeontx2-ghes/otx2-sdei-ghes.c
+++ b/drivers/soc/marvell/octeontx2-ghes/otx2-sdei-ghes.c
@@ -37,7 +37,8 @@
 #endif // CONFIG_OCTEONTX2_SDEI_GHES_DEBUG
 
 static struct acpi_table_hest *hest;
-static struct otx2_ghes_event *event_list;
+/* A list of all GHES producers, allocated during module initialization. */
+static struct otx2_ghes_source *ghes_source_list;
 
 #define PCI_VENDOR_ID_CAVIUM            0x177d
 #define PCI_DEVICE_ID_OCTEONTX2_LMC     0xa022
@@ -58,14 +59,14 @@ static int sdei_ghes_callback(u32 event_id, struct pt_regs *regs, void *arg)
 	struct otx2_ghes_err_record *err_rec;
 	struct cper_sec_mem_err_old *mem_err;
 	struct otx2_sdei_ghes_drv *ghes_drv;
-	struct otx2_ghes_event *event;
+	struct otx2_ghes_source *event;
 	u32 head, tail;
 	size_t idx;
 
 	ghes_drv = arg;
 
-	for (idx = 0; idx < ghes_drv->event_count; idx++) {
-		event = &ghes_drv->event_list[idx];
+	for (idx = 0; idx < ghes_drv->source_count; idx++) {
+		event = &ghes_drv->source_list[idx];
 		if (event->id != event_id)
 			continue;
 
@@ -146,7 +147,7 @@ static int sdei_ghes_init(struct platform_device *pdev)
 {
 	struct otx2_sdei_ghes_drv *ghes_drv;
 	struct device *dev = &pdev->dev;
-	struct otx2_ghes_event *event;
+	struct otx2_ghes_source *event;
 	size_t idx;
 	int ret;
 
@@ -156,12 +157,12 @@ static int sdei_ghes_init(struct platform_device *pdev)
 	ret = -ENODEV;
 
 	/* Allocated during initialization (see sdei_ghes_driver_init) */
-	ghes_drv->event_list = event_list;
-	ghes_drv->event_count = hest->error_source_count;
+	ghes_drv->source_list = ghes_source_list;
+	ghes_drv->source_count = hest->error_source_count;
 
 	/* Register & enable each SDEI event */
-	for (idx = 0; idx < ghes_drv->event_count; idx++) {
-		event = &ghes_drv->event_list[idx];
+	for (idx = 0; idx < ghes_drv->source_count; idx++) {
+		event = &ghes_drv->source_list[idx];
 
 		/* register the event */
 		ret = sdei_event_register(event->id, sdei_ghes_callback,
@@ -181,12 +182,13 @@ static int sdei_ghes_init(struct platform_device *pdev)
 		}
 	}
 
-	if (idx != ghes_drv->event_count) {
+	if (idx != ghes_drv->source_count) {
 		ret = -ENODEV;
 		goto exit;
 	}
 
-	dbgmsg(dev, "Registered & enabled %ld events\n", ghes_drv->event_count);
+	dbgmsg(dev, "Registered & enabled %ld events\n",
+	       ghes_drv->source_count);
 
 	ret = 0;
 
@@ -199,15 +201,15 @@ static int sdei_ghes_de_init(struct platform_device *pdev)
 {
 	struct otx2_sdei_ghes_drv *ghes_drv;
 	struct device *dev = &pdev->dev;
-	struct otx2_ghes_event *event;
+	struct otx2_ghes_source *event;
 	int ret, idx;
 
 	dbgmsg(dev, "%s: entry\n", __func__);
 
 	ghes_drv = platform_get_drvdata(pdev);
 
-	for (idx = 0; idx < ghes_drv->event_count; idx++) {
-		event = &ghes_drv->event_list[idx];
+	for (idx = 0; idx < ghes_drv->source_count; idx++) {
+		event = &ghes_drv->source_list[idx];
 
 		ret = sdei_event_disable(event->id);
 		if (ret < 0)
@@ -321,7 +323,7 @@ static int __init sdei_ghes_hest_init(struct device_node *of_node)
 	const __be32 *of_base0, *of_base1, *of_base2;
 	struct acpi_hest_generic *hest_gen_entry;
 	struct device_node *child_node;
-	struct otx2_ghes_event *event;
+	struct otx2_ghes_source *event;
 	size_t event_cnt, size, idx;
 	const u32 *evt_id_prop;
 	int ret, prop_sz;
@@ -331,7 +333,7 @@ static int __init sdei_ghes_hest_init(struct device_node *of_node)
 
 	ret = -ENODEV;
 
-	/* enumerate events available for subscription */
+	/* enumerate [GHES] producers available for subscription */
 	event_cnt = 0;
 	for_each_available_child_of_node(of_node, child_node) {
 		of_base0 = of_get_address(child_node, 0, NULL, NULL);
@@ -367,7 +369,7 @@ static int __init sdei_ghes_hest_init(struct device_node *of_node)
 	size = roundup(size, 8);
 
 	/* allocate room for list of available events */
-	size += event_cnt * sizeof(struct otx2_ghes_event);
+	size += event_cnt * sizeof(struct otx2_ghes_source);
 
 	/* allocate everything in one block, ordered as:
 	 *   HEST table
@@ -389,7 +391,7 @@ static int __init sdei_ghes_hest_init(struct device_node *of_node)
 	size += event_cnt * sizeof(struct acpi_hest_generic);
 	/* align event list on 8-byte boundary (see allocation above) */
 	size = roundup(size, 8);
-	event_list = memblock + size;
+	ghes_source_list = memblock + size;
 
 	/* populate HEST header */
 	strncpy(hest->header.signature, ACPI_SIG_HEST,
@@ -432,7 +434,7 @@ static int __init sdei_ghes_hest_init(struct device_node *of_node)
 		if (!evt_id_prop && (prop_sz != sizeof(*evt_id_prop)))
 			continue;
 
-		event = &event_list[idx];
+		event = &ghes_source_list[idx];
 
 		/* name is already terminated by 'kzalloc' */
 		strncpy(event->name, child_node->name,
diff --git a/drivers/soc/marvell/octeontx2-ghes/otx2-sdei-ghes.h b/drivers/soc/marvell/octeontx2-ghes/otx2-sdei-ghes.h
index f2f12f042722..a89e95fec37e 100644
--- a/drivers/soc/marvell/octeontx2-ghes/otx2-sdei-ghes.h
+++ b/drivers/soc/marvell/octeontx2-ghes/otx2-sdei-ghes.h
@@ -15,11 +15,16 @@
 
 #define SDEI_GHES_EVENT_NAME_MAX_CHARS 16
 /*
+ * Describes an error source per ACPI 18.3.2.6 (Generic Hardware Error Source).
+ * This produces GHES-compliant error records from data forwarded by the [ATF]
+ * firmware.
+ * There exists one of these for each error source.
+ *
  * @estatus_pa:         physical address of error status information block
  * @estatus_address:    mapped pointer to error_status_address
  * @estatus:            mapped pointer to error status block
  */
-struct otx2_ghes_event {
+struct otx2_ghes_source {
 	char                            name[SDEI_GHES_EVENT_NAME_MAX_CHARS];
 	u32                             id;
 	phys_addr_t                     estatus_pa;
@@ -32,13 +37,15 @@ struct otx2_ghes_event {
  * struct otx2_sdei_ghes_drv: driver state
  *
  * @of_node:                  associated device tree node
- * @event_list:               list of [SDEI] events
- * @event_count:              count of [SDEI] events (size of @event_list)
+ * @source_list:              list of [SDEI] producers
+ *                            (1 for each error source)
+ * @source_count:             count of [SDEI] producers
+ *                            (size of @source_list)
  */
 struct otx2_sdei_ghes_drv {
 	struct device_node                   *of_node;
-	struct otx2_ghes_event               *event_list;
-	size_t                               event_count;
+	struct otx2_ghes_source              *source_list;
+	size_t                               source_count;
 };
 
 #define OTX2_GHES_ERR_REC_FRU_TEXT_LEN 32
-- 
2.17.1

