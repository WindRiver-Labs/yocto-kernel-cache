From 324ef214ad4b9ef787d34be9ab1e36490249d167 Mon Sep 17 00:00:00 2001
From: Michal Mazur <mmazur2@marvell.com>
Date: Thu, 20 Feb 2020 17:09:12 +0100
Subject: [PATCH 4/6] octeontx2-af: Setup edge used for GPIO timing

commit 77c828d7fc177837b304b0416dde17035005f6c0 from
git@git.assembla.com:cavium/WindRiver.linux.git

Configure default edge of external clock signal used in Timer Unit.
It is a global configuration for all timers with clock source set to
GPIO. Default value can be changed with TIM_CONFIG_RING MBOX request.

Change-Id: I41c7b95904fb4bcf493023ce5d540e5af9216a6c
Signed-off-by: Michal Mazur <mmazur2@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/24371
Tested-by: sa_ip-sw-jenkins <sa_ip-sw-jenkins@marvell.com>
Reviewed-by: Pavan Nikhilesh Bhagavatula <Pavan.Bhagavatula@cavium.com>
Reviewed-by: Stanislaw Kardach <Stanislaw.Kardach@cavium.com>
Reviewed-by: Jerin Jacob Kollanukkaran <jerinj@marvell.com>
Reviewed-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/af/mbox.h  |  1 +
 .../ethernet/marvell/octeontx2/af/rvu_reg.h   |  1 +
 .../ethernet/marvell/octeontx2/af/rvu_tim.c   | 31 ++++++++++++++-----
 3 files changed, 25 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
index 604b1576e4ff..402aa5e97cb3 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/mbox.h
@@ -1465,6 +1465,7 @@ struct tim_config_req {
 	u32	bucketsize;
 	u32	chunksize;
 	u32	interval;
+	u8	gpioedge;
 };
 
 struct tim_lf_alloc_rsp {
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h b/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h
index 003817e00faf..a4979375d592 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.h
@@ -612,6 +612,7 @@
 
 #define TIM_AF_RING_GMCTL_SHIFT		3
 #define TIM_AF_RING_SSO_PF_FUNC_SHIFT	0
+#define TIM_AF_FLAGS_REG_GPIO_EDGE_MASK	GENMASK_ULL(6, 5)
 
 /* CPT */
 #define CPT_AF_CONSTANTS0               (0x0ull)
diff --git a/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c b/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c
index e23c036eb023..3c2cda84cf30 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c
+++ b/drivers/net/ethernet/marvell/octeontx2/af/rvu_tim.c
@@ -11,6 +11,7 @@
 #include <linux/interrupt.h>
 #include <linux/irq.h>
 #include <linux/types.h>
+#include <linux/bitfield.h>
 
 #include "rvu_struct.h"
 #include "rvu_reg.h"
@@ -129,13 +130,6 @@ int rvu_mbox_handler_tim_config_ring(struct rvu *rvu,
 	if (req->bigendian & ~1)
 		return TIM_AF_INVALID_BIG_ENDIAN_VALUE;
 
-	/* Check GPIO clock source has the GPIO edge set. */
-	if (req->clocksource == TIM_CLK_SRCS_GPIO) {
-		regval = rvu_read64(rvu, blkaddr, TIM_AF_FLAGS_REG);
-		if (((regval >> 5) & 0x3) == 0)
-			return TIM_AF_GPIO_CLK_SRC_NOT_ENABLED;
-	}
-
 	/* enableperiodic can only be 1 or 0. */
 	if (req->enableperiodic & ~1)
 		return TIM_AF_INVALID_ENABLE_PERIODIC;
@@ -183,6 +177,27 @@ int rvu_mbox_handler_tim_config_ring(struct rvu *rvu,
 	if (req->interval < intervalmin)
 		return TIM_AF_INTERVAL_TOO_SMALL;
 
+	/* Configure edge of GPIO clock source */
+	if (req->clocksource == TIM_CLK_SRCS_GPIO &&
+	    req->gpioedge < TIM_GPIO_INVALID) {
+		regval = rvu_read64(rvu, blkaddr, TIM_AF_FLAGS_REG);
+		if (FIELD_GET(TIM_AF_FLAGS_REG_GPIO_EDGE_MASK, regval) ==
+		    TIM_GPIO_NO_EDGE && req->gpioedge == TIM_GPIO_NO_EDGE)
+			return TIM_AF_GPIO_CLK_SRC_NOT_ENABLED;
+		if (req->gpioedge != TIM_GPIO_NO_EDGE && req->gpioedge !=
+		    FIELD_GET(TIM_AF_FLAGS_REG_GPIO_EDGE_MASK, regval)) {
+			dev_info(rvu->dev,
+				 "Change edge of GPIO input to %d from %lld.\n",
+				 (int)req->gpioedge,
+				 FIELD_GET(TIM_AF_FLAGS_REG_GPIO_EDGE_MASK,
+					   regval));
+			regval &= ~TIM_AF_FLAGS_REG_GPIO_EDGE_MASK;
+			regval |= FIELD_PREP(TIM_AF_FLAGS_REG_GPIO_EDGE_MASK,
+					     req->gpioedge);
+			rvu_write64(rvu, blkaddr, TIM_AF_FLAGS_REG, regval);
+		}
+	}
+
 	/* CTL0 */
 	/* EXPIRE_OFFSET = 0 and is set correctly when enabling. */
 	regval = req->interval;
@@ -317,7 +332,7 @@ int rvu_tim_init(struct rvu *rvu)
 	gpio_edge = TIM_GPIO_NO_EDGE;
 
 	/* Enable TIM block. */
-	regval = (((u64)gpio_edge) << 6) |
+	regval = FIELD_PREP(TIM_AF_FLAGS_REG_GPIO_EDGE_MASK, gpio_edge) |
 		 BIT_ULL(2) | /* RESET */
 		 BIT_ULL(0); /* ENA_TIM */
 	rvu_write64(rvu, blkaddr, TIM_AF_FLAGS_REG, regval);
-- 
2.17.1

