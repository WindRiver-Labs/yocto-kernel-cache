From 73fa3f48ce578e69c192dda723784a69472248a1 Mon Sep 17 00:00:00 2001
From: Thor Thayer <thor.thayer@linux.intel.com>
Date: Wed, 10 Jun 2020 12:50:54 -0500
Subject: [PATCH 088/151] HSD #22010887177: Move structures into Intel FCS UAPI
 header

commit  9245a604cc6d05219f4ebc832167dd9d099f532b from
https://github.com/altera-opensource/linux-socfpga.git
branch is socfpga-5.4.64-lts

Move the structures from intel_fcs.h to intel_fcs-ioctl.h,
remove intel_fcs.h and update the structure members to
match linux/types.h.

Signed-off-by: Thor Thayer <thor.thayer@linux.intel.com>
Signed-off-by: Meng Li <Meng.Li@windriver.com>
Integrated-by: Jun Zhang <jun.zhang@windriver.com>
---
 drivers/crypto/intel_fcs.c           |   3 +-
 drivers/crypto/intel_fcs.h           | 122 ---------------------------
 include/uapi/linux/intel_fcs-ioctl.h | 117 ++++++++++++++++++++++++-
 3 files changed, 117 insertions(+), 125 deletions(-)
 delete mode 100644 drivers/crypto/intel_fcs.h

diff --git a/drivers/crypto/intel_fcs.c b/drivers/crypto/intel_fcs.c
index 057d0105544f..15bc62b62f56 100644
--- a/drivers/crypto/intel_fcs.c
+++ b/drivers/crypto/intel_fcs.c
@@ -21,7 +21,6 @@
 #include <linux/sysfs.h>
 #include <linux/uaccess.h>
 
-#include "intel_fcs.h"
 #include <uapi/linux/intel_fcs-ioctl.h>
 
 #define RANDOM_NUMBER_SIZE	32
@@ -223,7 +222,7 @@ static long fcs_ioctl(struct file *file, unsigned int cmd,
 			return -EFAULT;
 		}
 
-		dev_dbg(dev, "Test=%d, Size=%ld; Address=0x%p\n",
+		dev_dbg(dev, "Test=%d, Size=%d; Address=0x%p\n",
 			data->com_paras.c_request.test.test_bit,
 			data->com_paras.c_request.size,
 			data->com_paras.c_request.addr);
diff --git a/drivers/crypto/intel_fcs.h b/drivers/crypto/intel_fcs.h
deleted file mode 100644
index eaa16da3d4b2..000000000000
--- a/drivers/crypto/intel_fcs.h
+++ /dev/null
@@ -1,122 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-/*
- * Copyright (C) 2020, Intel Corporation
- */
-
-#ifndef __INTEL_FCS_H
-#define __INTEL_FCS_H
-
-/**
- * enum fcs_vab_img_type - enumeration of image types
- * @INTEL_FCS_IMAGE_HPS: Image to validate is HPS image
- * @INTEL_FCS_IMAGE_BITSTREAM: Image to validate is bitstream
- */
-enum fcs_vab_img_type {
-	INTEL_FCS_IMAGE_HPS = 0,
-	INTEL_FCS_IMAGE_BITSTREAM = 1
-};
-
-/**
- * enum fcs_certificate_test - enumeration of certificate test
- * @INTEL_FCS_NO_TEST: Write to eFuses
- * @INTEL_FCS_TEST: Write to cache, do not write eFuses
- */
-enum fcs_certificate_test {
-	INTEL_FCS_NO_TEST = 0,
-	INTEL_FCS_TEST = 1
-};
-
-/**
- * struct intel_fcs_cert_test_word - certificate test word
- * @test_bit: if set, do not write fuses, write to cache only.
- * @rsvd: write as 0
- */
-struct intel_fcs_cert_test_word {
-	uint32_t	test_bit:1;
-	uint32_t	rsvd:31;
-};
-
-/**
- * struct fcs_validation_request - validate HPS or bitstream image
- * @so_type: the type of signed object, 0 for HPS and 1 for bitstream
- * @src: the source of signed object,
- *       for HPS, this is the virtual address of the signed source
- *	 for Bitstream, this is path of the signed source, the default
- *       path is /lib/firmware
- * @size: the size of the signed object
- */
-struct fcs_validation_request {
-	enum fcs_vab_img_type so_type;
-	void *src;
-	size_t size;
-};
-
-/**
- * struct fcs_key_manage_request - Request key management from SDM
- * @addr: the virtual address of the signed object,
- * @size: the size of the signed object
- */
-struct fcs_key_manage_request {
-	void *addr;
-	size_t size;
-};
-
-/**
- * struct fcs_certificate_request - Certificate request to SDM
- * @test: test bit (1 if want to write to cache instead of fuses)
- * @addr: the virtual address of the signed object,
- * @size: the size of the signed object
- */
-struct fcs_certificate_request {
-	struct intel_fcs_cert_test_word test;
-	void *addr;
-	size_t size;
-};
-
-/**
- * struct fcs_data_encryption - aes data encryption command layout
- * @src: the virtual address of the input data
- * @src_size: the size of the unencrypted source
- * @dst: the virtual address of the output data
- * @dst_size: the size of the encrypted result
- */
-struct fcs_data_encryption {
-	void *src;
-	size_t src_size;
-	void *dst;
-	size_t dst_size;
-};
-
-/**
- * struct fcs_data_decryption - aes data decryption command layout
- * @src: the virtual address of the input data
- * @src_size: the size of the encrypted source
- * @dst: the virtual address of the output data
- * @dst_size: the size of the decrypted result
- */
-struct fcs_data_decryption {
-	void *src;
-	size_t src_size;
-	void *dst;
-	size_t dst_size;
-};
-
-/**
- * struct fcs_random_number_gen
- * @rndm: 8 words of random data.
- */
-struct fcs_random_number_gen {
-	uint32_t rndm[8];
-};
-
-/**
- * struct fcs_version
- * @version: version data.
- * @flags: Reserved as 0
- */
-struct fcs_version {
-	uint32_t version;
-	uint32_t flags;
-};
-#endif
-
diff --git a/include/uapi/linux/intel_fcs-ioctl.h b/include/uapi/linux/intel_fcs-ioctl.h
index 29268b173114..52b7799de195 100644
--- a/include/uapi/linux/intel_fcs-ioctl.h
+++ b/include/uapi/linux/intel_fcs-ioctl.h
@@ -1,4 +1,4 @@
-/* SPDX-License-Identifier: GPL-2.0 */
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
 /*
  * Copyright (C) 2020, Intel Corporation
  */
@@ -6,9 +6,124 @@
 #ifndef __INTEL_FCS_IOCTL_H
 #define __INTEL_FCS_IOCTL_H
 
+#include <linux/types.h>
+
 /* the value may need be changed when upstream */
 #define INTEL_FCS_IOCTL		0xC0
 
+/**
+ * enum fcs_vab_img_type - enumeration of image types
+ * @INTEL_FCS_IMAGE_HPS: Image to validate is HPS image
+ * @INTEL_FCS_IMAGE_BITSTREAM: Image to validate is bitstream
+ */
+enum fcs_vab_img_type {
+	INTEL_FCS_IMAGE_HPS = 0,
+	INTEL_FCS_IMAGE_BITSTREAM = 1
+};
+
+/**
+ * enum fcs_certificate_test - enumeration of certificate test
+ * @INTEL_FCS_NO_TEST: Write to eFuses
+ * @INTEL_FCS_TEST: Write to cache, do not write eFuses
+ */
+enum fcs_certificate_test {
+	INTEL_FCS_NO_TEST = 0,
+	INTEL_FCS_TEST = 1
+};
+
+/**
+ * struct intel_fcs_cert_test_word - certificate test word
+ * @test_bit: if set, do not write fuses, write to cache only.
+ * @rsvd: write as 0
+ */
+struct intel_fcs_cert_test_word {
+	__u32	test_bit:1;
+	__u32	rsvd:31;
+};
+
+/**
+ * struct fcs_validation_request - validate HPS or bitstream image
+ * @so_type: the type of signed object, 0 for HPS and 1 for bitstream
+ * @src: the source of signed object,
+ *       for HPS, this is the virtual address of the signed source
+ *	 for Bitstream, this is path of the signed source, the default
+ *       path is /lib/firmware
+ * @size: the size of the signed object
+ */
+struct fcs_validation_request {
+	enum fcs_vab_img_type so_type;
+	void *src;
+	__u32 size;
+};
+
+/**
+ * struct fcs_key_manage_request - Request key management from SDM
+ * @addr: the virtual address of the signed object,
+ * @size: the size of the signed object
+ */
+struct fcs_key_manage_request {
+	void *addr;
+	__u32 size;
+};
+
+/**
+ * struct fcs_certificate_request - Certificate request to SDM
+ * @test: test bit (1 if want to write to cache instead of fuses)
+ * @addr: the virtual address of the signed object,
+ * @size: the size of the signed object
+ */
+struct fcs_certificate_request {
+	struct intel_fcs_cert_test_word test;
+	void *addr;
+	__u32 size;
+};
+
+/**
+ * struct fcs_data_encryption - aes data encryption command layout
+ * @src: the virtual address of the input data
+ * @src_size: the size of the unencrypted source
+ * @dst: the virtual address of the output data
+ * @dst_size: the size of the encrypted result
+ */
+struct fcs_data_encryption {
+	void *src;
+	__u32 src_size;
+	void *dst;
+	__u32 dst_size;
+};
+
+/**
+ * struct fcs_data_decryption - aes data decryption command layout
+ * @src: the virtual address of the input data
+ * @src_size: the size of the encrypted source
+ * @dst: the virtual address of the output data
+ * @dst_size: the size of the decrypted result
+ */
+struct fcs_data_decryption {
+	void *src;
+	__u32 src_size;
+	void *dst;
+	__u32 dst_size;
+};
+
+/**
+ * struct fcs_random_number_gen
+ * @rndm: 8 words of random data.
+ */
+struct fcs_random_number_gen {
+	__u32 rndm[8];
+};
+
+/**
+ * struct fcs_version
+ * @version: version data.
+ * @flags: Reserved as 0
+ */
+struct fcs_version {
+	__u32 version;
+	__u32 flags;
+};
+
 /**
  * struct intel_fcs_dev_ioct: common structure passed to Linux
  *	kernel driver for all commands.
-- 
2.26.1

